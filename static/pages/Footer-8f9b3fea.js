class TextNodeConverter {
  constructor (type, tagName) {
    this.type = type;
    this.tagName = tagName;
  }

  import (el, node, converter) {
    node.content = converter.annotatedText(el, [node.id, 'content'], { preserveWhitespace: true });
  }

  export (node, el, converter) {
    el.append(converter.annotatedText([node.id, 'content']));
  }
}

function _isTextNodeEmpty (el) {
  return Boolean(/^\s*$/.exec(el.textContent))
}

function _isMixed (el) {
  const childNodes = el.childNodes;
  for (let i = 0; i < childNodes.length; i++) {
    const child = childNodes[i];
    if (child.isTextNode() && !_isTextNodeEmpty(child)) {
      return true
    }
  }
}

const ParagraphConverter = new TextNodeConverter('paragraph', 'p');

class HeadingConverter extends TextNodeConverter {
  constructor () {
    super('heading');
  }

  matchElement (el) {
    return /^h\d+$/.exec(el.tagName)
  }

  import (el, node, converter) {
    super.import(el, node, converter);

    const m = /^h(\d+)$/.exec(el.tagName);
    node.level = parseInt(m[1]);
  }

  export (node, el, converter) {
    el.tagName = 'h' + node.level;
    super.export(node, el, converter);
  }
}

const FigureConverter = {
  type: 'figure',
  tagName: 'figure',
  import (el, node, converter) {
    const imgEl = el.find('img');
    if (imgEl) {
      node.image = imgEl.attr('src');
    }
    const figCaptionEl = el.find('figcaption');
    if (figCaptionEl) {
      // if the caption contains mixed content we assume that this implicitly on paragraph
      if (_isMixed(figCaptionEl)) {
        figCaptionEl.tagName = 'p';
        const paragraph = converter.convertElement(figCaptionEl);
        node.legend = [paragraph.id];
      } else {
        node.legend = figCaptionEl.getChildren().map(child => {
          if (!child.tagName === 'p') return
          const paragraph = converter.convertElement(child);
          return paragraph.id
        }).filter(Boolean);
      }
    }
  },
  export (node, el, converter) {
    const $$ = converter.$$;
    el.append($$('img').attr('src', node.image));
    if (node.legend && node.legend.length > 0) {
      el.append($$('figcaption').append(
        node.resolve('legend').map(p => {
          return converter.convertNode(p)
        })
      ));
    }
  }
};

const BoldConverter = {
  type: 'bold',
  tagName: 'b',
  matchElement (el) {
    return (el.is('b')) ||
      (el.is('span') && el.getStyle('font-weight') === '700')
  }
};

const ItalicConverter = {
  type: 'italic',
  tagName: 'i',
  matchElement (el) {
    return (el.is('i')) ||
      (el.is('span') && el.getStyle('font-style') === 'italic')
  }
};

const StrikeConverter = {
  type: 'strike',
  tagName: 'span',
  matchElement (el) {
    return el.getStyle('text-decoration') === 'line-through'
  },
  export (node, el) {
    el.setStyle('text-decoration', 'line-through');
  }
};

const SubscriptConverter = {
  type: 'subscript',
  tagName: 'sub',
  matchElement (el) {
    return (el.is('sub')) ||
      (el.is('span') && el.getStyle('vertical-align') === 'sub')
  }
};

const SuperscriptConverter = {
  type: 'superscript',
  tagName: 'sup',
  matchElement (el) {
    return (el.is('sup')) ||
      (el.is('span') && el.getStyle('vertical-align') === 'super')
  }
};

const LinkConverter = {
  type: 'link',
  tagName: 'a',
  import (el, node) {
    node.href = el.getAttribute('href');
  },
  export (node, el) {
    el.setAttribute('href', node.href);
  }
};

var HtmlConverters = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ParagraphConverter: ParagraphConverter,
  HeadingConverter: HeadingConverter,
  FigureConverter: FigureConverter,
  BoldConverter: BoldConverter,
  ItalicConverter: ItalicConverter,
  StrikeConverter: StrikeConverter,
  SubscriptConverter: SubscriptConverter,
  SuperscriptConverter: SuperscriptConverter,
  LinkConverter: LinkConverter
});

class Platform {
  constructor () {
    // lazily initialized
    this._values = null;
  }

  get values () {
    if (!this._values) {
      this._values = detect();
    }
    return this._values
  }

  get isWindows () {
    return this.values.isWindows
  }

  get isMac () {
    return this.values.isMac
  }

  get inBrowser () {
    return this.values.inBrowser
  }

  get inNodeJS () {
    return this.values.inNodeJS
  }

  get inElectron () {
    return this.values.inElectron
  }

  get isIE () {
    return this.values.isIE
  }

  get isFF () {
    return this.values.isFF
  }

  get isOpera () {
    return this.values.isOpera
  }

  get isWebkit () {
    return this.values.isWebkit
  }

  get isChromium () {
    return this.values.isChromium
  }

  get devtools () {
    return this.values.devtools
  }

  get version () {
    return this.values.version
  }

  _reset () {
    this._values = detect();
  }
}

function detect () {
  const values = {};
  if (typeof window !== 'undefined') {
    values.inBrowser = true;

    // Detect Internet Explorer / Edge
    const ua = window.navigator.userAgent;
    const vn = window.navigator.vendor;
    const msie = ua.indexOf('MSIE ');
    const trident = ua.indexOf('Trident/');
    const edge = ua.indexOf('Edge/');
    const opera = window.opr;
    const chrome = window.chrome;

    if (msie > 0) {
      // IE 10 or older => return version number
      values.isIE = true;
      values.version = 10;
      // TODO: if we need someday, this would be the exact version number
      // parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10)
    } else if (trident > 0) {
      // IE 11 => return version number
      values.isIE = true;
      values.version = 11;
      values.isTrident = true;
      // TODO: if we need someday, this would be the exact version number
      // var rv = ua.indexOf('rv:')
      // parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10)
    } else if (edge > 0) {
      // IE 12 => return version number
      values.isIE = true;
      values.isEdge = true;
      values.version = 12;
      // TODO: if we need someday, this would be the exact version number
      parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
    }

    // Detect Firefox
    values.isFF = window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

    // TODO: explicit detection of Webkit&/Blink
    values.isWebkit = !values.isFF && !values.isIE;

    // Detect Opera
    values.isOpera = typeof opera !== 'undefined';

    // Detect Chromium
    values.isChromium = !!chrome && vn === 'Google Inc.' && !values.isOpera && !values.isEdge;
  } else {
    values.inBrowser = false;
  }

  if (values.inBrowser) {
    values.isWindows = (window.navigator !== undefined && window.navigator.appVersion && window.navigator.appVersion.indexOf('Win') !== -1);
    values.isMac = (window.navigator !== undefined && window.navigator.platform.indexOf('Mac') >= 0);
  }

  const _inNodeJS = (typeof process !== 'undefined' && process.release && process.release.name === 'node');
  if (_inNodeJS) {
    if (values.inBrowser) {
      values.inElectron = true;
    } else {
      values.inNodeJS = true;
    }
  }
  return values
}

var platform = new Platform();

function isString (s) {
  return typeof s === 'string'
}

function isNumber (n) {
  return typeof n === 'number'
}

function isNil (o) {
  return o === null || o === undefined
}

function _isDefined (val) {
  if (val) return true
  else return typeof val !== 'undefined'
}

/**
  A place to store global variables.
*/
const _global = (typeof global !== 'undefined') ? global : window;
const substanceGlobals = _isDefined(_global.Substance) ? _global.Substance : _global.Substance = {};

const COUNTERS = new Map();

function deterministicId (prefix) {
  prefix = prefix || '';
  let counter;
  if (!COUNTERS.has(prefix)) {
    counter = 0;
  } else {
    counter = COUNTERS.get(prefix);
  }
  counter++;
  COUNTERS.set(prefix, counter);
  if (prefix) {
    return `${prefix}-${counter}`
  } else {
    return String(counter)
  }
}

/*!
Math.uuid.js (v1.4)
http://www.broofa.com
mailto:robert@broofa.com
Copyright (c) 2010 Robert Kieffer
Dual licensed under the MIT and GPL licenses.
*/

/**
 * Generates a unique id.
 *
 * @param {String} [prefix] if provided the UUID will be prefixed.
 * @param {Number} [len] if provided a UUID with given length will be created.
 * @return A generated uuid.
 */
function uuid (prefix, len) {
  if (substanceGlobals && substanceGlobals.DETERMINISTIC_UUID) {
    return deterministicId(prefix)
  }

  if (prefix && prefix[prefix.length - 1] !== '-') {
    prefix = prefix.concat('-');
  }
  var chars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');
  var uuid = [];
  var radix = 16;
  var idx;
  len = len || 32;
  if (len) {
    // Compact form
    for (idx = 0; idx < len; idx++) uuid[idx] = chars[0 | Math.random() * radix];
  } else {
    // rfc4122, version 4 form
    var r;
    // rfc4122 requires these characters
    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
    uuid[14] = '4';
    // Fill in random data.  At i==19 set the high bits of clock sequence as
    // per rfc4122, sec. 4.1.5
    for (idx = 0; idx < 36; idx++) {
      if (!uuid[idx]) {
        r = 0 | Math.random() * 16;
        uuid[idx] = chars[(idx === 19) ? (r & 0x3) | 0x8 : r];
      }
    }
  }
  return (prefix || '') + uuid.join('')
}

function isObject (val) {
  const type = typeof val;
  return Boolean(val) && (type === 'object' || type === 'function')
}

function isFunction (f) {
  return typeof f === 'function'
}

function isArray (a) {
  return Array.isArray(a)
}

function forEach (iteratee, func) {
  if (!iteratee) return
  if (iteratee.constructor.prototype.forEach) {
    iteratee.forEach(func);
  } else {
    Object.keys(iteratee).forEach(function (key) {
      return func(iteratee[key], key)
    });
  }
}

/*
  An iterator for arrays.

  @class
  @param {Array} arr
 */
class ArrayIterator {
  constructor (arr) {
    this.arr = arr;
    this.pos = -1;
  }

  get _isArrayIterator () {
    return true
  }

  /**
    @returns {Boolean} true if there is another child node left.
   */
  hasNext () {
    return this.pos < this.arr.length - 1
  }

  /**
    Increments the iterator providing the next child node.

    @returns {HTMLElement} The next child node.
   */
  next () {
    this.pos += 1;
    var next = this.arr[this.pos];
    return next
  }

  /**
    Decrements the iterator.
   */
  back () {
    if (this.pos >= 0) {
      this.pos -= 1;
    }
    return this
  }

  peek () {
    return this.arr[this.pos + 1]
  }
}

function findIndex (arr, predicate) {
  if (!isFunction(predicate)) return arr.indexOf(predicate)
  for (let i = 0; i < arr.length; i++) {
    if (predicate(arr[i])) return i
  }
  return -1
}

/*
  Internal implementation used to store event bindings.
*/
class DOMEventListener {
  constructor (eventName, handler, options) {
    /* istanbul ignore next */
    if (!isString(eventName) || !isFunction(handler)) {
      throw new Error("Illegal arguments: 'eventName' must be a String, and 'handler' must be a Function.")
    }
    options = options || {};
    var origHandler = handler;
    var context = options.context;
    var capture = Boolean(options.capture);

    if (context) {
      handler = handler.bind(context);
    }
    if (options.once === true) {
      handler = _once(this, handler);
    }

    this.eventName = eventName;
    this.originalHandler = origHandler;
    this.handler = handler;
    this.capture = capture;
    this.context = context;
    this.options = options;
    // set when this gets attached to a DOM element
    this._el = null;
  }

  // TODO: do we really need this?
  get _isDOMEventListener () { return true }

  static findIndex (eventListeners, eventName, handler) {
    var idx = -1;
    if (arguments[1]._isDOMEventListener) {
      idx = eventListeners.indexOf(arguments[1]);
    } else {
      idx = findIndex(eventListeners,
        _matches.bind(null, {
          eventName: eventName,
          originalHandler: handler
        })
      );
    }
    return idx
  }
}

function _matches (l1, l2) {
  return l1.eventName === l2.eventName && l1.originalHandler === l2.originalHandler
}

function _once (listener, handler) {
  return function (event) {
    const el = listener._el;
    if (el) {
      handler(event);
      el.removeEventListener(listener);
    }
  }
}

const NOT_IMPLEMENTED = 'This method is not implemented.';

/**
  A unified interface for DOM elements used by Substance.

  @abstract
*/
class DOMElement {
  /*
    The element's id.
    @property {String} DOMElement#id
  */

  /*
    The element's tag name in lower case.
    @property {String} DOMElement#tagName
  */

  /*
    @property {String} DOMElement#textContent
   */

  /*
    The inner HTML string.

    @property {String} DOMElement#innerHTML
   */

  /*
    The outer HTML string.

    @property {String} DOMElement#outerHTML
   */

  /*
    An array of child nodes, including nodes such as TextNodes.

    @property {Array<DOMElement>} DOMElement#childNodes
   */

  /*
    An array of child elements.

    @property {Array<DOMElement>} DOMElement#children children
   */

  /*
    The computed height.

    @property {Array<DOMElement>} DOMElement#height
   */

  /*
    The computed width.

    @property {Array<DOMElement>} DOMElement#width
   */

  /**
    @returns the native element
  */
  getNativeElement () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Checks if the element is a TextNode.

    @returns {Boolean} true if the element is of type `Node.TEXT_NODE`
   */
  isTextNode () {
    /* istanbul ignore next */
    return false
  }

  /**
    Checks if the element is actually an element as opposed to a node.

    @returns {Boolean} true if the element is of type `Node.ELEMENT_NODE`
   */
  isElementNode () {
    /* istanbul ignore next */
    return false
  }

  /**
    Checks if the element is a CommentNode.

    @returns {Boolean} true if the element is of type `Node.COMMENT_NODE`
   */
  isCommentNode () {
    /* istanbul ignore next */
    return false
  }

  /**
    Checks if the element is a DocumentNode.

    @returns {Boolean} true if the element is of type `Node.DOCUMENT_NODE`
   */
  isDocumentNode () {
    /* istanbul ignore next */
    return false
  }

  /**
    Get the tagName of this element.

    @private
    @note Considered as private API, in favor of the property {DOMElement.prototype.tagName}
    @returns {String} the tag name in lower-case.
   */
  getTagName () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Set the tagName of this element.

    @private
    @note Considered as private API, in favor of the property {DOMElement.prototype.tagName}
    @param {String} tagName the new tag name
    @returns {this}
  */
  setTagName (tagName) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Get the id of this element.

    @private
    @note Considered as private API, in favor of the property {DOMElement.prototype.id}
    @returns {String} the id.
   */
  getId () {
    return this.getAttribute('id')
  }

  /**
    Set the id of this element.

    @private
    @note Considered as private API, in favor of the property {DOMElement.prototype.id}
    @param {String} id the new id
    @returns {this}
  */
  setId (id) {
    this.setAttribute('id', id);
    return this
  }

  /**
    Checks if a CSS class is set.

    @param {String} className
    @returns {Boolean} true if the CSS class is set
  */
  hasClass (className) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Adds a CSS class.

    @param {String} classString A space-separated string with CSS classes
    @returns {this}
  */
  addClass (classString) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Removes a CSS class.

    @param {String} classString A space-separated string with CSS classes
    @returns {this}
  */
  removeClass (classString) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  hasAttribute (name) {
    return Boolean(this.getAttribute(name))
  }

  /**
    jQuery style getter and setter for attributes.

    @param {String} name
    @param {String} [value] if present the attribute will be set
    @returns {String|this} if used as getter the attribute value, otherwise this element for chaining
   */
  attr () {
    if (arguments.length === 1) {
      if (isString(arguments[0])) {
        return this.getAttribute(arguments[0])
      } else if (isObject(arguments[0])) {
        forEach(arguments[0], function (value, name) {
          this.setAttribute(name, value);
        }.bind(this));
      }
    } else if (arguments.length === 2) {
      this.setAttribute(arguments[0], arguments[1]);
    }
    return this
  }

  /**
    Removes an attribute.

    @param {String} name
    @returns {this}
  */
  removeAttr (name) {
    var names = name.split(/\s+/);
    if (names.length === 1) {
      this.removeAttribute(name);
    } else {
      names.forEach(function (name) {
        this.removeAttribute(name);
      }.bind(this));
    }
    return this
  }

  /**
    Get the attribute with a given name.

    @returns {String} the attribute's value.
  */
  getAttribute (name) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Set the attribute with a given name.

    @param {String} the attribute's value.
    @returns {this}
  */
  setAttribute (name, value) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  removeAttribute (name) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getAttributes () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    jQuery style getter and setter for HTML element properties.

    @param {String} name
    @param {String} [value] if present the property will be set
    @returns {String|this} if used as getter the property value, otherwise this element for chaining
   */
  htmlProp () {
    if (arguments.length === 1) {
      if (isString(arguments[0])) {
        return this.getProperty(arguments[0])
      } else if (isObject(arguments[0])) {
        forEach(arguments[0], function (value, name) {
          this.setProperty(name, value);
        }.bind(this));
      }
    } else if (arguments.length === 2) {
      this.setProperty(arguments[0], arguments[1]);
    }
    return this
  }

  getProperty (name) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  setProperty (name, value) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    jQuery style getter and setter for the *value* of an element.

    @param {String} [value] The value to set.
    @returns {String|this} the value if used as a getter, `this` otherwise
  */
  val (value) {
    if (arguments.length === 0) {
      return this.getValue()
    } else {
      this.setValue(value);
      return this
    }
  }

  getValue () {
    return this.getProperty('value')
  }

  setValue (value) {
    this.setProperty('value', value);
    return this
  }

  /**
    jQuery style method to set or get inline CSS styles.

    @param {String} name the style name
    @param {String} [value] the style value
    @returns {String|this} the style value or this if used as a setter
  */
  css () {
    /* istanbul ignore else */
    if (arguments.length === 1) {
      /* istanbul ignore else */
      if (isString(arguments[0])) {
        return this.getStyle(arguments[0])
      } else if (isObject(arguments[0])) {
        forEach(arguments[0], function (value, name) {
          this.setStyle(name, value);
        }.bind(this));
      } else {
        throw new Error('Illegal arguments.')
      }
    } else if (arguments.length === 2) {
      this.setStyle(arguments[0], arguments[1]);
    } else {
      throw new Error('Illegal arguments.')
    }
    return this
  }

  getStyle (name) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  setStyle (name, value) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Gets or sets the text content of an element.

    @param {String} [text] The text content to set.
    @returns {String|this} The text content if used as a getter, `this` otherwise
  */
  text (text) {
    if (arguments.length === 0) {
      return this.getTextContent()
    } else {
      this.setTextContent(text);
    }
    return this
  }

  /**
    Get the textContent of this element.

    @private
    @note Considered as private API, in favor of the property {DOMElement.prototype.innerHTML}
    @returns {String}
  */
  getTextContent () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Set the textContent of this element.

    @private
    @note Considered as private API, in favor of the property {DOMElement.prototype.innerHTML}
    @param {String} text the new text content
    @returns {this}
  */
  setTextContent (text) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    jQuery style getter and setter for the innerHTML of an element.

    @param {String} [html] The html to set.
    @returns {String|this} the inner html if used as a getter, `this` otherwise
   */
  html (html) {
    if (arguments.length === 0) {
      return this.getInnerHTML()
    } else {
      this.setInnerHTML(html);
    }
    return this
  }

  /**
    Get the innerHTML of this element.

    @private
    @note Considered as private API, in favor of the property {@link DOMElement.prototype.innerHTML}
    @returns {String}
  */
  getInnerHTML () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Just an alias for getInnerHTML() which feels
    better when working with XML DOMs
  */
  getInnerXML () {
    return this.getInnerHTML()
  }

  /**
    Set the innerHTML of this element.

    @private
    @note Considered as private API, in favor of the property {@link DOMElement.prototype.innerHTML}
    @param {String} text the new text content
    @returns {this}
  */
  setInnerHTML (html) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  setInnerXML (xml) {
    return this.setInnerHTML(xml)
  }

  /**
    Get the outerHTML of this element.

    @private
    @note Considered as private API, in favor of the property {@link DOMElement.prototype.outerHTML}
    @returns {String}
  */
  getOuterHTML () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getOuterXML () {
    return this.getOuterHTML()
  }

  /**
    Registers an Element event handler.

    @param {String} event The event name.
    @param {Function} handler The handler function.
    @param {Object} [context] context where the function should be bound to
    @param {Object} [options]
    @param {Object} [options.capture] to register the event in the event's capture phase (bubbling top-down)
    @returns {this}
  */
  on (eventName, handler, context, options) {
    /* istanbul ignore next */
    if (!isString(eventName)) {
      throw new Error('Illegal argument: "event" must be a String.')
    }
    options = options || {};
    if (context) {
      options.context = context;
    }
    /* istanbul ignore next */
    if (!handler || !isFunction(handler)) {
      throw new Error('Illegal argument: invalid handler function for event ' + eventName)
    }
    this.addEventListener(eventName, handler, options);
    return this
  }

  /**
    Unregisters the handler of a given event.

    @param {String} event The event name.
    @returns {this}
  */
  off (eventName, handler) {
    // el.off(this): disconnect all listeners bound to the given context
    if (arguments.length === 1 && !isString(eventName)) {
      const context = arguments[0];
      this.getEventListeners().filter(function (l) {
        return l.context === context
      }).forEach(function (l) {
        this.removeEventListener(l);
      }.bind(this));
    } else {
      this.removeEventListener(eventName, handler);
    }
    return this
  }

  addEventListener (eventName, handler, options = {}) {
    let listener;
    if (arguments.length === 1 && arguments[0]) {
      listener = arguments[0];
    } else {
      listener = this._createEventListener(eventName, handler, options);
    }
    if (!this.eventListeners) {
      this.eventListeners = [];
    }
    listener._el = this;
    this.eventListeners.push(listener);
    this._addEventListenerNative(listener);
    return this
  }

  _createEventListener (eventName, handler, options) {
    return new DOMEventListener(eventName, handler, options)
  }

  _addEventListenerNative(listener) {} // eslint-disable-line

  removeEventListener (eventName, handler) {
    if (!this.eventListeners) return
    // console.log('removing event listener', eventName, handler);
    let listener = null;
    const idx = DOMEventListener.findIndex(this.eventListeners, eventName, handler);
    listener = this.eventListeners[idx];
    if (idx > -1) {
      this.eventListeners.splice(idx, 1);
      // console.log('BrowserDOMElement.removeEventListener:', eventName, this.eventListeners.length);
      listener._el = null;
      this._removeEventListenerNative(listener);
    }
    return this
  }

  _removeEventListenerNative(listener) {} // eslint-disable-line

  removeAllEventListeners () {
    if (!this.eventListeners) return
    for (let i = 0; i < this.eventListeners.length; i++) {
      const listener = this.eventListeners[i];
      // console.log('BrowserDOMElement.removeEventListener:', eventName, this.eventListeners.length);
      listener._el = null;
      this._removeEventListenerNative(listener);
    }
    delete this.eventListeners;
  }

  getEventListeners () {
    return this.eventListeners || []
  }

  /**
    Gets the type of this element in lower-case.

    @private
    @note Considered as private API, in favor of the property {@link DOMElement.prototype.nodeType}
    @returns {String}
  */
  getNodeType () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getContentType () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getChildCount () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Get child nodes of this element.

    This method provides a new array with wrapped native elements.
    Better use getChildAt().

    @private Considered as private API, in favor of the property {DOMElement.prototype.childNodes}
    @returns {Array<DOMElement>}
   */
  getChildNodes () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Get child elements of this element.

    This method provides a new array with wrapped native elements.
    Better use getChildAt().

    @private Considered as private API, in favor of the property {DOMElement.prototype.children}
    @returns {Array<DOMElement>}
   */
  getChildren () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getChildAt (pos) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getChildIndex (child) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getChildNodeIterator () {
    return new ArrayIterator(this.getChildNodes())
  }

  getLastChild () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getFirstChild () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getNextSibling () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  getPreviousSibling () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Creates a clone of the current element.

    @returns {DOMElement} A clone of this element.
  */
  clone(deep) { // eslint-disable-line
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Creates a DOMElement.

    @param {String} str a tag name or an HTML element as string.
    @returns {DOMElement}
  */
  createElement (str) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  createTextNode (text) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  createComment (data) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  createProcessingInstruction (name, data) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  createCDATASection (data) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Checks if a given CSS selector matches for this element.

    **Attention**
    This method is currently not implemented for {VirtualElement}.
    This means you should use it only in importer implementations.

    @param {String} cssSelector
    @returns {Boolean}
   */
  is (cssSelector) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Get the parent element of this element.

    @returns {DOMElement} the parent element
   */
  getParent () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Get the ownerDocument of this element.

    @returns {DOMElement} the document element
  */
  getOwnerDocument () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /*
    @returns {DOMElement} the doctype element `<!DOCTYPE <name> PUBLIC "<publicId>" "<systemId>" >`; null if not present
  */
  getDoctype () {
    /* istanbul ignore next */
    throw new Error('NOT_IMPLEMENTED')
  }

  /**
   * @param {*} qualifiedNameStr the name of the root element
   * @param {*} publicId the id of the schema
   * @param {*} systemId typically a DTD URI
   */
  setDoctype(qualifiedNameStr, publicId, systemId) { // eslint-disable-line
    throw new Error('NOT_IMPLEMENTED')
  }

  getElementById (id) {
    throw new Error('NOT_IMPLEMENTED')
  }

  /**
    Find the first descendant element matching the given CSS selector.
    Note this differs from jQuery.find() that it returns only one element.

    **Attention**
    This method is currently not implemented for {VirtualElement}.
    This means you can use it only in importer implementations, but not in render or exporter implementations.

    @param {String} cssSelector
    @returns {DOMElement} found element
   */
  find (cssSelector) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Find all descendant elements matching the given CSS selector.

    **Attention**
    This method is currently not implemented for {VirtualElement}.
    This means you can use it only in importer implementations, but not in render or exporter implementations.

    @param {String} cssSelector
    @returns {Array<DOMElement>} found elements
   */
  findAll (cssSelector) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Append a child element.

    @param {DOMElement|String} child An element or text to append
    @returns {this}
   */
  append (children) {
    if (arguments.length === 1) {
      if (isArray(children)) {
        children = children.slice();
      } else {
        const child = children;
        return this.appendChild(child)
      }
    } else {
      children = arguments;
    }
    if (children) {
      Array.prototype.forEach.call(children, this.appendChild.bind(this));
    }
    return this
  }

  appendChild (child) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Insert a child element at a given position.

    @param {Number} pos insert position
    @param {DOMElement|String} child The child element or text to insert.
    @returns {this}
  */
  insertAt (pos, child) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  insertBefore (newChild, before) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Remove the child at a given position.

    @param {Number} pos
    @returns {this}
  */
  removeAt (pos) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  removeChild (child) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  replaceChild (oldChild, newChild) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  /**
    Removes this element from its parent.
    @returns {this}
  */
  remove () {
    var parent = this.getParent();
    if (parent) {
      parent.removeChild(this);
    }
  }

  /**
    Removes all child nodes from this element.

    @returns {this}
  */
  empty () {
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  serialize () {
    return this.getOuterHTML()
  }

  isInDocument () {
    let el = this;
    while (el) {
      if (el.isDocumentNode()) {
        return true
      }
      el = el.getParent();
    }
  }

  /**
    Focusses this element.

    **Attention: this makes only sense for elements which are rendered in the browser**

  */
  focus () {
    /* istanbul ignore next */
    return this
  }

  /**
    Selects this element.
  */
  select () {
    /* istanbul ignore next */
    return this
  }

  /**
    Blur this element.
  */
  blur () {
    /* istanbul ignore next */
    return this
  }

  /**
    Trigger a click event on this element.
  */
  click () {
    /* istanbul ignore next */
    return this
  }

  /* API to retrieve layout information */

  getWidth () {
    /* istanbul ignore next */
    return 0
  }

  getHeight () {
    /* istanbul ignore next */
    return 0
  }

  /**
    Outer height as provided by $.outerHeight(withMargin)
  */
  getOuterHeight (withMargin) { // eslint-disable-line no-unused-vars
    /* istanbul ignore next */
    return 0
  }

  /**
    Offset values as provided by $.offset()
  */
  getOffset () {
    /* istanbul ignore next */
    return { top: 0, left: 0 }
  }

  /**
    Position values as provided by $.position()
  */
  getPosition () {
    /* istanbul ignore next */
    return { top: 0, left: 0 }
  }

  /**
    Get element factory conveniently

    @example

    var $$ = el.getElementFactory()
    $$('div').append('bla')
  */
  getElementFactory () {
    return this.createElement.bind(this)
  }

  /**
    Triggers a custom event.

    @param {String} name
    @param {Object} data
  */
  emit(name, data) { // eslint-disable-line
    /* istanbul ignore next */
    throw new Error(NOT_IMPLEMENTED)
  }

  // properties

  get id () {
    return this.getId()
  }

  set id (id) {
    this.setId(id);
  }

  get tagName () {
    return this.getTagName()
  }

  set tagName (tagName) {
    this.setTagName(tagName);
  }

  get nodeName () {
    return this.getTagName()
  }

  get nodeType () {
    return this.getNodeType()
  }

  get className () {
    return this.getAttribute('class')
  }

  set className (className) {
    this.setAttribute('class', className);
  }

  get textContent () {
    return this.getTextContent()
  }

  set textContent (text) {
    this.setTextContent(text);
  }

  get innerHTML () {
    return this.getInnerHTML()
  }

  set innerHTML (html) {
    this.setInnerHTML(html);
  }

  get outerHTML () {
    return this.getOuterHTML()
  }

  get firstChild () {
    return this.getFirstChild()
  }

  get lastChild () {
    return this.getLastChild()
  }

  get nextSibling () {
    return this.getNextSibling()
  }

  get previousSibling () {
    return this.getPreviousSibling()
  }

  get parentNode () {
    return this.getParent()
  }

  get height () {
    return this.getHeight()
  }

  get width () {
    return this.getWidth()
  }

  get value () {
    return this.getValue()
  }

  set value (value) {
    return this.setValue(value)
  }

  get _isDOMElement () { return true }

  // TODO: probably we should just export these symbols
  static get pxStyles () { return PX_STYLES }

  static get EMPTY_HTML () { return EMPTY_HTML }
}

const PX_STYLES = {
  top: true,
  bottom: true,
  left: true,
  right: true,
  height: true,
  width: true
};

const EMPTY_HTML = '<html><head></head><body></body></html>';

// using a dynamic signature to store the wrapper on the native element
// this way, we avoid to inadvertently use a wrong API created by another
// DOMElement instance on the element
const SIGNATURE = uuid('_BrowserDOMElement');

function _attach (nativeEl, browserDOMElement) {
  if (!browserDOMElement._isBrowserDOMElement) throw new Error('Invalid argument')
  if (Object.prototype.hasOwnProperty.call(nativeEl, SIGNATURE)) throw new Error('Already attached')
  nativeEl[SIGNATURE] = browserDOMElement;
}

function _detach (nativeEl) {
  delete nativeEl[SIGNATURE];
}

function _unwrap (nativeEl) {
  return nativeEl[SIGNATURE]
}

class BrowserDOMElement extends DOMElement {
  constructor (el) {
    super();
    console.assert(el instanceof window.Node, 'Expecting native DOM node.');
    this.el = el;
    // creating a backlink so we can move between the native DOM API and
    // the DOMElement API
    _attach(el, this);
  }

  getNativeElement () {
    return this.el
  }

  getNodeType () {
    switch (this.el.nodeType) {
      case window.Node.TEXT_NODE:
        return 'text'
      case window.Node.ELEMENT_NODE:
        return 'element'
      case window.Node.DOCUMENT_NODE:
        return 'document'
      case window.Node.COMMENT_NODE:
        return 'comment'
      case window.Node.PROCESSING_INSTRUCTION_NODE:
        return 'directive'
      case window.Node.CDATA_SECTION_NODE:
        return 'cdata'
        //
    }
  }

  getDoctype () {
    if (this.isDocumentNode()) {
      return this.el.doctype
    } else {
      return this.getOwnerDocument().getDoctype()
    }
  }

  setDoctype (qualifiedNameStr, publicId, systemId) {
    const ownerDocument = this._getNativeOwnerDocument();
    const oldDocType = ownerDocument.doctype;
    const newDocType = ownerDocument.implementation.createDocumentType(
      qualifiedNameStr, publicId, systemId
    );
    if (oldDocType) {
      oldDocType.parentNode.replaceChild(newDocType, oldDocType);
    } else {
      ownerDocument.insertBefore(newDocType, ownerDocument.firstChild);
    }
  }

  isTextNode () {
    return (this.el.nodeType === window.Node.TEXT_NODE)
  }

  isElementNode () {
    return (this.el.nodeType === window.Node.ELEMENT_NODE)
  }

  isCommentNode () {
    return (this.el.nodeType === window.Node.COMMENT_NODE)
  }

  isDocumentNode () {
    return (this.el.nodeType === window.Node.DOCUMENT_NODE)
  }

  hasClass (className) {
    return this.el.classList.contains(className)
  }

  addClass (className) {
    this.el.classList.add(className);
    return this
  }

  removeClass (className) {
    this.el.classList.remove(className);
    return this
  }

  hasAttribute (name) {
    return this.el.hasAttribute(name)
  }

  getAttribute (name) {
    // NOTE: returning undefined if the attribute is not present
    // The native implementation returns null
    if (this.el.hasAttribute(name)) {
      return this.el.getAttribute(name)
    }
  }

  setAttribute (name, value) {
    this.el.setAttribute(name, String(value));
    return this
  }

  removeAttribute (name) {
    this.el.removeAttribute(name);
    return this
  }

  getAttributes () {
    if (!this.el.attributes._mapAdapter) {
      this.el.attributes._mapAdapter = new AttributesMapAdapter(this.el.attributes);
    }
    return this.el.attributes._mapAdapter
  }

  getProperty (name) {
    return this.el[name]
  }

  setProperty (name, value) {
    // ATTENTION: element properties are only used on HTML elements, such as the 'value' of an <input> element
    // In XML there are only attributes
    if (this._isXML()) throw new Error('setProperty() is only supported for HTML elements.')
    this.el[name] = value;
    return this
  }

  getTagName () {
    // it is convenient in HTML mode to always use tagName in lower case
    // however, in XML this is not allowed, as tag names are case sensitive there
    if (this._isXML()) {
      return this.el.tagName
    } else if (this.el.tagName) {
      return this.el.tagName.toLowerCase()
    }
  }

  setTagName (tagName) {
    const newEl = this.createElement(tagName);
    const attributes = this.el.attributes;
    const l = attributes.length;
    let i;
    for (i = 0; i < l; i++) {
      const attr = attributes.item(i);
      newEl.setAttribute(attr.name, attr.value);
    }
    if (this.eventListeners) {
      this.eventListeners.forEach(function (listener) {
        newEl.addEventListener(listener.eventName, listener.handler, listener.capture);
      });
    }
    newEl.append(this.getChildNodes());

    this._replaceNativeEl(newEl.getNativeElement());
    return this
  }

  getId () {
    return this.el.id
  }

  setId (id) {
    this.el.id = id;
    return this
  }

  getStyle (name) {
    let val = this.el.style[name];
    if (!val) {
      const computedStyle = this.getComputedStyle();
      val = computedStyle[name];
    }
    return val
  }

  getComputedStyle () {
    return window.getComputedStyle(this.el)
  }

  setStyle (name, value) {
    if (DOMElement.pxStyles[name] && isNumber(value)) value = value + 'px';
    this.el.style[name] = value;
    return this
  }

  getTextContent () {
    return this.el.textContent
  }

  setTextContent (text) {
    this.el.textContent = text;
    return this
  }

  getInnerHTML () {
    if (this._isXML()) {
      const xs = new window.XMLSerializer();
      const result = Array.prototype.map.call(this.el.childNodes, c => xs.serializeToString(c));
      return result.join('')
    } else {
      return this.el.innerHTML
    }
  }

  setInnerHTML (html) {
    // TODO: if in some cases we need to use XMLSerializer to get the innerHTML
    // then we probably need to use DOMParser here accordingly
    this.el.innerHTML = html;
    return this
  }

  getOuterHTML () {
    // NOTE: this was necessary in some browsers, which did not provide
    // el.outerHTML for XML elements
    if (this._isXML()) {
      const xs = new window.XMLSerializer();
      return xs.serializeToString(this.el)
    } else {
      return this.el.outerHTML
    }
  }

  _addEventListenerNative (listener) {
    this.el.addEventListener(listener.eventName, listener.handler, listener.capture);
  }

  _removeEventListenerNative (listener) {
    this.el.removeEventListener(listener.eventName, listener.handler);
  }

  getEventListeners () {
    return this.eventListeners || []
  }

  getChildCount () {
    return this.el.childNodes.length
  }

  getChildNodes () {
    const childNodes = [];
    for (let node = this.el.firstChild; node; node = node.nextSibling) {
      childNodes.push(BrowserDOMElement.wrap(node));
    }
    return childNodes
  }

  getChildNodeIterator () {
    return new BrowserChildNodeIterator(this.el)
  }

  get childNodes () {
    return this.getChildNodes()
  }

  getChildren () {
    // Some browsers don't filter elements here and also include text nodes,
    // that why we can't use el.children
    const children = [];
    for (let node = this.el.firstChild; node; node = node.nextSibling) {
      if (node.nodeType === window.Node.ELEMENT_NODE) {
        children.push(BrowserDOMElement.wrap(node));
      }
    }
    return children
  }

  get children () {
    return this.getChildren()
  }

  getChildAt (pos) {
    return BrowserDOMElement.wrap(this.el.childNodes[pos])
  }

  getChildIndex (child) {
    /* istanbul ignore next */
    if (!child._isBrowserDOMElement) {
      throw new Error('Expecting a BrowserDOMElement instance.')
    }
    return Array.prototype.indexOf.call(this.el.childNodes, child.el)
  }

  getFirstChild () {
    const firstChild = this.el.firstChild;
    /* istanbul ignore else */
    if (firstChild) {
      return BrowserDOMElement.wrap(firstChild)
    } else {
      return null
    }
  }

  getLastChild () {
    var lastChild = this.el.lastChild;
    /* istanbul ignore else */
    if (lastChild) {
      return BrowserDOMElement.wrap(lastChild)
    } else {
      return null
    }
  }

  getNextSibling () {
    const next = this.el.nextSibling;
    /* istanbul ignore else */
    if (next) {
      return BrowserDOMElement.wrap(next)
    } else {
      return null
    }
  }

  getPreviousSibling () {
    const previous = this.el.previousSibling;
    /* istanbul ignore else */
    if (previous) {
      return BrowserDOMElement.wrap(previous)
    } else {
      return null
    }
  }

  clone (deep) {
    const clone = this.el.cloneNode(deep);
    return BrowserDOMElement.wrap(clone)
  }

  createDocument (format, opts) {
    return BrowserDOMElement.createDocument(format, opts)
  }

  createElement (tagName) {
    const doc = this._getNativeOwnerDocument();
    const el = doc.createElement(tagName);
    return BrowserDOMElement.wrap(el)
  }

  createTextNode (text) {
    const doc = this._getNativeOwnerDocument();
    const el = doc.createTextNode(text);
    return BrowserDOMElement.wrap(el)
  }

  createComment (data) {
    const doc = this._getNativeOwnerDocument();
    const el = doc.createComment(data);
    return BrowserDOMElement.wrap(el)
  }

  createProcessingInstruction (name, data) {
    const doc = this._getNativeOwnerDocument();
    const el = doc.createProcessingInstruction(name, data);
    return BrowserDOMElement.wrap(el)
  }

  createCDATASection (data) {
    const doc = this._getNativeOwnerDocument();
    const el = doc.createCDATASection(data);
    return BrowserDOMElement.wrap(el)
  }

  is (cssSelector) {
    // ATTENTION: looking at https://developer.mozilla.org/en/docs/Web/API/Element/matches
    // Element.matches might not be supported by some mobile browsers
    const el = this.el;
    /* istanbul ignore else */
    if (this.isElementNode()) {
      return matches(el, cssSelector)
    } else {
      return false
    }
  }

  getParent () {
    const parent = this.el.parentNode;
    /* istanbul ignore else */
    if (parent) {
      return BrowserDOMElement.wrap(parent)
    } else {
      return null
    }
  }

  getOwnerDocument () {
    return BrowserDOMElement.wrap(this._getNativeOwnerDocument())
  }

  get ownerDocument () {
    return this.getOwnerDocument()
  }

  _getNativeOwnerDocument () {
    return (this.isDocumentNode() ? this.el : this.el.ownerDocument)
  }

  getElementById (id) {
    const result = this._getNativeOwnerDocument().getElementById(id);
    if (result) {
      return BrowserDOMElement.wrap(result)
    } else {
      return null
    }
  }

  find (cssSelector) {
    let result = null;
    if (this.el.querySelector) {
      result = this.el.querySelector(cssSelector);
    }
    if (result) {
      return BrowserDOMElement.wrap(result)
    } else {
      return null
    }
  }

  findAll (cssSelector) {
    let result = [];
    if (this.el.querySelectorAll) {
      result = this.el.querySelectorAll(cssSelector);
    }
    return Array.prototype.map.call(result, function (el) {
      return BrowserDOMElement.wrap(el)
    })
  }

  _normalizeChild (child) {
    if (isNil(child)) return child

    if (child instanceof window.Node) {
      child = BrowserDOMElement.wrap(child);
    // Note: element is owned by a different implementation.
    // Probably you are using two different versions of Substance on the same element.
    // Can't tell if this is bad. For now we continue by wrapping it again
    } else if (child._isBrowserDOMElement && !(child instanceof BrowserDOMElement)) {
      child = BrowserDOMElement.wrap(child);
    } else if (isString(child) || isNumber(child)) {
      child = this.createTextNode(child);
    }
    /* istanbul ignore next */
    if (!child || !child._isBrowserDOMElement) {
      throw new Error('Illegal child type.')
    }
    console.assert(_unwrap(child.el) === child, 'The backlink to the wrapper should be consistent');
    return child.getNativeElement()
  }

  appendChild (child) {
    const nativeChild = this._normalizeChild(child);
    if (nativeChild) {
      this.el.appendChild(nativeChild);
    }
    return this
  }

  insertAt (pos, child) {
    const nativeChild = this._normalizeChild(child);
    const childNodes = this.el.childNodes;
    if (pos >= childNodes.length) {
      this.el.appendChild(nativeChild);
    } else {
      this.el.insertBefore(nativeChild, childNodes[pos]);
    }
    return this
  }

  insertBefore (child, before) {
    /* istanbul ignore next */
    if (isNil(before)) {
      return this.appendChild(child)
    }
    if (!before._isBrowserDOMElement) {
      throw new Error('insertBefore(): Illegal arguments. "before" must be a BrowserDOMElement instance.')
    }
    var nativeChild = this._normalizeChild(child);
    if (nativeChild) {
      this.el.insertBefore(nativeChild, before.el);
    }
    return this
  }

  removeAt (pos) {
    this.el.removeChild(this.el.childNodes[pos]);
    return this
  }

  removeChild (child) {
    /* istanbul ignore next */
    if (!child || !child._isBrowserDOMElement) {
      throw new Error('removeChild(): Illegal arguments. Expecting a BrowserDOMElement instance.')
    }
    this.el.removeChild(child.el);
    return this
  }

  replaceChild (oldChild, newChild) {
    /* istanbul ignore next */
    if (!newChild || !oldChild ||
        !newChild._isBrowserDOMElement || !oldChild._isBrowserDOMElement) {
      throw new Error('replaceChild(): Illegal arguments. Expecting BrowserDOMElement instances.')
    }
    // Attention: Node.replaceChild has weird semantics
    this.el.replaceChild(newChild.el, oldChild.el);
    return this
  }

  empty () {
    const el = this.el;
    while (el.lastChild) {
      el.removeChild(el.lastChild);
    }
    return this
  }

  remove () {
    if (this.el.parentNode) {
      this.el.parentNode.removeChild(this.el);
    }
    return this
  }

  serialize () {
    const outerHTML = this.el.outerHTML;
    if (isString(outerHTML)) {
      return outerHTML
    } else {
      const xs = new window.XMLSerializer();
      return xs.serializeToString(this.el)
    }
  }

  isInDocument () {
    let el = this.el;
    while (el) {
      if (el.nodeType === window.Node.DOCUMENT_NODE) {
        return true
      }
      el = el.parentNode;
    }
  }

  _replaceNativeEl (newEl) {
    console.assert(newEl instanceof window.Node, 'Expecting a native element.');
    const oldEl = this.el;
    const parentNode = oldEl.parentNode;
    if (parentNode) {
      parentNode.replaceChild(newEl, oldEl);
    }
    this.el = newEl;
    _detach(oldEl);
    _detach(newEl);
    _attach(newEl, this);
  }

  _getChildNodeCount () {
    return this.el.childNodes.length
  }

  focus (opts) {
    this.el.focus(opts);
    return this
  }

  select () {
    this.el.select();
    return this
  }

  blur () {
    this.el.blur();
    return this
  }

  click () {
    // ATTENTION: unfortunately there is no way to detect an exception during the native click
    // the Browser swallows an error displaying it on console without throwing on the caller side
    // I have tried to register a hook once, but this does not work properly, because an exception could happen while bubbling up
    // binding to document does not work neither, because the event might be stopped
    this.el.click();
    return true
  }

  getWidth () {
    const rect = this.el.getClientRects()[0];
    if (rect) {
      return rect.width
    } else {
      return 0
    }
  }

  getHeight () {
    const rect = this.el.getClientRects()[0];
    if (rect) {
      return rect.height
    } else {
      return 0
    }
  }

  getOffset () {
    const rect = this.el.getBoundingClientRect();
    return {
      top: rect.top + document.body.scrollTop,
      left: rect.left + document.body.scrollLeft
    }
  }

  getPosition () {
    return { left: this.el.offsetLeft, top: this.el.offsetTop }
  }

  getOuterHeight (withMargin) {
    let outerHeight = this.el.offsetHeight;
    if (withMargin) {
      const style = this.getComputedStyle();
      outerHeight += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
    }
    return outerHeight
  }

  getContentType () {
    return this._getNativeOwnerDocument().contentType
  }

  _isXML () {
    return this.getContentType() === 'application/xml'
  }

  emit (name, data) {
    let event;
    if (data) {
      event = new window.CustomEvent(name, {
        detail: data,
        bubbles: true,
        cancelable: true
      });
    } else {
      event = new window.Event(name, {
        bubbles: true,
        cancelable: true
      });
    }
    this.el.dispatchEvent(event);
  }
}

BrowserDOMElement.prototype._isBrowserDOMElement = true;

// TODO: flesh out how options should look like (e.g. XML namespaceURI etc.)
BrowserDOMElement.createDocument = function (format, opts = {}) {
  let doc;
  if (format === 'xml') {
    const xmlInstruction = [];
    if (opts.version) {
      xmlInstruction.push(`version="${opts.version}"`);
    }
    if (opts.encoding) {
      xmlInstruction.push(`encoding="${opts.encoding}"`);
    }
    let xmlStr;
    if (xmlInstruction.length > 0) {
      xmlStr = `<?xml ${xmlInstruction.join(' ')}?><dummy/>`;
    } else {
      xmlStr = '<dummy/>';
    }
    // HACK: didn't find a way to create an empty XML doc without a root element
    doc = (new window.DOMParser()).parseFromString(xmlStr, 'application/xml');
    // remove the
    doc.removeChild(doc.firstChild);
  } else {
    doc = (new window.DOMParser()).parseFromString(DOMElement.EMPTY_HTML, 'text/html');
  }
  return BrowserDOMElement.wrap(doc)
};

BrowserDOMElement.parseMarkup = function (str, format, options = {}) {
  if (!str) {
    return BrowserDOMElement.createDocument(format)
  }
  if (options.snippet) {
    str = `<div id='__snippet__'>${str}</div>`;
  }
  let doc;
  const parser = new window.DOMParser();
  if (format === 'html') {
    doc = BrowserDOMElement.wrap(
      _check(
        parser.parseFromString(str, 'text/html')
      )
    );
  } else if (format === 'xml') {
    doc = BrowserDOMElement.wrap(
      _check(
        parser.parseFromString(str, 'application/xml')
      )
    );
  }
  if (options.snippet) {
    const childNodes = doc.find('#__snippet__').childNodes;
    if (childNodes.length === 1) {
      return childNodes[0]
    } else {
      return childNodes
    }
  } else {
    return doc
  }

  function _check (doc) {
    if (doc) {
      const parserError = doc.querySelector('parsererror');
      if (parserError) {
        // extracting a more readable message from parserError
        // which is a native DOM element
        throw new Error('ParserError: ' + BrowserDOMElement.wrap(parserError).outerHTML)
      }
    }
    return doc
  }
};

BrowserDOMElement.wrap =
BrowserDOMElement.wrapNativeElement = function (el) {
  if (el) {
    const _el = _unwrap(el);
    if (_el) {
      return _el
    } else if (el instanceof window.Node) {
      return new BrowserDOMElement(el)
    } else if (el._isBrowserDOMElement) {
      return el
    } else if (el === window) {
      return BrowserDOMElement.getBrowserWindow()
    }
  } else {
    return null
  }
};

BrowserDOMElement.unwrap = function (nativeEl) {
  return _unwrap(nativeEl)
};

/*
  Wrapper for the window element exposing DOMElement's EventListener API.
*/
class BrowserWindow {
  constructor () {
    // Note: not
    this.el = window;
    _attach(window, this);
  }

  get _isBrowserDOMElement () { return true }
}

BrowserWindow.prototype.getNativeElement = BrowserDOMElement.prototype.getNativeElement;
BrowserWindow.prototype.on = BrowserDOMElement.prototype.on;
BrowserWindow.prototype.off = BrowserDOMElement.prototype.off;
BrowserWindow.prototype.addEventListener = BrowserDOMElement.prototype.addEventListener;
BrowserWindow.prototype.removeEventListener = BrowserDOMElement.prototype.removeEventListener;
BrowserWindow.prototype._createEventListener = BrowserDOMElement.prototype._createEventListener;
BrowserWindow.prototype._addEventListenerNative = BrowserDOMElement.prototype._addEventListenerNative;
BrowserWindow.prototype._removeEventListenerNative = BrowserDOMElement.prototype._removeEventListenerNative;

BrowserWindow.prototype.getEventListeners = BrowserDOMElement.prototype.getEventListeners;

BrowserDOMElement.getBrowserWindow = function () {
  if (window[SIGNATURE]) return window[SIGNATURE]
  return new BrowserWindow(window)
};

BrowserDOMElement.isReverse = function (anchorNode, anchorOffset, focusNode, focusOffset) {
  // the selection is reversed when the focus propertyEl is before
  // the anchor el or the computed charPos is in reverse order
  if (focusNode && anchorNode) {
    if (!BrowserDOMElement.isReverse._r1) {
      BrowserDOMElement.isReverse._r1 = window.document.createRange();
      BrowserDOMElement.isReverse._r2 = window.document.createRange();
    }
    const _r1 = BrowserDOMElement.isReverse._r1;
    const _r2 = BrowserDOMElement.isReverse._r2;
    _r1.setStart(anchorNode.getNativeElement(), anchorOffset);
    _r2.setStart(focusNode.getNativeElement(), focusOffset);
    const cmp = _r1.compareBoundaryPoints(window.Range.START_TO_START, _r2);
    if (cmp === 1) {
      return true
    }
  }
  return false
};

BrowserDOMElement.getWindowSelection = function () {
  const nativeSel = window.getSelection();
  const result = {
    anchorNode: BrowserDOMElement.wrap(nativeSel.anchorNode),
    anchorOffset: nativeSel.anchorOffset,
    focusNode: BrowserDOMElement.wrap(nativeSel.focusNode),
    focusOffset: nativeSel.focusOffset
  };
  return result
};

function matches (el, selector) {
  const elProto = window.Element.prototype;
  const _matches = (
    elProto.matches || elProto.matchesSelector ||
    elProto.msMatchesSelector || elProto.webkitMatchesSelector
  );
  return _matches.call(el, selector)
}

class AttributesMapAdapter {
  constructor (attributes) {
    this.attributes = attributes;
  }

  get size () {
    return this.attributes.length
  }

  get (name) {
    const item = this.attributes.getNamedItem(name);
    if (item) {
      return item.value
    }
  }

  set (name, value) {
    this.attributes.setNamedItem(name, value);
  }

  forEach (fn) {
    const S = this.size;
    for (let i = 0; i < S; i++) {
      const item = this.attributes.item(i);
      fn(item.value, item.name);
    }
  }

  map (fn) {
    const result = [];
    this.forEach((val, key) => { result.push(fn(val, key)); });
    return result
  }

  keys () {
    return this.map((val, key) => { return key })
  }

  values () {
    return this.map((val) => { return val })
  }

  entries () {
    return this.map((val, key) => { return [key, val] })
  }
}

class BrowserChildNodeIterator {
  constructor (el) {
    this._next = el.firstChild;
    this._curr = null;
  }

  hasNext () {
    return Boolean(this._next)
  }

  next () {
    const next = this._next;
    this._curr = next;
    this._next = next.nextSibling;
    return BrowserDOMElement.wrap(next)
  }

  back () {
    this._next = this._curr;
    this._curr = this._curr.previousSibling;
  }

  peek () {
    return BrowserDOMElement.wrap(this._curr)
  }
}

function last (arr) {
  return arr[arr.length - 1]
}

var inBrowser = platform.inBrowser;

//Types of elements found in the DOM
var domelementtype = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>
	Doctype: "doctype",

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};

/*
  ATTENTION:

  We found out that using the encoder from `entities` module
  is doing too much

  Instead we do a simpler version now, encoding just a small
  set:
  - in attributes we only need to escape '"'
  - in textContent we need to escape '<' and '&'

  Note: this is copy and pasted from the bundled entities vendor file.
*/

const _encodeXMLContent = ((obj) => {
  const invObj = getInverseObj(obj);
  const replacer = getInverseReplacer(invObj);
  return getInverse(invObj, replacer)
})({
  amp: '&',
  gt: '>',
  lt: '<'
});

const _encodeXMLAttr = ((obj) => {
  const invObj = getInverseObj(obj);
  const replacer = getInverseReplacer(invObj);
  return getInverse(invObj, replacer)
})({
  quot: '"'
});

function getInverseObj (obj) {
  return Object.keys(obj).sort().reduce(function (inverse, name) {
    inverse[obj[name]] = '&' + name + ';';
    return inverse
  }, {})
}

function getInverseReplacer (inverse) {
  const single = [];
  const multiple = [];

  Object.keys(inverse).forEach(function (k) {
    if (k.length === 1) {
      single.push('\\' + k);
    } else {
      multiple.push(k);
    }
  });

  multiple.unshift('[' + single.join('') + ']');

  return new RegExp(multiple.join('|'), 'g')
}

const RE_NON_ASCII = /[^\0-\x7F]/g;
const RE_ASTRAL_SYMBOLS = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer (c) {
  return '&#x' + c.charCodeAt(0).toString(16).toUpperCase() + ';'
}

function astralReplacer (c) {
  var high = c.charCodeAt(0);
  var low = c.charCodeAt(1);
  var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
  return '&#x' + codePoint.toString(16).toUpperCase() + ';'
}

function getInverse (inverse, re) {
  function func (name) {
    return inverse[name]
  }
  return function (data) {
    return data
      .replace(re, func)
      .replace(RE_ASTRAL_SYMBOLS, astralReplacer)
      .replace(RE_NON_ASCII, singleCharReplacer)
  }
}

const booleanAttributes = {
  __proto__: null,
  allowfullscreen: true,
  async: true,
  autofocus: true,
  autoplay: true,
  checked: true,
  controls: true,
  default: true,
  defer: true,
  disabled: true,
  hidden: true,
  ismap: true,
  loop: true,
  multiple: true,
  muted: true,
  open: true,
  readonly: true,
  required: true,
  reversed: true,
  scoped: true,
  seamless: true,
  selected: true,
  typemustmatch: true
};

const unencodedElements = {
  __proto__: null,
  style: true,
  script: true,
  xmp: true,
  iframe: true,
  noembed: true,
  noframes: true,
  plaintext: true,
  noscript: true
};

const singleTag = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};

class DomUtils {
  isTag (elem) {
    return domelementtype.isTag(elem)
  }

  removeElement (elem) {
    if (elem.prev) elem.prev.next = elem.next;
    if (elem.next) elem.next.prev = elem.prev;
    if (elem.parent) {
      var childs = elem.parent.childNodes;
      const pos = childs.lastIndexOf(elem);
      if (pos < 0) throw new Error('Invalid state')
      childs.splice(pos, 1);
      elem.parent = null;
    }
  }

  replaceElement (elem, replacement) {
    if (replacement.parent) this.removeElement(replacement);
    var prev = replacement.prev = elem.prev;
    if (prev) {
      prev.next = replacement;
    }

    var next = replacement.next = elem.next;
    if (next) {
      next.prev = replacement;
    }

    var parent = replacement.parent = elem.parent;
    if (parent) {
      var childs = parent.childNodes;
      const pos = childs.lastIndexOf(elem);
      if (pos < 0) throw new Error('Invalid state')
      childs[pos] = replacement;
    }
  }

  appendChild (elem, child) {
    if (child.parent) this.removeElement(child);
    child.parent = elem;

    if (elem.childNodes.push(child) !== 1) {
      var sibling = elem.childNodes[elem.childNodes.length - 2];
      sibling.next = child;
      child.prev = sibling;
      child.next = null;
    }
  }

  append (elem, next) {
    if (next.parent) this.removeElement(next);
    const parent = elem.parent;
    const currNext = elem.next;

    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;

    if (currNext) {
      currNext.prev = next;
      if (parent) {
        var childs = parent.childNodes;
        const pos = childs.lastIndexOf(currNext);
        if (pos < 0) throw new Error('Invalid state')
        childs.splice(pos, 0, next);
      }
    } else if (parent) {
      parent.childNodes.push(next);
    }
  }

  prepend (elem, prev) {
    if (prev.parent) this.removeElement(prev);
    var parent = elem.parent;
    if (parent) {
      var childs = parent.childNodes;
      const pos = childs.lastIndexOf(elem);
      if (pos < 0) throw new Error('Invalid state')
      childs.splice(pos, 0, prev);
    }

    if (elem.prev) {
      elem.prev.next = prev;
    }

    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
  }

  filter (test, element, recurse, limit) {
    if (!Array.isArray(element)) element = [element];

    if (typeof limit !== 'number' || !isFinite(limit)) {
      limit = Infinity;
    }
    return this.find(test, element, recurse !== false, limit)
  }

  find (test, elems, recurse, limit) {
    let result = [];
    let childs;

    for (var i = 0, j = elems.length; i < j; i++) {
      if (test(elems[i])) {
        result.push(elems[i]);
        if (--limit <= 0) break
      }

      childs = this.getChildren(elems[i]);
      if (recurse && childs && childs.length > 0) {
        childs = this.find(test, childs, recurse, limit);
        result = result.concat(childs);
        limit -= childs.length;
        if (limit <= 0) break
      }
    }

    return result
  }

  findOneChild (test, elems) {
    for (var i = 0, l = elems.length; i < l; i++) {
      if (test(elems[i])) return elems[i]
    }

    return null
  }

  findOne (test, elems) {
    var elem = null;

    for (var i = 0, l = elems.length; i < l && !elem; i++) {
      const child = elems[i];
      if (!this.isTag(child)) {
        continue
      } else if (test(child)) {
        elem = child;
      } else {
        const childNodes = this.getChildren(child);
        if (childNodes.length > 0) {
          elem = this.findOne(test, childNodes);
        }
      }
    }

    return elem
  }

  existsOne (test, elems) {
    for (var i = 0, l = elems.length; i < l; i++) {
      const elem = elems[i];
      // test only elements
      if (!this.isTag(elem)) continue
      // found if the element itself matches
      if (test(elem)) return true
      // otherwise, if one of its children matches
      const childNodes = this.getChildren(elem);
      if (childNodes.length > 0 && this.existsOne(test, childNodes)) return true
    }
    return false
  }

  findAll (test, elems) {
    var result = [];
    for (var i = 0, j = elems.length; i < j; i++) {
      const elem = elems[i];
      if (!this.isTag(elem)) continue
      if (test(elem)) result.push(elem);
      const childNodes = this.getChildren(elem);
      if (childNodes.length > 0) {
        result = result.concat(this.findAll(test, childNodes));
      }
    }
    return result
  }

  getAttributes (el) {
    const attribs = el.getAttributes();
    // HACK: this is a bit confusing, because MemoryDOMElement and BrowserDOMElement are
    // not 100% compatible yet regarding getAttributes()
    if (attribs instanceof Map) {
      return Array.from(attribs)
    } else if (attribs && attribs.forEach) {
      const res = [];
      attribs.forEach((val, key) => {
        res.push([key, val]);
      });
      return res
    } else {
      return []
    }
  }

  formatAttribs (el, opts = {}) {
    const output = [];
    const attributes = this.getAttributes(el);
    attributes.forEach(([key, value]) => {
      if (opts.disallowHandlers && /^\s*on/.exec(key)) return
      if (opts.disallowHandlers && /^javascript[:]/.exec(value)) return
      if (opts.disallowedAttributes && opts.disallowedAttributes.has(key)) return
      if (!value && booleanAttributes[key]) {
        output.push(key);
      } else {
        output.push(key + '="' + (opts.decodeEntities ? _encodeXMLAttr(value) : value) + '"');
      }
    });
    return output.join(' ')
  }

  render (dom, opts) {
    if (!Array.isArray(dom)) dom = [dom];
    opts = opts || {};
    const output = [];
    for (var i = 0; i < dom.length; i++) {
      const elem = dom[i];
      switch (elem.type) {
        case 'root':
        case 'document': {
          if (elem._xmlInstruction) {
            output.push(this.render(elem._xmlInstruction, opts));
          }
          output.push(this.render(this.getChildren(elem), opts));
          break
        }
        case domelementtype.Tag:
        case domelementtype.Script:
        case domelementtype.Style: {
          output.push(this.renderTag(elem, opts));
          break
        }
        case domelementtype.CDATA: {
          if (!opts.stripCDATA) {
            output.push(this.renderCdata(elem));
          }
          break
        }
        case domelementtype.Comment: {
          if (!opts.stripComments) {
            output.push(this.renderComment(elem));
          }
          break
        }
        case domelementtype.Directive: {
          output.push(this.renderDirective(elem));
          break
        }
        case domelementtype.Doctype: {
          output.push(this.renderDoctype(elem));
          break
        }
        case domelementtype.Text: {
          output.push(this.renderText(elem, opts));
          break
        }
        default:
          throw new Error('Not implement yet: render of element type ' + elem.type)
      }
    }
    return output.join('')
  }

  renderTag (elem, opts) {
    const name = this.getName(elem);
    if (opts.allowedTags) {
      if (!opts.allowedTags.has(this.getNameWithoutNS(elem))) return
    }
    if (opts.disallowedTags) {
      if (opts.disallowedTags.has(this.getNameWithoutNS(elem))) return
    }
    if (name === 'svg') opts = Object.assign({}, opts, { decodeEntities: opts.decodeEntities, xmlMode: true });
    let tag = '<' + name;
    const attribs = this.formatAttribs(elem, opts);
    if (attribs) {
      tag += ' ' + attribs;
    }
    const childNodes = this.getChildren(elem);
    if (opts.xmlMode && childNodes.length === 0) {
      tag += '/>';
    } else {
      tag += '>';
      if (childNodes.length > 0) {
        tag += this.render(childNodes, opts);
      }
      if (!singleTag[name] || opts.xmlMode) {
        tag += '</' + name + '>';
      }
    }
    return tag
  }

  renderDirective (elem) {
    return '<?' + this.getName(elem) + ' ' + this.getData(elem) + '?>'
  }

  renderDoctype (elem) {
    const { name, publicId, systemId } = this.getData(elem);
    const frags = ['DOCTYPE', name];
    if (publicId) {
      frags.push('PUBLIC');
      frags.push('"' + publicId + '"');
      if (systemId) frags.push('"' + systemId + '"');
    }
    return '<!' + frags.join(' ') + '>'
  }

  renderText (elem, opts) {
    let text = this.getText(elem);
    if (opts.decodeEntities) {
      const parent = this.getParent(elem);
      if (!(parent && this.getName(parent) in unencodedElements)) {
        text = _encodeXMLContent(text);
      }
    }
    return text
  }

  renderCdata (elem) {
    return '<![CDATA[' + this.getData(elem) + ']]>'
  }

  renderComment (elem) {
    return '<!--' + this.getData(elem) + '-->'
  }

  getInnerHTML (elem, opts) {
    const childNodes = this.getChildren(elem);
    return childNodes.map((child) => {
      return this.render(child, opts)
    }).join('')
  }

  getOuterHTML (elem, opts) {
    return this.render(elem, opts)
  }

  getData (elem) {
    return elem.data
  }

  getText (elem, sub) {
    if (Array.isArray(elem)) return elem.map(e => this.getText(e, sub)).join('')
    switch (elem.type) {
      case domelementtype.Tag:
      case domelementtype.Script:
      case domelementtype.Style:
        return this.getText(this.getChildren(elem), true)
      case domelementtype.Text:
      case domelementtype.CDATA:
        return elem.data
      case domelementtype.Comment:
        // comments are not rendered
        // into the textContent of parentNodes
        if (sub) {
          return ''
        }
        return elem.data
      default:
        return ''
    }
  }

  getChildren (elem) {
    return elem.childNodes
  }

  getParent (elem) {
    return elem.parent
  }

  getSiblings (elem) {
    var parent = this.getParent(elem);
    return parent ? this.getChildren(parent) : [elem]
  }

  getAttributeValue (elem, name) {
    return elem.getAttribute(name)
  }

  hasAttrib (elem, name) {
    return elem.hasAttribute(name)
  }

  getName (elem) {
    return elem.name
  }

  getNameWithoutNS (elem) {
    return elem.nameWithoutNS
  }
}

const domutils = new DomUtils();
domutils.DomUtils = DomUtils;

var boolbase = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};

var cssWhat = parse;

var re_name = /^(?:\\.|[\w\-\u00c0-\uFFFF])+/,
    re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/ig,
    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
    re_attr = /^\s*((?:\\.|[\w\u00c0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])(.*?)\3|(#?(?:\\.|[\w\u00c0-\uFFFF\-])*)|)|)\s*(i)?\]/;

var actionTypes = {
	__proto__: null,
	"undefined": "exists",
	"":  "equals",
	"~": "element",
	"^": "start",
	"$": "end",
	"*": "any",
	"!": "not",
	"|": "hyphen"
};

var simpleSelectors = {
	__proto__: null,
	">": "child",
	"<": "parent",
	"~": "sibling",
	"+": "adjacent"
};

var attribSelectors = {
	__proto__: null,
	"#": ["id", "equals"],
	".": ["class", "element"]
};

//pseudos, whose data-property is parsed as well
var unpackPseudos = {
	__proto__: null,
	"has": true,
	"not": true,
	"matches": true
};

var stripQuotesFromPseudos = {
	__proto__: null,
	"contains": true,
	"icontains": true
};

var quotes = {
	__proto__: null,
	"\"": true,
	"'": true
};

//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139
function funescape( _, escaped, escapedWhitespace ) {
	var high = "0x" + escaped - 0x10000;
	// NaN means non-codepoint
	// Support: Firefox
	// Workaround erroneous numeric interpretation of +"0x"
	return high !== high || escapedWhitespace ?
		escaped :
		// BMP codepoint
		high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
}

function unescapeCSS(str){
	return str.replace(re_escape, funescape);
}

function isWhitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function parse(selector, options){
	var subselects = [];

	selector = parseSelector(subselects, selector + "", options);

	if(selector !== ""){
		throw new SyntaxError("Unmatched selector: " + selector);
	}

	return subselects;
}

function parseSelector(subselects, selector, options){
	var tokens = [],
		sawWS = false,
		data, firstChar, name, quot;

	function getName(){
		var sub = selector.match(re_name)[0];
		selector = selector.substr(sub.length);
		return unescapeCSS(sub);
	}

	function stripWhitespace(start){
		while(isWhitespace(selector.charAt(start))) start++;
		selector = selector.substr(start);
	}

	stripWhitespace(0);

	while(selector !== ""){
		firstChar = selector.charAt(0);

		if(isWhitespace(firstChar)){
			sawWS = true;
			stripWhitespace(1);
		} else if(firstChar in simpleSelectors){
			tokens.push({type: simpleSelectors[firstChar]});
			sawWS = false;

			stripWhitespace(1);
		} else if(firstChar === ","){
			if(tokens.length === 0){
				throw new SyntaxError("empty sub-selector");
			}
			subselects.push(tokens);
			tokens = [];
			sawWS = false;
			stripWhitespace(1);
		} else {
			if(sawWS){
				if(tokens.length > 0){
					tokens.push({type: "descendant"});
				}
				sawWS = false;
			}

			if(firstChar === "*"){
				selector = selector.substr(1);
				tokens.push({type: "universal"});
			} else if(firstChar in attribSelectors){
				selector = selector.substr(1);
				tokens.push({
					type: "attribute",
					name: attribSelectors[firstChar][0],
					action: attribSelectors[firstChar][1],
					value: getName(),
					ignoreCase: false
				});
			} else if(firstChar === "["){
				selector = selector.substr(1);
				data = selector.match(re_attr);
				if(!data){
					throw new SyntaxError("Malformed attribute selector: " + selector);
				}
				selector = selector.substr(data[0].length);
				name = unescapeCSS(data[1]);

				if(
					!options || (
						"lowerCaseAttributeNames" in options ?
							options.lowerCaseAttributeNames :
							!options.xmlMode
					)
				){
					name = name.toLowerCase();
				}

				tokens.push({
					type: "attribute",
					name: name,
					action: actionTypes[data[2]],
					value: unescapeCSS(data[4] || data[5] || ""),
					ignoreCase: !!data[6]
				});

			} else if(firstChar === ":"){
				if(selector.charAt(1) === ":"){
					selector = selector.substr(2);
					tokens.push({type: "pseudo-element", name: getName().toLowerCase()});
					continue;
				}

				selector = selector.substr(1);

				name = getName().toLowerCase();
				data = null;

				if(selector.charAt(0) === "("){
					if(name in unpackPseudos){
						quot = selector.charAt(1);
						var quoted = quot in quotes;

						selector = selector.substr(quoted + 1);

						data = [];
						selector = parseSelector(data, selector, options);

						if(quoted){
							if(selector.charAt(0) !== quot){
								throw new SyntaxError("unmatched quotes in :" + name);
							} else {
								selector = selector.substr(1);
							}
						}

						if(selector.charAt(0) !== ")"){
							throw new SyntaxError("missing closing parenthesis in :" + name + " " + selector);
						}

						selector = selector.substr(1);
					} else {
						var pos = 1, counter = 1;

						for(; counter > 0 && pos < selector.length; pos++){
							if(selector.charAt(pos) === "(") counter++;
							else if(selector.charAt(pos) === ")") counter--;
						}

						if(counter){
							throw new SyntaxError("parenthesis not matched");
						}

						data = selector.substr(1, pos - 2);
						selector = selector.substr(pos);

						if(name in stripQuotesFromPseudos){
							quot = data.charAt(0);

							if(quot === data.slice(-1) && quot in quotes){
								data = data.slice(1, -1);
							}

							data = unescapeCSS(data);
						}
					}
				}

				tokens.push({type: "pseudo", name: name, data: data});
			} else if(re_name.test(selector)){
				name = getName();

				if(!options || ("lowerCaseTags" in options ? options.lowerCaseTags : !options.xmlMode)){
					name = name.toLowerCase();
				}

				tokens.push({type: "tag", name: name});
			} else {
				if(tokens.length && tokens[tokens.length - 1].type === "descendant"){
					tokens.pop();
				}
				addToken(subselects, tokens);
				return selector;
			}
		}
	}

	addToken(subselects, tokens);

	return selector;
}

function addToken(subselects, tokens){
	if(subselects.length > 0 && tokens.length === 0){
		throw new SyntaxError("empty sub-selector");
	}

	subselects.push(tokens);
}

var parse_1 = parse$1;

//following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo

//[ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
var re_nthElement = /^([+\-]?\d*n)?\s*(?:([+\-]?)\s*(\d+))?$/;

/*
	parses a nth-check formula, returns an array of two numbers
*/
function parse$1(formula){
	formula = formula.trim().toLowerCase();

	if(formula === "even"){
		return [2, 0];
	} else if(formula === "odd"){
		return [2, 1];
	} else {
		var parsed = formula.match(re_nthElement);

		if(!parsed){
			throw new SyntaxError("n-th rule couldn't be parsed ('" + formula + "')");
		}

		var a;

		if(parsed[1]){
			a = parseInt(parsed[1], 10);
			if(isNaN(a)){
				if(parsed[1].charAt(0) === "-") a = -1;
				else a = 1;
			}
		} else a = 0;

		return [
			a,
			parsed[3] ? parseInt((parsed[2] || "") + parsed[3], 10) : 0
		];
	}
}

var boolbase$1 = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};

var compile_1 = compile;

var trueFunc  = boolbase$1.trueFunc,
    falseFunc = boolbase$1.falseFunc;

/*
	returns a function that checks if an elements index matches the given rule
	highly optimized to return the fastest solution
*/
function compile(parsed){
	var a = parsed[0],
	    b = parsed[1] - 1;

	//when b <= 0, a*n won't be possible for any matches when a < 0
	//besides, the specification says that no element is matched when a and b are 0
	if(b < 0 && a <= 0) return falseFunc;

	//when a is in the range -1..1, it matches any element (so only b is checked)
	if(a ===-1) return function(pos){ return pos <= b; };
	if(a === 0) return function(pos){ return pos === b; };
	//when b <= 0 and a === 1, they match any element
	if(a === 1) return b < 0 ? trueFunc : function(pos){ return pos >= b; };

	//when a > 0, modulo can be used to check if there is a match
	var bMod = b % a;
	if(bMod < 0) bMod += a;

	if(a > 1){
		return function(pos){
			return pos >= b && pos % a === bMod;
		};
	}

	a *= -1; //make `a` positive

	return function(pos){
		return pos <= b && pos % a === bMod;
	};
}

var nthCheck = function nthCheck(formula){
	return compile_1(parse_1(formula));
};

var parse_1$1 = parse_1;
var compile_1$1 = compile_1;
nthCheck.parse = parse_1$1;
nthCheck.compile = compile_1$1;

var procedure = new Map([
  ["universal", 50],
  ["tag", 30],
  ["attribute", 1],
  ["pseudo", 0],
  ["descendant", -1],
  ["child", -1],
  ["parent", -1],
  ["sibling", -1],
  ["adjacent", -1]
]);

var sort = sortByProcedure;

/*
	sort the parts of the passed selector,
	as there is potential for optimization
	(some types of selectors are faster than others)
*/



let attributes = new Map([
	['exists', 10],
	['equals', 8],
	['not', 7],
	['start', 6],
	['end', 6],
	['any', 5],
	['hyphen', 4],
	['element', 4]
]);

function sortByProcedure(arr){
	var procs = arr.map(getProcedure);
	for(var i = 1; i < arr.length; i++){
		var procNew = procs[i];

		if(procNew < 0) continue;

		for(var j = i - 1; j >= 0 && procNew < procs[j]; j--){
			var token = arr[j + 1];
			arr[j + 1] = arr[j];
			arr[j] = token;
			procs[j + 1] = procs[j];
			procs[j] = procNew;
		}
	}
}

function getProcedure(token){
	var proc = procedure.get(token.type);

	if(proc === procedure.get('attribute')){
		proc = attributes.get(token.action);

		if(proc === attributes.get('equals') && token.name === "id"){
			//prefer ID selectors (eg. #ID)
			proc = 9;
		}

		if(token.ignoreCase){
			//ignoreCase adds some overhead, prefer "normal" token
			//this is a binary operation, to ensure it's still an int
			proc >>= 1;
		}
	} else if(proc === procedure.get('pseudo')){
		if(!token.data){
			proc = 3;
		} else if(token.name === "has" || token.name === "contains"){
			proc = 0; //expensive in any case
		} else if(token.name === "matches" || token.name === "not"){
			proc = 0;
			for(var i = 0; i < token.data.length; i++){
				//TODO better handling of complex selectors
				if(token.data[i].length !== 1) continue;
				var cur = getProcedure(token.data[i][0]);
				//avoid executing :has or :contains
				if(cur === 0){
					proc = 0;
					break;
				}
				if(cur > proc) proc = cur;
			}
			if(token.data.length > 1 && proc > 0) proc -= 1;
		} else {
			proc = 1;
		}
	}
	return proc;
}

var falseFunc$1 = boolbase.falseFunc;

//https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js#L469
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;

function factory(adapter){

	function _equals(next, data){
		var name  = data.name,
			value = data.value;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function equalsIC(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() === value && next(elem);
			};
		}

		return function equals(elem){
			return adapter.getAttributeValue(elem, name) === value && next(elem);
		};
	}

	function _hyphen(next, data){
		var name  = data.name,
			value = data.value,
			len = value.length;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function hyphenIC(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null &&
						(attr.length === len || attr.charAt(len) === "-") &&
						attr.substr(0, len).toLowerCase() === value &&
						next(elem);
			};
		}

		return function (elem){
			var attr = adapter.getAttributeValue(elem, name);
			return attr != null &&
					attr.substr(0, len) === value &&
					(attr.length === len || attr.charAt(len) === "-") &&
					next(elem);
		};
	}

	function _element(next, data){
		var name = data.name,
			value = data.value;
		if (data.name === 'class') {
			let value = data.value;
			if (/\s/.test(value)) return function() { return false }
			return function(elem) {
				let classes = elem.classes;
				return classes && classes.has(value) && next(elem)
			}
		} else {
			if(/\s/.test(value)){
				return falseFunc$1;
			}

			value = value.replace(reChars, "\\$&");

			var pattern = "(?:^|\\s)" + value + "(?:$|\\s)",
				flags = data.ignoreCase ? "i" : "",
				regex = new RegExp(pattern, flags);

			return function(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && regex.test(attr) && next(elem);
			}
		}
	}

	function _exists(next, data){
		var name = data.name;
		return function(elem){
			return adapter.hasAttrib(elem, name) && next(elem);
		};
	}

	function _start(next, data){
		var name  = data.name,
			value = data.value,
			len = value.length;

		if(len === 0){
			return falseFunc$1;
		}

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function (elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);
			};
		}

		return function (elem){
			var attr = adapter.getAttributeValue(elem, name);
			return attr != null && attr.substr(0, len) === value && next(elem);
		}
	}

	function _end(next, data){
		var name  = data.name,
			value = data.value,
			len   = -value.length;

		if(len === 0){
			return falseFunc$1;
		}

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function endIC(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && attr.substr(len).toLowerCase() === value && next(elem);
			};
		}

		return function (elem){
			var attr = adapter.getAttributeValue(elem, name);
			return attr != null && attr.substr(len) === value && next(elem);
		};
	}

	function _any(next, data){
		var name  = data.name,
			value = data.value;

		if(value === ""){
			return falseFunc$1;
		}

		if(data.ignoreCase){
			var regex = new RegExp(value.replace(reChars, "\\$&"), "i");

			return function (elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && regex.test(attr) && next(elem);
			};
		}

		return function (elem){
			var attr = adapter.getAttributeValue(elem, name);
			return attr != null && attr.indexOf(value) >= 0 && next(elem);
		};
	}

	function _not(next, data){
		var name  = data.name,
			value = data.value;

		if(value === ""){
			return function notEmpty(elem){
				return !!adapter.getAttributeValue(elem, name) && next(elem);
			};
		} else if(data.ignoreCase){
			value = value.toLowerCase();

			return function notIC(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() !== value && next(elem);
			};
		}

		return function not(elem){
			return adapter.getAttributeValue(elem, name) !== value && next(elem);
		};
	}

	let attributeRules = new Map([
		['equals', _equals],
		['hyphen', _hyphen],
		['element', _element],
		['exists', _exists],
		['start', _start],
		['end', _end],
		['any', _any],
		['not', _not]
	]);

	return {
		compile: function(next, data, options){
			if(options && options.strict && (
				data.ignoreCase || data.action === "not"
			)) throw new Error("Unsupported attribute selector");
			return attributeRules.get(data.action)(next, data);
		},
		rules: attributeRules
	};
}

var attributes$1 = factory;

function generalFactory(adapter, Pseudos){

	//tags
	function _tag(next, data){
		var name = data.name;
		return function tag(elem){
			return adapter.getNameWithoutNS(elem) === name && next(elem);
		}
	}

	//traversal
	function _descendant(next){
		return function descendant(elem){
			var found = false;
			while(!found && (elem = adapter.getParent(elem))){
				found = next(elem);
			}
			return found;
		};
	}

	function __flexibleDescendant(next){
		// Include element itself, only used while querying an array
		return function descendant(elem){
			var found = next(elem);
			while(!found && (elem = adapter.getParent(elem))){
				found = next(elem);
			}
			return found;
		};
	}

	function _parent(next, data, options){
		if(options && options.strict) throw new Error("Parent selector isn't part of CSS3");

		return function parent(elem){
			return adapter.getChildren(elem).some(test);
		};

		function test(elem){
			return adapter.isTag(elem) && next(elem);
		}
	}

	function _child(next){
		return function child(elem){
			var parent = adapter.getParent(elem);
			return !!parent && next(parent);
		};
	}

	function _sibling(next){
		return function sibling(elem){
			var siblings = adapter.getSiblings(elem);

			for(var i = 0; i < siblings.length; i++){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(next(siblings[i])) return true;
				}
			}

			return false;
		};
	}

	function _adjacent(next){
		return function adjacent(elem){
			var siblings = adapter.getSiblings(elem),
				lastElement;

			for(var i = 0; i < siblings.length; i++){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) break;
					lastElement = siblings[i];
				}
			}

			return !!lastElement && next(lastElement);
		};
	}

	function _universal(next){
		return next;
	}

	const generalRules = new Map([
		['attribute', attributes$1(adapter).compile],
		['pseudo', Pseudos.compile],
		['tag', _tag],
		['descendant', _descendant],
		['_flexibleDescendant', __flexibleDescendant],
		['parent', _parent],
		['child', _child],
		['sibling', _sibling],
		['adjacent', _adjacent],
		['universal', _universal],
	]);

	return generalRules
}

var general = generalFactory;

/*
	pseudo selectors

	---

	they are available in two forms:
	* filters called when the selector
	  is compiled and return a function
	  that needs to return next()
	* pseudos get called on execution
	  they need to return a boolean
*/

var trueFunc$1          = boolbase.trueFunc,
	falseFunc$1$1         = boolbase.falseFunc;

function filtersFactory(adapter){
	var attributes  = attributes$1(adapter),
		checkAttrib = attributes.rules.get('equals');

	//helper methods
	function equals(a, b){
		if(typeof adapter.equals === "function") return adapter.equals(a, b);

		return a === b;
	}

	function getAttribFunc(name, value){
		var data = {name: name, value: value};
		return function attribFunc(next){
			return checkAttrib(next, data);
		};
	}

	function getChildFunc(next){
		return function(elem){
			return !!adapter.getParent(elem) && next(elem);
		};
	}

	function _contains (next, text){
		return function (elem){
			return next(elem) && adapter.getText(elem).indexOf(text) >= 0;
		}
	}

	function _icontains (next, text){
		var itext = text.toLowerCase();
		return function (elem){
			return next(elem) &&
				adapter.getText(elem).toLowerCase().indexOf(itext) >= 0;
		}
	}

	function _nthChild (next, rule){
		var func = nthCheck(rule);
		if(func === falseFunc$1$1) return func;
		if(func === trueFunc$1)  return getChildFunc(next);
		return function (elem) {
			var siblings = adapter.getSiblings(elem);
			for(var i = 0, pos = 0; i < siblings.length; i++){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}
			return func(pos) && next(elem);
		}
	}

	function _nthLastChild (next, rule){
		var func = nthCheck(rule);
		if(func === falseFunc$1$1) return func;
		if(func === trueFunc$1)  return getChildFunc(next);

		return function (elem){
			var siblings = adapter.getSiblings(elem);
			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}
			return func(pos) && next(elem);
		}
	}

	function _nthOfType (next, rule){
		var func = nthCheck(rule);

		if(func === falseFunc$1$1) return func;
		if(func === trueFunc$1)  return getChildFunc(next);

		return function (elem) {
			var siblings = adapter.getSiblings(elem);

			for(var pos = 0, i = 0; i < siblings.length; i++){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(adapter.getName(siblings[i]) === adapter.getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		}
	}

	function _nthLastOfType (next, rule){
		var func = nthCheck(rule);

		if(func === falseFunc$1$1) return func;
		if(func === trueFunc$1)  return getChildFunc(next);

		return function nthLastOfType(elem){
			var siblings = adapter.getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(adapter.getName(siblings[i]) === adapter.getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		}
	}

	function _root (next){
		return function (elem){
			return !adapter.getParent(elem) && next(elem);
		}
	}

	function _scope (next, rule, options, context){
		if(!context || context.length === 0){
			//equivalent to :root
			return filters.get('root')(next);
		}
		if(context.length === 1){
			//NOTE: can't be unpacked, as :has uses this for side-effects
			return function (elem){
				return equals(context[0], elem) && next(elem);
			}
		}
		return function (elem){
			return context.indexOf(elem) >= 0 && next(elem);
		};
	}

	const filters = new Map([
		['contains', _contains],
		['icontains', _icontains],
		['nth-child', _nthChild],
		['nth-last-child', _nthLastChild],
		['nth-of-type', _nthOfType],
		['nth-last-of-type', _nthLastOfType],
		['root', _root],
		['scope', _scope],
		['checkbox', getAttribFunc("type", "checkbox")],
		['file', getAttribFunc("type", "file")],
		['password', getAttribFunc("type", "password")],
		['radio', getAttribFunc("type", "radio")],
		['reset', getAttribFunc("type", "reset")],
		['image', getAttribFunc("type", "image")],
		['submit', getAttribFunc("type", "submit")]
	]);

	return filters
}

function pseudosFactory(adapter){
	//helper methods
	function getFirstElement(elems){
		for(var i = 0; elems && i < elems.length; i++){
			if(adapter.isTag(elems[i])) return elems[i];
		}
	}

	function _empty(elem){
		return !adapter.getChildren(elem).some(function(elem){
			return adapter.isTag(elem) || elem.type === "text";
		})
	}

	function _firstChild(elem){
		return getFirstElement(adapter.getSiblings(elem)) === elem;
	}

	function _lastChild(elem){
		var siblings = adapter.getSiblings(elem);

		for(var i = siblings.length - 1; i >= 0; i--){
			if(siblings[i] === elem) return true;
			if(adapter.isTag(siblings[i])) break;
		}

		return false;
	}

	function _firstOfType (elem){
		var siblings = adapter.getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(adapter.isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(adapter.getName(siblings[i]) === adapter.getName(elem)) break;
			}
		}

		return false;
	}

	function _lastOfType (elem){
		var siblings = adapter.getSiblings(elem);

		for(var i = siblings.length - 1; i >= 0; i--){
			if(adapter.isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(adapter.getName(siblings[i]) === adapter.getName(elem)) break;
			}
		}

		return false;
	}

	function _onlyOfType (elem){
		var siblings = adapter.getSiblings(elem);

		for(var i = 0, j = siblings.length; i < j; i++){
			if(adapter.isTag(siblings[i])){
				if(siblings[i] === elem) continue;
				if(adapter.getName(siblings[i]) === adapter.getName(elem)) return false;
			}
		}

		return true;
	}

	function _onlyChild (elem){
		var siblings = adapter.getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(adapter.isTag(siblings[i]) && siblings[i] !== elem) return false;
		}

		return true;
	}

	//:matches(a, area, link)[href]
	function _link (elem){
		return adapter.hasAttrib(elem, "href");
	}

	//:matches([selected], select:not([multiple]):not(> option[selected]) > option:first-of-type)
	function _selected (elem){
		if(adapter.hasAttrib(elem, "selected")) return true;
		else if(adapter.getName(elem) !== "option") return false;

		//the first <option> in a <select> is also selected
		var parent = adapter.getParent(elem);

		if(
			!parent ||
			adapter.getName(parent) !== "select" ||
			adapter.hasAttrib(parent, "multiple")
		) return false;

		var siblings = adapter.getChildren(parent),
			sawElem  = false;

		for(var i = 0; i < siblings.length; i++){
			if(adapter.isTag(siblings[i])){
				if(siblings[i] === elem){
					sawElem = true;
				} else if(!sawElem){
					return false;
				} else if(adapter.hasAttrib(siblings[i], "selected")){
					return false;
				}
			}
		}

		return sawElem;
	}

	//https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
	//:matches(
	//  :matches(button, input, select, textarea, menuitem, optgroup, option)[disabled],
	//  optgroup[disabled] > option),
	// fieldset[disabled] * //TODO not child of first <legend>
	//)
	function _disabled (elem){
		return adapter.hasAttrib(elem, "disabled");
	}

	function _enabled(elem){
		return !adapter.hasAttrib(elem, "disabled");
	}

	//:matches(input, select, textarea)[required]
	function _required(elem){
		return adapter.hasAttrib(elem, "required");
	}

	//:matches(input, select, textarea):not([required])
	function _optional(elem){
		return !adapter.hasAttrib(elem, "required");
	}

	//:not(:empty)
	function _parent (elem){
		return !pseudos.get('empty')(elem);
	}

	//:matches(h1, h2, h3, h4, h5, h6)
	function _header (elem){
		var name = adapter.getName(elem);
		return name === "h1" ||
				name === "h2" ||
				name === "h3" ||
				name === "h4" ||
				name === "h5" ||
				name === "h6";
	}

	//:matches(button, input[type=button])
	function _button(elem){
		var name = adapter.getName(elem);
		return name === "button" ||
				name === "input" &&
				adapter.getAttributeValue(elem, "type") === "button";
	}

	//:matches(input, textarea, select, button)
	function _input(elem){
		var name = adapter.getName(elem);
		return name === "input" ||
				name === "textarea" ||
				name === "select" ||
				name === "button";
	}

	//input:matches(:not([type!='']), [type='text' i])
	function _text(elem){
		var attr;
		return adapter.getName(elem) === "input" && (
			!(attr = adapter.getAttributeValue(elem, "type")) ||
			attr.toLowerCase() === "text"
		);
	}


	const pseudos = new Map([
		['empty', _empty],
		['first-child', _firstChild],
		['last-child', _lastChild],
		['first-of-type', _firstOfType],
		['last-of-type', _lastOfType],
		['only-of-type', _onlyOfType],
		['only-child', _onlyChild],
		['link', _link],
		['visited', falseFunc$1$1],
		['selected', _selected],
		['disabled', _disabled],
		['enabled', _enabled],
		['required', _required],
		['optional', _optional],
		['parent', _parent],
		['header', _header],
		['button', _button],
		['input', _input],
		['text', _text]
	]);

	return pseudos;
}

function verifyArgs(func, name, subselect){
	if(subselect === null){
		if(func.length > 1 && name !== "scope"){
			throw new Error("pseudo-selector :" + name + " requires an argument");
		}
	} else {
		if(func.length === 1){
			throw new Error("pseudo-selector :" + name + " doesn't have any arguments");
		}
	}
}

//FIXME this feels hacky
var re_CSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;

function factory$1(adapter){
	var pseudos = pseudosFactory(adapter);
	var filters = filtersFactory(adapter);

	return {
		compile: function(next, data, options, context){
			var name = data.name,
				subselect = data.data;

			if(options && options.strict && !re_CSS3.test(name)){
				throw new Error(":" + name + " isn't part of CSS3");
			}

			let filter = filters.get(name);
			let pseudo = pseudos.get(name);
			if(typeof filter === "function"){
				verifyArgs(filter, name,  subselect);
				return filter(next, subselect, options, context);
			} else if(typeof pseudo === "function"){
				verifyArgs(pseudo, name, subselect);
				if(next === trueFunc$1) return pseudo;
				return function pseudoArgs(elem){
					return pseudo(elem, subselect) && next(elem);
				};
			} else {
				throw new Error("unmatched pseudo-class :" + name);
			}
		},
		filters,
		pseudos
	};
}

var pseudos = factory$1;

/*
	compiles a selector to an executable function
*/

var compile$1 = compileFactory;

var trueFunc$1$1       = boolbase.trueFunc,
	falseFunc$2      = boolbase.falseFunc;

function compileFactory(adapter){
	var Pseudos     = pseudos(adapter),
		filters     = Pseudos.filters,
		Rules 			= general(adapter, Pseudos);

	function compile(selector, options, context){
		var next = compileUnsafe(selector, options, context);
		return wrap(next);
	}

	function wrap(next){
		return function base(elem){
			return adapter.isTag(elem) && next(elem);
		};
	}

	function compileUnsafe(selector, options, context){
		var token = cssWhat(selector, options);
		return compileToken(token, options, context);
	}

	function includesScopePseudo(t){
		return t.type === "pseudo" && (
			t.name === "scope" || (
				Array.isArray(t.data) &&
				t.data.some(function(data){
					return data.some(includesScopePseudo);
				})
			)
		);
	}

	var DESCENDANT_TOKEN = {type: "descendant"},
		FLEXIBLE_DESCENDANT_TOKEN = {type: "_flexibleDescendant"},
		SCOPE_TOKEN = {type: "pseudo", name: "scope"},
		PLACEHOLDER_ELEMENT = {};

	//CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector
	//http://www.w3.org/TR/selectors4/#absolutizing
	function absolutize(token, context){
		//TODO better check if context is document
		var hasContext = !!context && !!context.length && context.every(function(e){
			return e === PLACEHOLDER_ELEMENT || !!adapter.getParent(e);
		});


		token.forEach(function(t){
			if(t.length > 0 && isTraversal(t[0]) && t[0].type !== "descendant"); else if(hasContext && !includesScopePseudo(t)){
				t.unshift(DESCENDANT_TOKEN);
			} else {
				return;
			}

			t.unshift(SCOPE_TOKEN);
		});
	}

	function compileToken(token, options, context){
		token = token.filter(function(t){ return t.length > 0; });

		token.forEach(sort);

		var isArrayContext = Array.isArray(context);

		context = (options && options.context) || context;

		if(context && !isArrayContext) context = [context];

		absolutize(token, context);

		var shouldTestNextSiblings = false;

		var query = token
			.map(function(rules){
				if(rules[0] && rules[1] && rules[0].name === "scope"){
					var ruleType = rules[1].type;
					if(isArrayContext && ruleType === "descendant") rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
					else if(ruleType === "adjacent" || ruleType === "sibling") shouldTestNextSiblings = true;
				}
				return compileRules(rules, options, context);
			})
			.reduce(reduceRules, falseFunc$2);

		query.shouldTestNextSiblings = shouldTestNextSiblings;

		return query;
	}

	function isTraversal(t){
		return procedure.get(t.type) < 0;
	}

	function compileRules(rules, options, context){
		return rules.reduce(function(func, rule){
			if(func === falseFunc$2) return func;
			return Rules.get(rule.type)(func, rule, options, context);
		}, options && options.rootFunc || trueFunc$1$1);
	}

	function reduceRules(a, b){
		if(b === falseFunc$2 || a === trueFunc$1$1){
			return a;
		}
		if(a === falseFunc$2 || b === trueFunc$1$1){
			return b;
		}

		return function combine(elem){
			return a(elem) || b(elem);
		};
	}

	function containsTraversal(t){
		return t.some(isTraversal);
	}

	//:not, :has and :matches have to compile selectors
	//doing this in lib/pseudos.js would lead to circular dependencies,
	//so we add them here
	filters.set('not', function(next, token, options, context){
		var opts = {
			xmlMode: !!(options && options.xmlMode),
			strict: !!(options && options.strict)
		};
		if(opts.strict){
			if(token.length > 1 || token.some(containsTraversal)){
				throw new Error("complex selectors in :not aren't allowed in strict mode");
			}
		}

		var func = compileToken(token, opts, context);

		if(func === falseFunc$2) return next;
		if(func === trueFunc$1$1)  return falseFunc$2;

		return function(elem){
			return !func(elem) && next(elem);
		};
	});

	filters.set('has', function(next, token, options){
		var opts = {
			xmlMode: !!(options && options.xmlMode),
			strict: !!(options && options.strict)
		};

		//FIXME: Uses an array as a pointer to the current element (side effects)
		var context = token.some(containsTraversal) ? [PLACEHOLDER_ELEMENT] : null;

		var func = compileToken(token, opts, context);

		if(func === falseFunc$2) return falseFunc$2;
		if(func === trueFunc$1$1){
			return function(elem){
				return adapter.getChildren(elem).some(adapter.isTag) && next(elem);
			};
		}

		func = wrap(func);

		if(context){
			return function has(elem){
				return next(elem) && (
					(context[0] = elem), adapter.existsOne(func, adapter.getChildren(elem))
				);
			};
		}

		return function has(elem){
			return next(elem) && adapter.existsOne(func, adapter.getChildren(elem));
		};
	});

	filters.set('matches', function(next, token, options, context){
		var opts = {
			xmlMode: !!(options && options.xmlMode),
			strict: !!(options && options.strict),
			rootFunc: next
		};

		return compileToken(token, opts, context);
	});

	compile.compileToken = compileToken;
	compile.compileUnsafe = compileUnsafe;
	compile.Pseudos = Pseudos;

	return compile;
}

var cssSelect = CSSselect;

var falseFunc$3      = boolbase.falseFunc,
	defaultCompile = compile$1(domutils);

function adapterCompile(adapter){
	if(!adapter.__compile__){
		adapter.__compile__ = compile$1(adapter);
	}
	return adapter.__compile__
}

function getSelectorFunc(searchFunc){
	return function select(query, elems, options){
		options = options || {};
		options.adapter = options.adapter || domutils;
		var compile = adapterCompile(options.adapter);

		if(typeof query !== "function") query = compile.compileUnsafe(query, options, elems);
		if(query.shouldTestNextSiblings) elems = appendNextSiblings((options && options.context) || elems, options.adapter);
		if(!Array.isArray(elems)) elems = options.adapter.getChildren(elems);
		else elems = options.adapter.removeSubsets(elems);
		return searchFunc(query, elems, options);
	};
}

function getNextSiblings(elem, adapter){
	var siblings = adapter.getSiblings(elem);
	if(!Array.isArray(siblings)) return [];
	siblings = siblings.slice(0);
	while(siblings.shift() !== elem);
	return siblings;
}

function appendNextSiblings(elems, adapter){
	// Order matters because jQuery seems to check the children before the siblings
	if(!Array.isArray(elems)) elems = [elems];
	var newElems = elems.slice(0);

	for(var i = 0, len = elems.length; i < len; i++){
		var nextSiblings = getNextSiblings(newElems[i], adapter);
		newElems.push.apply(newElems, nextSiblings);
	}
	return newElems;
}

var selectAll = getSelectorFunc(function selectAll(query, elems, options){
	return (query === falseFunc$3 || !elems || elems.length === 0) ? [] : options.adapter.findAll(query, elems);
});

var selectOne = getSelectorFunc(function selectOne(query, elems, options){
	return (query === falseFunc$3 || !elems || elems.length === 0) ? null : options.adapter.findOne(query, elems);
});

function is(elem, query, options){
	options = options || {};
	options.adapter = options.adapter || domutils;
	var compile = adapterCompile(options.adapter);
	return (typeof query === "function" ? query : compile(query, options))(elem);
}

/*
	the exported interface
*/
function CSSselect(query, elems, options){
	return selectAll(query, elems, options);
}

CSSselect.compile = defaultCompile;
CSSselect.filters = defaultCompile.Pseudos.filters;
CSSselect.pseudos = defaultCompile.Pseudos.pseudos;

CSSselect.selectAll = selectAll;
CSSselect.selectOne = selectOne;

CSSselect.is = is;

//legacy methods (might be removed)
CSSselect.parse = defaultCompile;
CSSselect.iterate = selectAll;

//hooks
CSSselect._compileUnsafe = defaultCompile.compileUnsafe;
CSSselect._compileToken = defaultCompile.compileToken;

var amp = "&";
var apos = "'";
var gt = ">";
var lt = "<";
var quot = "\"";
var xml = {
	amp: amp,
	apos: apos,
	gt: gt,
	lt: lt,
	quot: quot
};

var xml$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	amp: amp,
	apos: apos,
	gt: gt,
	lt: lt,
	quot: quot,
	'default': xml
});

var Aacute = "Á";
var aacute = "á";
var Abreve = "Ă";
var abreve = "ă";
var ac = "∾";
var acd = "∿";
var acE = "∾̳";
var Acirc = "Â";
var acirc = "â";
var acute = "´";
var Acy = "А";
var acy = "а";
var AElig = "Æ";
var aelig = "æ";
var af = "⁡";
var Afr = "𝔄";
var afr = "𝔞";
var Agrave = "À";
var agrave = "à";
var alefsym = "ℵ";
var aleph = "ℵ";
var Alpha = "Α";
var alpha = "α";
var Amacr = "Ā";
var amacr = "ā";
var amalg = "⨿";
var amp$1 = "&";
var AMP = "&";
var andand = "⩕";
var And = "⩓";
var and = "∧";
var andd = "⩜";
var andslope = "⩘";
var andv = "⩚";
var ang = "∠";
var ange = "⦤";
var angle = "∠";
var angmsdaa = "⦨";
var angmsdab = "⦩";
var angmsdac = "⦪";
var angmsdad = "⦫";
var angmsdae = "⦬";
var angmsdaf = "⦭";
var angmsdag = "⦮";
var angmsdah = "⦯";
var angmsd = "∡";
var angrt = "∟";
var angrtvb = "⊾";
var angrtvbd = "⦝";
var angsph = "∢";
var angst = "Å";
var angzarr = "⍼";
var Aogon = "Ą";
var aogon = "ą";
var Aopf = "𝔸";
var aopf = "𝕒";
var apacir = "⩯";
var ap = "≈";
var apE = "⩰";
var ape = "≊";
var apid = "≋";
var apos$1 = "'";
var ApplyFunction = "⁡";
var approx = "≈";
var approxeq = "≊";
var Aring = "Å";
var aring = "å";
var Ascr = "𝒜";
var ascr = "𝒶";
var Assign = "≔";
var ast = "*";
var asymp = "≈";
var asympeq = "≍";
var Atilde = "Ã";
var atilde = "ã";
var Auml = "Ä";
var auml = "ä";
var awconint = "∳";
var awint = "⨑";
var backcong = "≌";
var backepsilon = "϶";
var backprime = "‵";
var backsim = "∽";
var backsimeq = "⋍";
var Backslash = "∖";
var Barv = "⫧";
var barvee = "⊽";
var barwed = "⌅";
var Barwed = "⌆";
var barwedge = "⌅";
var bbrk = "⎵";
var bbrktbrk = "⎶";
var bcong = "≌";
var Bcy = "Б";
var bcy = "б";
var bdquo = "„";
var becaus = "∵";
var because = "∵";
var Because = "∵";
var bemptyv = "⦰";
var bepsi = "϶";
var bernou = "ℬ";
var Bernoullis = "ℬ";
var Beta = "Β";
var beta = "β";
var beth = "ℶ";
var between = "≬";
var Bfr = "𝔅";
var bfr = "𝔟";
var bigcap = "⋂";
var bigcirc = "◯";
var bigcup = "⋃";
var bigodot = "⨀";
var bigoplus = "⨁";
var bigotimes = "⨂";
var bigsqcup = "⨆";
var bigstar = "★";
var bigtriangledown = "▽";
var bigtriangleup = "△";
var biguplus = "⨄";
var bigvee = "⋁";
var bigwedge = "⋀";
var bkarow = "⤍";
var blacklozenge = "⧫";
var blacksquare = "▪";
var blacktriangle = "▴";
var blacktriangledown = "▾";
var blacktriangleleft = "◂";
var blacktriangleright = "▸";
var blank = "␣";
var blk12 = "▒";
var blk14 = "░";
var blk34 = "▓";
var block = "█";
var bne = "=⃥";
var bnequiv = "≡⃥";
var bNot = "⫭";
var bnot = "⌐";
var Bopf = "𝔹";
var bopf = "𝕓";
var bot = "⊥";
var bottom = "⊥";
var bowtie = "⋈";
var boxbox = "⧉";
var boxdl = "┐";
var boxdL = "╕";
var boxDl = "╖";
var boxDL = "╗";
var boxdr = "┌";
var boxdR = "╒";
var boxDr = "╓";
var boxDR = "╔";
var boxh = "─";
var boxH = "═";
var boxhd = "┬";
var boxHd = "╤";
var boxhD = "╥";
var boxHD = "╦";
var boxhu = "┴";
var boxHu = "╧";
var boxhU = "╨";
var boxHU = "╩";
var boxminus = "⊟";
var boxplus = "⊞";
var boxtimes = "⊠";
var boxul = "┘";
var boxuL = "╛";
var boxUl = "╜";
var boxUL = "╝";
var boxur = "└";
var boxuR = "╘";
var boxUr = "╙";
var boxUR = "╚";
var boxv = "│";
var boxV = "║";
var boxvh = "┼";
var boxvH = "╪";
var boxVh = "╫";
var boxVH = "╬";
var boxvl = "┤";
var boxvL = "╡";
var boxVl = "╢";
var boxVL = "╣";
var boxvr = "├";
var boxvR = "╞";
var boxVr = "╟";
var boxVR = "╠";
var bprime = "‵";
var breve = "˘";
var Breve = "˘";
var brvbar = "¦";
var bscr = "𝒷";
var Bscr = "ℬ";
var bsemi = "⁏";
var bsim = "∽";
var bsime = "⋍";
var bsolb = "⧅";
var bsol = "\\";
var bsolhsub = "⟈";
var bull = "•";
var bullet = "•";
var bump = "≎";
var bumpE = "⪮";
var bumpe = "≏";
var Bumpeq = "≎";
var bumpeq = "≏";
var Cacute = "Ć";
var cacute = "ć";
var capand = "⩄";
var capbrcup = "⩉";
var capcap = "⩋";
var cap = "∩";
var Cap = "⋒";
var capcup = "⩇";
var capdot = "⩀";
var CapitalDifferentialD = "ⅅ";
var caps = "∩︀";
var caret = "⁁";
var caron = "ˇ";
var Cayleys = "ℭ";
var ccaps = "⩍";
var Ccaron = "Č";
var ccaron = "č";
var Ccedil = "Ç";
var ccedil = "ç";
var Ccirc = "Ĉ";
var ccirc = "ĉ";
var Cconint = "∰";
var ccups = "⩌";
var ccupssm = "⩐";
var Cdot = "Ċ";
var cdot = "ċ";
var cedil = "¸";
var Cedilla = "¸";
var cemptyv = "⦲";
var cent = "¢";
var centerdot = "·";
var CenterDot = "·";
var cfr = "𝔠";
var Cfr = "ℭ";
var CHcy = "Ч";
var chcy = "ч";
var check = "✓";
var checkmark = "✓";
var Chi = "Χ";
var chi = "χ";
var circ = "ˆ";
var circeq = "≗";
var circlearrowleft = "↺";
var circlearrowright = "↻";
var circledast = "⊛";
var circledcirc = "⊚";
var circleddash = "⊝";
var CircleDot = "⊙";
var circledR = "®";
var circledS = "Ⓢ";
var CircleMinus = "⊖";
var CirclePlus = "⊕";
var CircleTimes = "⊗";
var cir = "○";
var cirE = "⧃";
var cire = "≗";
var cirfnint = "⨐";
var cirmid = "⫯";
var cirscir = "⧂";
var ClockwiseContourIntegral = "∲";
var CloseCurlyDoubleQuote = "”";
var CloseCurlyQuote = "’";
var clubs = "♣";
var clubsuit = "♣";
var colon = ":";
var Colon = "∷";
var Colone = "⩴";
var colone = "≔";
var coloneq = "≔";
var comma = ",";
var commat = "@";
var comp = "∁";
var compfn = "∘";
var complement = "∁";
var complexes = "ℂ";
var cong = "≅";
var congdot = "⩭";
var Congruent = "≡";
var conint = "∮";
var Conint = "∯";
var ContourIntegral = "∮";
var copf = "𝕔";
var Copf = "ℂ";
var coprod = "∐";
var Coproduct = "∐";
var copy = "©";
var COPY = "©";
var copysr = "℗";
var CounterClockwiseContourIntegral = "∳";
var crarr = "↵";
var cross = "✗";
var Cross = "⨯";
var Cscr = "𝒞";
var cscr = "𝒸";
var csub = "⫏";
var csube = "⫑";
var csup = "⫐";
var csupe = "⫒";
var ctdot = "⋯";
var cudarrl = "⤸";
var cudarrr = "⤵";
var cuepr = "⋞";
var cuesc = "⋟";
var cularr = "↶";
var cularrp = "⤽";
var cupbrcap = "⩈";
var cupcap = "⩆";
var CupCap = "≍";
var cup = "∪";
var Cup = "⋓";
var cupcup = "⩊";
var cupdot = "⊍";
var cupor = "⩅";
var cups = "∪︀";
var curarr = "↷";
var curarrm = "⤼";
var curlyeqprec = "⋞";
var curlyeqsucc = "⋟";
var curlyvee = "⋎";
var curlywedge = "⋏";
var curren = "¤";
var curvearrowleft = "↶";
var curvearrowright = "↷";
var cuvee = "⋎";
var cuwed = "⋏";
var cwconint = "∲";
var cwint = "∱";
var cylcty = "⌭";
var dagger = "†";
var Dagger = "‡";
var daleth = "ℸ";
var darr = "↓";
var Darr = "↡";
var dArr = "⇓";
var dash = "‐";
var Dashv = "⫤";
var dashv = "⊣";
var dbkarow = "⤏";
var dblac = "˝";
var Dcaron = "Ď";
var dcaron = "ď";
var Dcy = "Д";
var dcy = "д";
var ddagger = "‡";
var ddarr = "⇊";
var DD = "ⅅ";
var dd = "ⅆ";
var DDotrahd = "⤑";
var ddotseq = "⩷";
var deg = "°";
var Del = "∇";
var Delta = "Δ";
var delta = "δ";
var demptyv = "⦱";
var dfisht = "⥿";
var Dfr = "𝔇";
var dfr = "𝔡";
var dHar = "⥥";
var dharl = "⇃";
var dharr = "⇂";
var DiacriticalAcute = "´";
var DiacriticalDot = "˙";
var DiacriticalDoubleAcute = "˝";
var DiacriticalGrave = "`";
var DiacriticalTilde = "˜";
var diam = "⋄";
var diamond = "⋄";
var Diamond = "⋄";
var diamondsuit = "♦";
var diams = "♦";
var die = "¨";
var DifferentialD = "ⅆ";
var digamma = "ϝ";
var disin = "⋲";
var div = "÷";
var divide = "÷";
var divideontimes = "⋇";
var divonx = "⋇";
var DJcy = "Ђ";
var djcy = "ђ";
var dlcorn = "⌞";
var dlcrop = "⌍";
var dollar = "$";
var Dopf = "𝔻";
var dopf = "𝕕";
var Dot = "¨";
var dot = "˙";
var DotDot = "⃜";
var doteq = "≐";
var doteqdot = "≑";
var DotEqual = "≐";
var dotminus = "∸";
var dotplus = "∔";
var dotsquare = "⊡";
var doublebarwedge = "⌆";
var DoubleContourIntegral = "∯";
var DoubleDot = "¨";
var DoubleDownArrow = "⇓";
var DoubleLeftArrow = "⇐";
var DoubleLeftRightArrow = "⇔";
var DoubleLeftTee = "⫤";
var DoubleLongLeftArrow = "⟸";
var DoubleLongLeftRightArrow = "⟺";
var DoubleLongRightArrow = "⟹";
var DoubleRightArrow = "⇒";
var DoubleRightTee = "⊨";
var DoubleUpArrow = "⇑";
var DoubleUpDownArrow = "⇕";
var DoubleVerticalBar = "∥";
var DownArrowBar = "⤓";
var downarrow = "↓";
var DownArrow = "↓";
var Downarrow = "⇓";
var DownArrowUpArrow = "⇵";
var DownBreve = "̑";
var downdownarrows = "⇊";
var downharpoonleft = "⇃";
var downharpoonright = "⇂";
var DownLeftRightVector = "⥐";
var DownLeftTeeVector = "⥞";
var DownLeftVectorBar = "⥖";
var DownLeftVector = "↽";
var DownRightTeeVector = "⥟";
var DownRightVectorBar = "⥗";
var DownRightVector = "⇁";
var DownTeeArrow = "↧";
var DownTee = "⊤";
var drbkarow = "⤐";
var drcorn = "⌟";
var drcrop = "⌌";
var Dscr = "𝒟";
var dscr = "𝒹";
var DScy = "Ѕ";
var dscy = "ѕ";
var dsol = "⧶";
var Dstrok = "Đ";
var dstrok = "đ";
var dtdot = "⋱";
var dtri = "▿";
var dtrif = "▾";
var duarr = "⇵";
var duhar = "⥯";
var dwangle = "⦦";
var DZcy = "Џ";
var dzcy = "џ";
var dzigrarr = "⟿";
var Eacute = "É";
var eacute = "é";
var easter = "⩮";
var Ecaron = "Ě";
var ecaron = "ě";
var Ecirc = "Ê";
var ecirc = "ê";
var ecir = "≖";
var ecolon = "≕";
var Ecy = "Э";
var ecy = "э";
var eDDot = "⩷";
var Edot = "Ė";
var edot = "ė";
var eDot = "≑";
var ee = "ⅇ";
var efDot = "≒";
var Efr = "𝔈";
var efr = "𝔢";
var eg = "⪚";
var Egrave = "È";
var egrave = "è";
var egs = "⪖";
var egsdot = "⪘";
var el = "⪙";
var Element = "∈";
var elinters = "⏧";
var ell = "ℓ";
var els = "⪕";
var elsdot = "⪗";
var Emacr = "Ē";
var emacr = "ē";
var empty = "∅";
var emptyset = "∅";
var EmptySmallSquare = "◻";
var emptyv = "∅";
var EmptyVerySmallSquare = "▫";
var emsp13 = " ";
var emsp14 = " ";
var emsp = " ";
var ENG = "Ŋ";
var eng = "ŋ";
var ensp = " ";
var Eogon = "Ę";
var eogon = "ę";
var Eopf = "𝔼";
var eopf = "𝕖";
var epar = "⋕";
var eparsl = "⧣";
var eplus = "⩱";
var epsi = "ε";
var Epsilon = "Ε";
var epsilon = "ε";
var epsiv = "ϵ";
var eqcirc = "≖";
var eqcolon = "≕";
var eqsim = "≂";
var eqslantgtr = "⪖";
var eqslantless = "⪕";
var Equal = "⩵";
var equals = "=";
var EqualTilde = "≂";
var equest = "≟";
var Equilibrium = "⇌";
var equiv = "≡";
var equivDD = "⩸";
var eqvparsl = "⧥";
var erarr = "⥱";
var erDot = "≓";
var escr = "ℯ";
var Escr = "ℰ";
var esdot = "≐";
var Esim = "⩳";
var esim = "≂";
var Eta = "Η";
var eta = "η";
var ETH = "Ð";
var eth = "ð";
var Euml = "Ë";
var euml = "ë";
var euro = "€";
var excl = "!";
var exist = "∃";
var Exists = "∃";
var expectation = "ℰ";
var exponentiale = "ⅇ";
var ExponentialE = "ⅇ";
var fallingdotseq = "≒";
var Fcy = "Ф";
var fcy = "ф";
var female = "♀";
var ffilig = "ﬃ";
var fflig = "ﬀ";
var ffllig = "ﬄ";
var Ffr = "𝔉";
var ffr = "𝔣";
var filig = "ﬁ";
var FilledSmallSquare = "◼";
var FilledVerySmallSquare = "▪";
var fjlig = "fj";
var flat = "♭";
var fllig = "ﬂ";
var fltns = "▱";
var fnof = "ƒ";
var Fopf = "𝔽";
var fopf = "𝕗";
var forall = "∀";
var ForAll = "∀";
var fork = "⋔";
var forkv = "⫙";
var Fouriertrf = "ℱ";
var fpartint = "⨍";
var frac12 = "½";
var frac13 = "⅓";
var frac14 = "¼";
var frac15 = "⅕";
var frac16 = "⅙";
var frac18 = "⅛";
var frac23 = "⅔";
var frac25 = "⅖";
var frac34 = "¾";
var frac35 = "⅗";
var frac38 = "⅜";
var frac45 = "⅘";
var frac56 = "⅚";
var frac58 = "⅝";
var frac78 = "⅞";
var frasl = "⁄";
var frown = "⌢";
var fscr = "𝒻";
var Fscr = "ℱ";
var gacute = "ǵ";
var Gamma = "Γ";
var gamma = "γ";
var Gammad = "Ϝ";
var gammad = "ϝ";
var gap = "⪆";
var Gbreve = "Ğ";
var gbreve = "ğ";
var Gcedil = "Ģ";
var Gcirc = "Ĝ";
var gcirc = "ĝ";
var Gcy = "Г";
var gcy = "г";
var Gdot = "Ġ";
var gdot = "ġ";
var ge = "≥";
var gE = "≧";
var gEl = "⪌";
var gel = "⋛";
var geq = "≥";
var geqq = "≧";
var geqslant = "⩾";
var gescc = "⪩";
var ges = "⩾";
var gesdot = "⪀";
var gesdoto = "⪂";
var gesdotol = "⪄";
var gesl = "⋛︀";
var gesles = "⪔";
var Gfr = "𝔊";
var gfr = "𝔤";
var gg = "≫";
var Gg = "⋙";
var ggg = "⋙";
var gimel = "ℷ";
var GJcy = "Ѓ";
var gjcy = "ѓ";
var gla = "⪥";
var gl = "≷";
var glE = "⪒";
var glj = "⪤";
var gnap = "⪊";
var gnapprox = "⪊";
var gne = "⪈";
var gnE = "≩";
var gneq = "⪈";
var gneqq = "≩";
var gnsim = "⋧";
var Gopf = "𝔾";
var gopf = "𝕘";
var grave = "`";
var GreaterEqual = "≥";
var GreaterEqualLess = "⋛";
var GreaterFullEqual = "≧";
var GreaterGreater = "⪢";
var GreaterLess = "≷";
var GreaterSlantEqual = "⩾";
var GreaterTilde = "≳";
var Gscr = "𝒢";
var gscr = "ℊ";
var gsim = "≳";
var gsime = "⪎";
var gsiml = "⪐";
var gtcc = "⪧";
var gtcir = "⩺";
var gt$1 = ">";
var GT = ">";
var Gt = "≫";
var gtdot = "⋗";
var gtlPar = "⦕";
var gtquest = "⩼";
var gtrapprox = "⪆";
var gtrarr = "⥸";
var gtrdot = "⋗";
var gtreqless = "⋛";
var gtreqqless = "⪌";
var gtrless = "≷";
var gtrsim = "≳";
var gvertneqq = "≩︀";
var gvnE = "≩︀";
var Hacek = "ˇ";
var hairsp = " ";
var half = "½";
var hamilt = "ℋ";
var HARDcy = "Ъ";
var hardcy = "ъ";
var harrcir = "⥈";
var harr = "↔";
var hArr = "⇔";
var harrw = "↭";
var Hat = "^";
var hbar = "ℏ";
var Hcirc = "Ĥ";
var hcirc = "ĥ";
var hearts = "♥";
var heartsuit = "♥";
var hellip = "…";
var hercon = "⊹";
var hfr = "𝔥";
var Hfr = "ℌ";
var HilbertSpace = "ℋ";
var hksearow = "⤥";
var hkswarow = "⤦";
var hoarr = "⇿";
var homtht = "∻";
var hookleftarrow = "↩";
var hookrightarrow = "↪";
var hopf = "𝕙";
var Hopf = "ℍ";
var horbar = "―";
var HorizontalLine = "─";
var hscr = "𝒽";
var Hscr = "ℋ";
var hslash = "ℏ";
var Hstrok = "Ħ";
var hstrok = "ħ";
var HumpDownHump = "≎";
var HumpEqual = "≏";
var hybull = "⁃";
var hyphen = "‐";
var Iacute = "Í";
var iacute = "í";
var ic = "⁣";
var Icirc = "Î";
var icirc = "î";
var Icy = "И";
var icy = "и";
var Idot = "İ";
var IEcy = "Е";
var iecy = "е";
var iexcl = "¡";
var iff = "⇔";
var ifr = "𝔦";
var Ifr = "ℑ";
var Igrave = "Ì";
var igrave = "ì";
var ii = "ⅈ";
var iiiint = "⨌";
var iiint = "∭";
var iinfin = "⧜";
var iiota = "℩";
var IJlig = "Ĳ";
var ijlig = "ĳ";
var Imacr = "Ī";
var imacr = "ī";
var image = "ℑ";
var ImaginaryI = "ⅈ";
var imagline = "ℐ";
var imagpart = "ℑ";
var imath = "ı";
var Im = "ℑ";
var imof = "⊷";
var imped = "Ƶ";
var Implies = "⇒";
var incare = "℅";
var infin = "∞";
var infintie = "⧝";
var inodot = "ı";
var intcal = "⊺";
var int = "∫";
var Int = "∬";
var integers = "ℤ";
var Integral = "∫";
var intercal = "⊺";
var Intersection = "⋂";
var intlarhk = "⨗";
var intprod = "⨼";
var InvisibleComma = "⁣";
var InvisibleTimes = "⁢";
var IOcy = "Ё";
var iocy = "ё";
var Iogon = "Į";
var iogon = "į";
var Iopf = "𝕀";
var iopf = "𝕚";
var Iota = "Ι";
var iota = "ι";
var iprod = "⨼";
var iquest = "¿";
var iscr = "𝒾";
var Iscr = "ℐ";
var isin = "∈";
var isindot = "⋵";
var isinE = "⋹";
var isins = "⋴";
var isinsv = "⋳";
var isinv = "∈";
var it = "⁢";
var Itilde = "Ĩ";
var itilde = "ĩ";
var Iukcy = "І";
var iukcy = "і";
var Iuml = "Ï";
var iuml = "ï";
var Jcirc = "Ĵ";
var jcirc = "ĵ";
var Jcy = "Й";
var jcy = "й";
var Jfr = "𝔍";
var jfr = "𝔧";
var jmath = "ȷ";
var Jopf = "𝕁";
var jopf = "𝕛";
var Jscr = "𝒥";
var jscr = "𝒿";
var Jsercy = "Ј";
var jsercy = "ј";
var Jukcy = "Є";
var jukcy = "є";
var Kappa = "Κ";
var kappa = "κ";
var kappav = "ϰ";
var Kcedil = "Ķ";
var kcedil = "ķ";
var Kcy = "К";
var kcy = "к";
var Kfr = "𝔎";
var kfr = "𝔨";
var kgreen = "ĸ";
var KHcy = "Х";
var khcy = "х";
var KJcy = "Ќ";
var kjcy = "ќ";
var Kopf = "𝕂";
var kopf = "𝕜";
var Kscr = "𝒦";
var kscr = "𝓀";
var lAarr = "⇚";
var Lacute = "Ĺ";
var lacute = "ĺ";
var laemptyv = "⦴";
var lagran = "ℒ";
var Lambda = "Λ";
var lambda = "λ";
var lang = "⟨";
var Lang = "⟪";
var langd = "⦑";
var langle = "⟨";
var lap = "⪅";
var Laplacetrf = "ℒ";
var laquo = "«";
var larrb = "⇤";
var larrbfs = "⤟";
var larr = "←";
var Larr = "↞";
var lArr = "⇐";
var larrfs = "⤝";
var larrhk = "↩";
var larrlp = "↫";
var larrpl = "⤹";
var larrsim = "⥳";
var larrtl = "↢";
var latail = "⤙";
var lAtail = "⤛";
var lat = "⪫";
var late = "⪭";
var lates = "⪭︀";
var lbarr = "⤌";
var lBarr = "⤎";
var lbbrk = "❲";
var lbrace = "{";
var lbrack = "[";
var lbrke = "⦋";
var lbrksld = "⦏";
var lbrkslu = "⦍";
var Lcaron = "Ľ";
var lcaron = "ľ";
var Lcedil = "Ļ";
var lcedil = "ļ";
var lceil = "⌈";
var lcub = "{";
var Lcy = "Л";
var lcy = "л";
var ldca = "⤶";
var ldquo = "“";
var ldquor = "„";
var ldrdhar = "⥧";
var ldrushar = "⥋";
var ldsh = "↲";
var le = "≤";
var lE = "≦";
var LeftAngleBracket = "⟨";
var LeftArrowBar = "⇤";
var leftarrow = "←";
var LeftArrow = "←";
var Leftarrow = "⇐";
var LeftArrowRightArrow = "⇆";
var leftarrowtail = "↢";
var LeftCeiling = "⌈";
var LeftDoubleBracket = "⟦";
var LeftDownTeeVector = "⥡";
var LeftDownVectorBar = "⥙";
var LeftDownVector = "⇃";
var LeftFloor = "⌊";
var leftharpoondown = "↽";
var leftharpoonup = "↼";
var leftleftarrows = "⇇";
var leftrightarrow = "↔";
var LeftRightArrow = "↔";
var Leftrightarrow = "⇔";
var leftrightarrows = "⇆";
var leftrightharpoons = "⇋";
var leftrightsquigarrow = "↭";
var LeftRightVector = "⥎";
var LeftTeeArrow = "↤";
var LeftTee = "⊣";
var LeftTeeVector = "⥚";
var leftthreetimes = "⋋";
var LeftTriangleBar = "⧏";
var LeftTriangle = "⊲";
var LeftTriangleEqual = "⊴";
var LeftUpDownVector = "⥑";
var LeftUpTeeVector = "⥠";
var LeftUpVectorBar = "⥘";
var LeftUpVector = "↿";
var LeftVectorBar = "⥒";
var LeftVector = "↼";
var lEg = "⪋";
var leg = "⋚";
var leq = "≤";
var leqq = "≦";
var leqslant = "⩽";
var lescc = "⪨";
var les = "⩽";
var lesdot = "⩿";
var lesdoto = "⪁";
var lesdotor = "⪃";
var lesg = "⋚︀";
var lesges = "⪓";
var lessapprox = "⪅";
var lessdot = "⋖";
var lesseqgtr = "⋚";
var lesseqqgtr = "⪋";
var LessEqualGreater = "⋚";
var LessFullEqual = "≦";
var LessGreater = "≶";
var lessgtr = "≶";
var LessLess = "⪡";
var lesssim = "≲";
var LessSlantEqual = "⩽";
var LessTilde = "≲";
var lfisht = "⥼";
var lfloor = "⌊";
var Lfr = "𝔏";
var lfr = "𝔩";
var lg = "≶";
var lgE = "⪑";
var lHar = "⥢";
var lhard = "↽";
var lharu = "↼";
var lharul = "⥪";
var lhblk = "▄";
var LJcy = "Љ";
var ljcy = "љ";
var llarr = "⇇";
var ll = "≪";
var Ll = "⋘";
var llcorner = "⌞";
var Lleftarrow = "⇚";
var llhard = "⥫";
var lltri = "◺";
var Lmidot = "Ŀ";
var lmidot = "ŀ";
var lmoustache = "⎰";
var lmoust = "⎰";
var lnap = "⪉";
var lnapprox = "⪉";
var lne = "⪇";
var lnE = "≨";
var lneq = "⪇";
var lneqq = "≨";
var lnsim = "⋦";
var loang = "⟬";
var loarr = "⇽";
var lobrk = "⟦";
var longleftarrow = "⟵";
var LongLeftArrow = "⟵";
var Longleftarrow = "⟸";
var longleftrightarrow = "⟷";
var LongLeftRightArrow = "⟷";
var Longleftrightarrow = "⟺";
var longmapsto = "⟼";
var longrightarrow = "⟶";
var LongRightArrow = "⟶";
var Longrightarrow = "⟹";
var looparrowleft = "↫";
var looparrowright = "↬";
var lopar = "⦅";
var Lopf = "𝕃";
var lopf = "𝕝";
var loplus = "⨭";
var lotimes = "⨴";
var lowast = "∗";
var lowbar = "_";
var LowerLeftArrow = "↙";
var LowerRightArrow = "↘";
var loz = "◊";
var lozenge = "◊";
var lozf = "⧫";
var lpar = "(";
var lparlt = "⦓";
var lrarr = "⇆";
var lrcorner = "⌟";
var lrhar = "⇋";
var lrhard = "⥭";
var lrm = "‎";
var lrtri = "⊿";
var lsaquo = "‹";
var lscr = "𝓁";
var Lscr = "ℒ";
var lsh = "↰";
var Lsh = "↰";
var lsim = "≲";
var lsime = "⪍";
var lsimg = "⪏";
var lsqb = "[";
var lsquo = "‘";
var lsquor = "‚";
var Lstrok = "Ł";
var lstrok = "ł";
var ltcc = "⪦";
var ltcir = "⩹";
var lt$1 = "<";
var LT = "<";
var Lt = "≪";
var ltdot = "⋖";
var lthree = "⋋";
var ltimes = "⋉";
var ltlarr = "⥶";
var ltquest = "⩻";
var ltri = "◃";
var ltrie = "⊴";
var ltrif = "◂";
var ltrPar = "⦖";
var lurdshar = "⥊";
var luruhar = "⥦";
var lvertneqq = "≨︀";
var lvnE = "≨︀";
var macr = "¯";
var male = "♂";
var malt = "✠";
var maltese = "✠";
var map = "↦";
var mapsto = "↦";
var mapstodown = "↧";
var mapstoleft = "↤";
var mapstoup = "↥";
var marker = "▮";
var mcomma = "⨩";
var Mcy = "М";
var mcy = "м";
var mdash = "—";
var mDDot = "∺";
var measuredangle = "∡";
var MediumSpace = " ";
var Mellintrf = "ℳ";
var Mfr = "𝔐";
var mfr = "𝔪";
var mho = "℧";
var micro = "µ";
var midast = "*";
var midcir = "⫰";
var mid = "∣";
var middot = "·";
var minusb = "⊟";
var minus = "−";
var minusd = "∸";
var minusdu = "⨪";
var MinusPlus = "∓";
var mlcp = "⫛";
var mldr = "…";
var mnplus = "∓";
var models = "⊧";
var Mopf = "𝕄";
var mopf = "𝕞";
var mp = "∓";
var mscr = "𝓂";
var Mscr = "ℳ";
var mstpos = "∾";
var Mu = "Μ";
var mu = "μ";
var multimap = "⊸";
var mumap = "⊸";
var nabla = "∇";
var Nacute = "Ń";
var nacute = "ń";
var nang = "∠⃒";
var nap = "≉";
var napE = "⩰̸";
var napid = "≋̸";
var napos = "ŉ";
var napprox = "≉";
var natural = "♮";
var naturals = "ℕ";
var natur = "♮";
var nbsp = " ";
var nbump = "≎̸";
var nbumpe = "≏̸";
var ncap = "⩃";
var Ncaron = "Ň";
var ncaron = "ň";
var Ncedil = "Ņ";
var ncedil = "ņ";
var ncong = "≇";
var ncongdot = "⩭̸";
var ncup = "⩂";
var Ncy = "Н";
var ncy = "н";
var ndash = "–";
var nearhk = "⤤";
var nearr = "↗";
var neArr = "⇗";
var nearrow = "↗";
var ne = "≠";
var nedot = "≐̸";
var NegativeMediumSpace = "​";
var NegativeThickSpace = "​";
var NegativeThinSpace = "​";
var NegativeVeryThinSpace = "​";
var nequiv = "≢";
var nesear = "⤨";
var nesim = "≂̸";
var NestedGreaterGreater = "≫";
var NestedLessLess = "≪";
var NewLine = "\n";
var nexist = "∄";
var nexists = "∄";
var Nfr = "𝔑";
var nfr = "𝔫";
var ngE = "≧̸";
var nge = "≱";
var ngeq = "≱";
var ngeqq = "≧̸";
var ngeqslant = "⩾̸";
var nges = "⩾̸";
var nGg = "⋙̸";
var ngsim = "≵";
var nGt = "≫⃒";
var ngt = "≯";
var ngtr = "≯";
var nGtv = "≫̸";
var nharr = "↮";
var nhArr = "⇎";
var nhpar = "⫲";
var ni = "∋";
var nis = "⋼";
var nisd = "⋺";
var niv = "∋";
var NJcy = "Њ";
var njcy = "њ";
var nlarr = "↚";
var nlArr = "⇍";
var nldr = "‥";
var nlE = "≦̸";
var nle = "≰";
var nleftarrow = "↚";
var nLeftarrow = "⇍";
var nleftrightarrow = "↮";
var nLeftrightarrow = "⇎";
var nleq = "≰";
var nleqq = "≦̸";
var nleqslant = "⩽̸";
var nles = "⩽̸";
var nless = "≮";
var nLl = "⋘̸";
var nlsim = "≴";
var nLt = "≪⃒";
var nlt = "≮";
var nltri = "⋪";
var nltrie = "⋬";
var nLtv = "≪̸";
var nmid = "∤";
var NoBreak = "⁠";
var NonBreakingSpace = " ";
var nopf = "𝕟";
var Nopf = "ℕ";
var Not = "⫬";
var not = "¬";
var NotCongruent = "≢";
var NotCupCap = "≭";
var NotDoubleVerticalBar = "∦";
var NotElement = "∉";
var NotEqual = "≠";
var NotEqualTilde = "≂̸";
var NotExists = "∄";
var NotGreater = "≯";
var NotGreaterEqual = "≱";
var NotGreaterFullEqual = "≧̸";
var NotGreaterGreater = "≫̸";
var NotGreaterLess = "≹";
var NotGreaterSlantEqual = "⩾̸";
var NotGreaterTilde = "≵";
var NotHumpDownHump = "≎̸";
var NotHumpEqual = "≏̸";
var notin = "∉";
var notindot = "⋵̸";
var notinE = "⋹̸";
var notinva = "∉";
var notinvb = "⋷";
var notinvc = "⋶";
var NotLeftTriangleBar = "⧏̸";
var NotLeftTriangle = "⋪";
var NotLeftTriangleEqual = "⋬";
var NotLess = "≮";
var NotLessEqual = "≰";
var NotLessGreater = "≸";
var NotLessLess = "≪̸";
var NotLessSlantEqual = "⩽̸";
var NotLessTilde = "≴";
var NotNestedGreaterGreater = "⪢̸";
var NotNestedLessLess = "⪡̸";
var notni = "∌";
var notniva = "∌";
var notnivb = "⋾";
var notnivc = "⋽";
var NotPrecedes = "⊀";
var NotPrecedesEqual = "⪯̸";
var NotPrecedesSlantEqual = "⋠";
var NotReverseElement = "∌";
var NotRightTriangleBar = "⧐̸";
var NotRightTriangle = "⋫";
var NotRightTriangleEqual = "⋭";
var NotSquareSubset = "⊏̸";
var NotSquareSubsetEqual = "⋢";
var NotSquareSuperset = "⊐̸";
var NotSquareSupersetEqual = "⋣";
var NotSubset = "⊂⃒";
var NotSubsetEqual = "⊈";
var NotSucceeds = "⊁";
var NotSucceedsEqual = "⪰̸";
var NotSucceedsSlantEqual = "⋡";
var NotSucceedsTilde = "≿̸";
var NotSuperset = "⊃⃒";
var NotSupersetEqual = "⊉";
var NotTilde = "≁";
var NotTildeEqual = "≄";
var NotTildeFullEqual = "≇";
var NotTildeTilde = "≉";
var NotVerticalBar = "∤";
var nparallel = "∦";
var npar = "∦";
var nparsl = "⫽⃥";
var npart = "∂̸";
var npolint = "⨔";
var npr = "⊀";
var nprcue = "⋠";
var nprec = "⊀";
var npreceq = "⪯̸";
var npre = "⪯̸";
var nrarrc = "⤳̸";
var nrarr = "↛";
var nrArr = "⇏";
var nrarrw = "↝̸";
var nrightarrow = "↛";
var nRightarrow = "⇏";
var nrtri = "⋫";
var nrtrie = "⋭";
var nsc = "⊁";
var nsccue = "⋡";
var nsce = "⪰̸";
var Nscr = "𝒩";
var nscr = "𝓃";
var nshortmid = "∤";
var nshortparallel = "∦";
var nsim = "≁";
var nsime = "≄";
var nsimeq = "≄";
var nsmid = "∤";
var nspar = "∦";
var nsqsube = "⋢";
var nsqsupe = "⋣";
var nsub = "⊄";
var nsubE = "⫅̸";
var nsube = "⊈";
var nsubset = "⊂⃒";
var nsubseteq = "⊈";
var nsubseteqq = "⫅̸";
var nsucc = "⊁";
var nsucceq = "⪰̸";
var nsup = "⊅";
var nsupE = "⫆̸";
var nsupe = "⊉";
var nsupset = "⊃⃒";
var nsupseteq = "⊉";
var nsupseteqq = "⫆̸";
var ntgl = "≹";
var Ntilde = "Ñ";
var ntilde = "ñ";
var ntlg = "≸";
var ntriangleleft = "⋪";
var ntrianglelefteq = "⋬";
var ntriangleright = "⋫";
var ntrianglerighteq = "⋭";
var Nu = "Ν";
var nu = "ν";
var num = "#";
var numero = "№";
var numsp = " ";
var nvap = "≍⃒";
var nvdash = "⊬";
var nvDash = "⊭";
var nVdash = "⊮";
var nVDash = "⊯";
var nvge = "≥⃒";
var nvgt = ">⃒";
var nvHarr = "⤄";
var nvinfin = "⧞";
var nvlArr = "⤂";
var nvle = "≤⃒";
var nvlt = "<⃒";
var nvltrie = "⊴⃒";
var nvrArr = "⤃";
var nvrtrie = "⊵⃒";
var nvsim = "∼⃒";
var nwarhk = "⤣";
var nwarr = "↖";
var nwArr = "⇖";
var nwarrow = "↖";
var nwnear = "⤧";
var Oacute = "Ó";
var oacute = "ó";
var oast = "⊛";
var Ocirc = "Ô";
var ocirc = "ô";
var ocir = "⊚";
var Ocy = "О";
var ocy = "о";
var odash = "⊝";
var Odblac = "Ő";
var odblac = "ő";
var odiv = "⨸";
var odot = "⊙";
var odsold = "⦼";
var OElig = "Œ";
var oelig = "œ";
var ofcir = "⦿";
var Ofr = "𝔒";
var ofr = "𝔬";
var ogon = "˛";
var Ograve = "Ò";
var ograve = "ò";
var ogt = "⧁";
var ohbar = "⦵";
var ohm = "Ω";
var oint = "∮";
var olarr = "↺";
var olcir = "⦾";
var olcross = "⦻";
var oline = "‾";
var olt = "⧀";
var Omacr = "Ō";
var omacr = "ō";
var Omega = "Ω";
var omega = "ω";
var Omicron = "Ο";
var omicron = "ο";
var omid = "⦶";
var ominus = "⊖";
var Oopf = "𝕆";
var oopf = "𝕠";
var opar = "⦷";
var OpenCurlyDoubleQuote = "“";
var OpenCurlyQuote = "‘";
var operp = "⦹";
var oplus = "⊕";
var orarr = "↻";
var Or = "⩔";
var or = "∨";
var ord = "⩝";
var order = "ℴ";
var orderof = "ℴ";
var ordf = "ª";
var ordm = "º";
var origof = "⊶";
var oror = "⩖";
var orslope = "⩗";
var orv = "⩛";
var oS = "Ⓢ";
var Oscr = "𝒪";
var oscr = "ℴ";
var Oslash = "Ø";
var oslash = "ø";
var osol = "⊘";
var Otilde = "Õ";
var otilde = "õ";
var otimesas = "⨶";
var Otimes = "⨷";
var otimes = "⊗";
var Ouml = "Ö";
var ouml = "ö";
var ovbar = "⌽";
var OverBar = "‾";
var OverBrace = "⏞";
var OverBracket = "⎴";
var OverParenthesis = "⏜";
var para = "¶";
var parallel = "∥";
var par = "∥";
var parsim = "⫳";
var parsl = "⫽";
var part = "∂";
var PartialD = "∂";
var Pcy = "П";
var pcy = "п";
var percnt = "%";
var period = ".";
var permil = "‰";
var perp = "⊥";
var pertenk = "‱";
var Pfr = "𝔓";
var pfr = "𝔭";
var Phi = "Φ";
var phi = "φ";
var phiv = "ϕ";
var phmmat = "ℳ";
var phone = "☎";
var Pi = "Π";
var pi = "π";
var pitchfork = "⋔";
var piv = "ϖ";
var planck = "ℏ";
var planckh = "ℎ";
var plankv = "ℏ";
var plusacir = "⨣";
var plusb = "⊞";
var pluscir = "⨢";
var plus = "+";
var plusdo = "∔";
var plusdu = "⨥";
var pluse = "⩲";
var PlusMinus = "±";
var plusmn = "±";
var plussim = "⨦";
var plustwo = "⨧";
var pm = "±";
var Poincareplane = "ℌ";
var pointint = "⨕";
var popf = "𝕡";
var Popf = "ℙ";
var pound = "£";
var prap = "⪷";
var Pr = "⪻";
var pr = "≺";
var prcue = "≼";
var precapprox = "⪷";
var prec = "≺";
var preccurlyeq = "≼";
var Precedes = "≺";
var PrecedesEqual = "⪯";
var PrecedesSlantEqual = "≼";
var PrecedesTilde = "≾";
var preceq = "⪯";
var precnapprox = "⪹";
var precneqq = "⪵";
var precnsim = "⋨";
var pre = "⪯";
var prE = "⪳";
var precsim = "≾";
var prime = "′";
var Prime = "″";
var primes = "ℙ";
var prnap = "⪹";
var prnE = "⪵";
var prnsim = "⋨";
var prod = "∏";
var Product = "∏";
var profalar = "⌮";
var profline = "⌒";
var profsurf = "⌓";
var prop = "∝";
var Proportional = "∝";
var Proportion = "∷";
var propto = "∝";
var prsim = "≾";
var prurel = "⊰";
var Pscr = "𝒫";
var pscr = "𝓅";
var Psi = "Ψ";
var psi = "ψ";
var puncsp = " ";
var Qfr = "𝔔";
var qfr = "𝔮";
var qint = "⨌";
var qopf = "𝕢";
var Qopf = "ℚ";
var qprime = "⁗";
var Qscr = "𝒬";
var qscr = "𝓆";
var quaternions = "ℍ";
var quatint = "⨖";
var quest = "?";
var questeq = "≟";
var quot$1 = "\"";
var QUOT = "\"";
var rAarr = "⇛";
var race = "∽̱";
var Racute = "Ŕ";
var racute = "ŕ";
var radic = "√";
var raemptyv = "⦳";
var rang = "⟩";
var Rang = "⟫";
var rangd = "⦒";
var range = "⦥";
var rangle = "⟩";
var raquo = "»";
var rarrap = "⥵";
var rarrb = "⇥";
var rarrbfs = "⤠";
var rarrc = "⤳";
var rarr = "→";
var Rarr = "↠";
var rArr = "⇒";
var rarrfs = "⤞";
var rarrhk = "↪";
var rarrlp = "↬";
var rarrpl = "⥅";
var rarrsim = "⥴";
var Rarrtl = "⤖";
var rarrtl = "↣";
var rarrw = "↝";
var ratail = "⤚";
var rAtail = "⤜";
var ratio = "∶";
var rationals = "ℚ";
var rbarr = "⤍";
var rBarr = "⤏";
var RBarr = "⤐";
var rbbrk = "❳";
var rbrace = "}";
var rbrack = "]";
var rbrke = "⦌";
var rbrksld = "⦎";
var rbrkslu = "⦐";
var Rcaron = "Ř";
var rcaron = "ř";
var Rcedil = "Ŗ";
var rcedil = "ŗ";
var rceil = "⌉";
var rcub = "}";
var Rcy = "Р";
var rcy = "р";
var rdca = "⤷";
var rdldhar = "⥩";
var rdquo = "”";
var rdquor = "”";
var rdsh = "↳";
var real = "ℜ";
var realine = "ℛ";
var realpart = "ℜ";
var reals = "ℝ";
var Re = "ℜ";
var rect = "▭";
var reg = "®";
var REG = "®";
var ReverseElement = "∋";
var ReverseEquilibrium = "⇋";
var ReverseUpEquilibrium = "⥯";
var rfisht = "⥽";
var rfloor = "⌋";
var rfr = "𝔯";
var Rfr = "ℜ";
var rHar = "⥤";
var rhard = "⇁";
var rharu = "⇀";
var rharul = "⥬";
var Rho = "Ρ";
var rho = "ρ";
var rhov = "ϱ";
var RightAngleBracket = "⟩";
var RightArrowBar = "⇥";
var rightarrow = "→";
var RightArrow = "→";
var Rightarrow = "⇒";
var RightArrowLeftArrow = "⇄";
var rightarrowtail = "↣";
var RightCeiling = "⌉";
var RightDoubleBracket = "⟧";
var RightDownTeeVector = "⥝";
var RightDownVectorBar = "⥕";
var RightDownVector = "⇂";
var RightFloor = "⌋";
var rightharpoondown = "⇁";
var rightharpoonup = "⇀";
var rightleftarrows = "⇄";
var rightleftharpoons = "⇌";
var rightrightarrows = "⇉";
var rightsquigarrow = "↝";
var RightTeeArrow = "↦";
var RightTee = "⊢";
var RightTeeVector = "⥛";
var rightthreetimes = "⋌";
var RightTriangleBar = "⧐";
var RightTriangle = "⊳";
var RightTriangleEqual = "⊵";
var RightUpDownVector = "⥏";
var RightUpTeeVector = "⥜";
var RightUpVectorBar = "⥔";
var RightUpVector = "↾";
var RightVectorBar = "⥓";
var RightVector = "⇀";
var ring = "˚";
var risingdotseq = "≓";
var rlarr = "⇄";
var rlhar = "⇌";
var rlm = "‏";
var rmoustache = "⎱";
var rmoust = "⎱";
var rnmid = "⫮";
var roang = "⟭";
var roarr = "⇾";
var robrk = "⟧";
var ropar = "⦆";
var ropf = "𝕣";
var Ropf = "ℝ";
var roplus = "⨮";
var rotimes = "⨵";
var RoundImplies = "⥰";
var rpar = ")";
var rpargt = "⦔";
var rppolint = "⨒";
var rrarr = "⇉";
var Rrightarrow = "⇛";
var rsaquo = "›";
var rscr = "𝓇";
var Rscr = "ℛ";
var rsh = "↱";
var Rsh = "↱";
var rsqb = "]";
var rsquo = "’";
var rsquor = "’";
var rthree = "⋌";
var rtimes = "⋊";
var rtri = "▹";
var rtrie = "⊵";
var rtrif = "▸";
var rtriltri = "⧎";
var RuleDelayed = "⧴";
var ruluhar = "⥨";
var rx = "℞";
var Sacute = "Ś";
var sacute = "ś";
var sbquo = "‚";
var scap = "⪸";
var Scaron = "Š";
var scaron = "š";
var Sc = "⪼";
var sc = "≻";
var sccue = "≽";
var sce = "⪰";
var scE = "⪴";
var Scedil = "Ş";
var scedil = "ş";
var Scirc = "Ŝ";
var scirc = "ŝ";
var scnap = "⪺";
var scnE = "⪶";
var scnsim = "⋩";
var scpolint = "⨓";
var scsim = "≿";
var Scy = "С";
var scy = "с";
var sdotb = "⊡";
var sdot = "⋅";
var sdote = "⩦";
var searhk = "⤥";
var searr = "↘";
var seArr = "⇘";
var searrow = "↘";
var sect = "§";
var semi = ";";
var seswar = "⤩";
var setminus = "∖";
var setmn = "∖";
var sext = "✶";
var Sfr = "𝔖";
var sfr = "𝔰";
var sfrown = "⌢";
var sharp = "♯";
var SHCHcy = "Щ";
var shchcy = "щ";
var SHcy = "Ш";
var shcy = "ш";
var ShortDownArrow = "↓";
var ShortLeftArrow = "←";
var shortmid = "∣";
var shortparallel = "∥";
var ShortRightArrow = "→";
var ShortUpArrow = "↑";
var shy = "­";
var Sigma = "Σ";
var sigma = "σ";
var sigmaf = "ς";
var sigmav = "ς";
var sim = "∼";
var simdot = "⩪";
var sime = "≃";
var simeq = "≃";
var simg = "⪞";
var simgE = "⪠";
var siml = "⪝";
var simlE = "⪟";
var simne = "≆";
var simplus = "⨤";
var simrarr = "⥲";
var slarr = "←";
var SmallCircle = "∘";
var smallsetminus = "∖";
var smashp = "⨳";
var smeparsl = "⧤";
var smid = "∣";
var smile = "⌣";
var smt = "⪪";
var smte = "⪬";
var smtes = "⪬︀";
var SOFTcy = "Ь";
var softcy = "ь";
var solbar = "⌿";
var solb = "⧄";
var sol = "/";
var Sopf = "𝕊";
var sopf = "𝕤";
var spades = "♠";
var spadesuit = "♠";
var spar = "∥";
var sqcap = "⊓";
var sqcaps = "⊓︀";
var sqcup = "⊔";
var sqcups = "⊔︀";
var Sqrt = "√";
var sqsub = "⊏";
var sqsube = "⊑";
var sqsubset = "⊏";
var sqsubseteq = "⊑";
var sqsup = "⊐";
var sqsupe = "⊒";
var sqsupset = "⊐";
var sqsupseteq = "⊒";
var square = "□";
var Square = "□";
var SquareIntersection = "⊓";
var SquareSubset = "⊏";
var SquareSubsetEqual = "⊑";
var SquareSuperset = "⊐";
var SquareSupersetEqual = "⊒";
var SquareUnion = "⊔";
var squarf = "▪";
var squ = "□";
var squf = "▪";
var srarr = "→";
var Sscr = "𝒮";
var sscr = "𝓈";
var ssetmn = "∖";
var ssmile = "⌣";
var sstarf = "⋆";
var Star = "⋆";
var star = "☆";
var starf = "★";
var straightepsilon = "ϵ";
var straightphi = "ϕ";
var strns = "¯";
var sub = "⊂";
var Sub = "⋐";
var subdot = "⪽";
var subE = "⫅";
var sube = "⊆";
var subedot = "⫃";
var submult = "⫁";
var subnE = "⫋";
var subne = "⊊";
var subplus = "⪿";
var subrarr = "⥹";
var subset = "⊂";
var Subset = "⋐";
var subseteq = "⊆";
var subseteqq = "⫅";
var SubsetEqual = "⊆";
var subsetneq = "⊊";
var subsetneqq = "⫋";
var subsim = "⫇";
var subsub = "⫕";
var subsup = "⫓";
var succapprox = "⪸";
var succ = "≻";
var succcurlyeq = "≽";
var Succeeds = "≻";
var SucceedsEqual = "⪰";
var SucceedsSlantEqual = "≽";
var SucceedsTilde = "≿";
var succeq = "⪰";
var succnapprox = "⪺";
var succneqq = "⪶";
var succnsim = "⋩";
var succsim = "≿";
var SuchThat = "∋";
var sum = "∑";
var Sum = "∑";
var sung = "♪";
var sup1 = "¹";
var sup2 = "²";
var sup3 = "³";
var sup = "⊃";
var Sup = "⋑";
var supdot = "⪾";
var supdsub = "⫘";
var supE = "⫆";
var supe = "⊇";
var supedot = "⫄";
var Superset = "⊃";
var SupersetEqual = "⊇";
var suphsol = "⟉";
var suphsub = "⫗";
var suplarr = "⥻";
var supmult = "⫂";
var supnE = "⫌";
var supne = "⊋";
var supplus = "⫀";
var supset = "⊃";
var Supset = "⋑";
var supseteq = "⊇";
var supseteqq = "⫆";
var supsetneq = "⊋";
var supsetneqq = "⫌";
var supsim = "⫈";
var supsub = "⫔";
var supsup = "⫖";
var swarhk = "⤦";
var swarr = "↙";
var swArr = "⇙";
var swarrow = "↙";
var swnwar = "⤪";
var szlig = "ß";
var Tab = "\t";
var target = "⌖";
var Tau = "Τ";
var tau = "τ";
var tbrk = "⎴";
var Tcaron = "Ť";
var tcaron = "ť";
var Tcedil = "Ţ";
var tcedil = "ţ";
var Tcy = "Т";
var tcy = "т";
var tdot = "⃛";
var telrec = "⌕";
var Tfr = "𝔗";
var tfr = "𝔱";
var there4 = "∴";
var therefore = "∴";
var Therefore = "∴";
var Theta = "Θ";
var theta = "θ";
var thetasym = "ϑ";
var thetav = "ϑ";
var thickapprox = "≈";
var thicksim = "∼";
var ThickSpace = "  ";
var ThinSpace = " ";
var thinsp = " ";
var thkap = "≈";
var thksim = "∼";
var THORN = "Þ";
var thorn = "þ";
var tilde = "˜";
var Tilde = "∼";
var TildeEqual = "≃";
var TildeFullEqual = "≅";
var TildeTilde = "≈";
var timesbar = "⨱";
var timesb = "⊠";
var times = "×";
var timesd = "⨰";
var tint = "∭";
var toea = "⤨";
var topbot = "⌶";
var topcir = "⫱";
var top = "⊤";
var Topf = "𝕋";
var topf = "𝕥";
var topfork = "⫚";
var tosa = "⤩";
var tprime = "‴";
var trade = "™";
var TRADE = "™";
var triangle = "▵";
var triangledown = "▿";
var triangleleft = "◃";
var trianglelefteq = "⊴";
var triangleq = "≜";
var triangleright = "▹";
var trianglerighteq = "⊵";
var tridot = "◬";
var trie = "≜";
var triminus = "⨺";
var TripleDot = "⃛";
var triplus = "⨹";
var trisb = "⧍";
var tritime = "⨻";
var trpezium = "⏢";
var Tscr = "𝒯";
var tscr = "𝓉";
var TScy = "Ц";
var tscy = "ц";
var TSHcy = "Ћ";
var tshcy = "ћ";
var Tstrok = "Ŧ";
var tstrok = "ŧ";
var twixt = "≬";
var twoheadleftarrow = "↞";
var twoheadrightarrow = "↠";
var Uacute = "Ú";
var uacute = "ú";
var uarr = "↑";
var Uarr = "↟";
var uArr = "⇑";
var Uarrocir = "⥉";
var Ubrcy = "Ў";
var ubrcy = "ў";
var Ubreve = "Ŭ";
var ubreve = "ŭ";
var Ucirc = "Û";
var ucirc = "û";
var Ucy = "У";
var ucy = "у";
var udarr = "⇅";
var Udblac = "Ű";
var udblac = "ű";
var udhar = "⥮";
var ufisht = "⥾";
var Ufr = "𝔘";
var ufr = "𝔲";
var Ugrave = "Ù";
var ugrave = "ù";
var uHar = "⥣";
var uharl = "↿";
var uharr = "↾";
var uhblk = "▀";
var ulcorn = "⌜";
var ulcorner = "⌜";
var ulcrop = "⌏";
var ultri = "◸";
var Umacr = "Ū";
var umacr = "ū";
var uml = "¨";
var UnderBar = "_";
var UnderBrace = "⏟";
var UnderBracket = "⎵";
var UnderParenthesis = "⏝";
var Union = "⋃";
var UnionPlus = "⊎";
var Uogon = "Ų";
var uogon = "ų";
var Uopf = "𝕌";
var uopf = "𝕦";
var UpArrowBar = "⤒";
var uparrow = "↑";
var UpArrow = "↑";
var Uparrow = "⇑";
var UpArrowDownArrow = "⇅";
var updownarrow = "↕";
var UpDownArrow = "↕";
var Updownarrow = "⇕";
var UpEquilibrium = "⥮";
var upharpoonleft = "↿";
var upharpoonright = "↾";
var uplus = "⊎";
var UpperLeftArrow = "↖";
var UpperRightArrow = "↗";
var upsi = "υ";
var Upsi = "ϒ";
var upsih = "ϒ";
var Upsilon = "Υ";
var upsilon = "υ";
var UpTeeArrow = "↥";
var UpTee = "⊥";
var upuparrows = "⇈";
var urcorn = "⌝";
var urcorner = "⌝";
var urcrop = "⌎";
var Uring = "Ů";
var uring = "ů";
var urtri = "◹";
var Uscr = "𝒰";
var uscr = "𝓊";
var utdot = "⋰";
var Utilde = "Ũ";
var utilde = "ũ";
var utri = "▵";
var utrif = "▴";
var uuarr = "⇈";
var Uuml = "Ü";
var uuml = "ü";
var uwangle = "⦧";
var vangrt = "⦜";
var varepsilon = "ϵ";
var varkappa = "ϰ";
var varnothing = "∅";
var varphi = "ϕ";
var varpi = "ϖ";
var varpropto = "∝";
var varr = "↕";
var vArr = "⇕";
var varrho = "ϱ";
var varsigma = "ς";
var varsubsetneq = "⊊︀";
var varsubsetneqq = "⫋︀";
var varsupsetneq = "⊋︀";
var varsupsetneqq = "⫌︀";
var vartheta = "ϑ";
var vartriangleleft = "⊲";
var vartriangleright = "⊳";
var vBar = "⫨";
var Vbar = "⫫";
var vBarv = "⫩";
var Vcy = "В";
var vcy = "в";
var vdash = "⊢";
var vDash = "⊨";
var Vdash = "⊩";
var VDash = "⊫";
var Vdashl = "⫦";
var veebar = "⊻";
var vee = "∨";
var Vee = "⋁";
var veeeq = "≚";
var vellip = "⋮";
var verbar = "|";
var Verbar = "‖";
var vert = "|";
var Vert = "‖";
var VerticalBar = "∣";
var VerticalLine = "|";
var VerticalSeparator = "❘";
var VerticalTilde = "≀";
var VeryThinSpace = " ";
var Vfr = "𝔙";
var vfr = "𝔳";
var vltri = "⊲";
var vnsub = "⊂⃒";
var vnsup = "⊃⃒";
var Vopf = "𝕍";
var vopf = "𝕧";
var vprop = "∝";
var vrtri = "⊳";
var Vscr = "𝒱";
var vscr = "𝓋";
var vsubnE = "⫋︀";
var vsubne = "⊊︀";
var vsupnE = "⫌︀";
var vsupne = "⊋︀";
var Vvdash = "⊪";
var vzigzag = "⦚";
var Wcirc = "Ŵ";
var wcirc = "ŵ";
var wedbar = "⩟";
var wedge = "∧";
var Wedge = "⋀";
var wedgeq = "≙";
var weierp = "℘";
var Wfr = "𝔚";
var wfr = "𝔴";
var Wopf = "𝕎";
var wopf = "𝕨";
var wp = "℘";
var wr = "≀";
var wreath = "≀";
var Wscr = "𝒲";
var wscr = "𝓌";
var xcap = "⋂";
var xcirc = "◯";
var xcup = "⋃";
var xdtri = "▽";
var Xfr = "𝔛";
var xfr = "𝔵";
var xharr = "⟷";
var xhArr = "⟺";
var Xi = "Ξ";
var xi = "ξ";
var xlarr = "⟵";
var xlArr = "⟸";
var xmap = "⟼";
var xnis = "⋻";
var xodot = "⨀";
var Xopf = "𝕏";
var xopf = "𝕩";
var xoplus = "⨁";
var xotime = "⨂";
var xrarr = "⟶";
var xrArr = "⟹";
var Xscr = "𝒳";
var xscr = "𝓍";
var xsqcup = "⨆";
var xuplus = "⨄";
var xutri = "△";
var xvee = "⋁";
var xwedge = "⋀";
var Yacute = "Ý";
var yacute = "ý";
var YAcy = "Я";
var yacy = "я";
var Ycirc = "Ŷ";
var ycirc = "ŷ";
var Ycy = "Ы";
var ycy = "ы";
var yen = "¥";
var Yfr = "𝔜";
var yfr = "𝔶";
var YIcy = "Ї";
var yicy = "ї";
var Yopf = "𝕐";
var yopf = "𝕪";
var Yscr = "𝒴";
var yscr = "𝓎";
var YUcy = "Ю";
var yucy = "ю";
var yuml = "ÿ";
var Yuml = "Ÿ";
var Zacute = "Ź";
var zacute = "ź";
var Zcaron = "Ž";
var zcaron = "ž";
var Zcy = "З";
var zcy = "з";
var Zdot = "Ż";
var zdot = "ż";
var zeetrf = "ℨ";
var ZeroWidthSpace = "​";
var Zeta = "Ζ";
var zeta = "ζ";
var zfr = "𝔷";
var Zfr = "ℨ";
var ZHcy = "Ж";
var zhcy = "ж";
var zigrarr = "⇝";
var zopf = "𝕫";
var Zopf = "ℤ";
var Zscr = "𝒵";
var zscr = "𝓏";
var zwj = "‍";
var zwnj = "‌";
var entities = {
	Aacute: Aacute,
	aacute: aacute,
	Abreve: Abreve,
	abreve: abreve,
	ac: ac,
	acd: acd,
	acE: acE,
	Acirc: Acirc,
	acirc: acirc,
	acute: acute,
	Acy: Acy,
	acy: acy,
	AElig: AElig,
	aelig: aelig,
	af: af,
	Afr: Afr,
	afr: afr,
	Agrave: Agrave,
	agrave: agrave,
	alefsym: alefsym,
	aleph: aleph,
	Alpha: Alpha,
	alpha: alpha,
	Amacr: Amacr,
	amacr: amacr,
	amalg: amalg,
	amp: amp$1,
	AMP: AMP,
	andand: andand,
	And: And,
	and: and,
	andd: andd,
	andslope: andslope,
	andv: andv,
	ang: ang,
	ange: ange,
	angle: angle,
	angmsdaa: angmsdaa,
	angmsdab: angmsdab,
	angmsdac: angmsdac,
	angmsdad: angmsdad,
	angmsdae: angmsdae,
	angmsdaf: angmsdaf,
	angmsdag: angmsdag,
	angmsdah: angmsdah,
	angmsd: angmsd,
	angrt: angrt,
	angrtvb: angrtvb,
	angrtvbd: angrtvbd,
	angsph: angsph,
	angst: angst,
	angzarr: angzarr,
	Aogon: Aogon,
	aogon: aogon,
	Aopf: Aopf,
	aopf: aopf,
	apacir: apacir,
	ap: ap,
	apE: apE,
	ape: ape,
	apid: apid,
	apos: apos$1,
	ApplyFunction: ApplyFunction,
	approx: approx,
	approxeq: approxeq,
	Aring: Aring,
	aring: aring,
	Ascr: Ascr,
	ascr: ascr,
	Assign: Assign,
	ast: ast,
	asymp: asymp,
	asympeq: asympeq,
	Atilde: Atilde,
	atilde: atilde,
	Auml: Auml,
	auml: auml,
	awconint: awconint,
	awint: awint,
	backcong: backcong,
	backepsilon: backepsilon,
	backprime: backprime,
	backsim: backsim,
	backsimeq: backsimeq,
	Backslash: Backslash,
	Barv: Barv,
	barvee: barvee,
	barwed: barwed,
	Barwed: Barwed,
	barwedge: barwedge,
	bbrk: bbrk,
	bbrktbrk: bbrktbrk,
	bcong: bcong,
	Bcy: Bcy,
	bcy: bcy,
	bdquo: bdquo,
	becaus: becaus,
	because: because,
	Because: Because,
	bemptyv: bemptyv,
	bepsi: bepsi,
	bernou: bernou,
	Bernoullis: Bernoullis,
	Beta: Beta,
	beta: beta,
	beth: beth,
	between: between,
	Bfr: Bfr,
	bfr: bfr,
	bigcap: bigcap,
	bigcirc: bigcirc,
	bigcup: bigcup,
	bigodot: bigodot,
	bigoplus: bigoplus,
	bigotimes: bigotimes,
	bigsqcup: bigsqcup,
	bigstar: bigstar,
	bigtriangledown: bigtriangledown,
	bigtriangleup: bigtriangleup,
	biguplus: biguplus,
	bigvee: bigvee,
	bigwedge: bigwedge,
	bkarow: bkarow,
	blacklozenge: blacklozenge,
	blacksquare: blacksquare,
	blacktriangle: blacktriangle,
	blacktriangledown: blacktriangledown,
	blacktriangleleft: blacktriangleleft,
	blacktriangleright: blacktriangleright,
	blank: blank,
	blk12: blk12,
	blk14: blk14,
	blk34: blk34,
	block: block,
	bne: bne,
	bnequiv: bnequiv,
	bNot: bNot,
	bnot: bnot,
	Bopf: Bopf,
	bopf: bopf,
	bot: bot,
	bottom: bottom,
	bowtie: bowtie,
	boxbox: boxbox,
	boxdl: boxdl,
	boxdL: boxdL,
	boxDl: boxDl,
	boxDL: boxDL,
	boxdr: boxdr,
	boxdR: boxdR,
	boxDr: boxDr,
	boxDR: boxDR,
	boxh: boxh,
	boxH: boxH,
	boxhd: boxhd,
	boxHd: boxHd,
	boxhD: boxhD,
	boxHD: boxHD,
	boxhu: boxhu,
	boxHu: boxHu,
	boxhU: boxhU,
	boxHU: boxHU,
	boxminus: boxminus,
	boxplus: boxplus,
	boxtimes: boxtimes,
	boxul: boxul,
	boxuL: boxuL,
	boxUl: boxUl,
	boxUL: boxUL,
	boxur: boxur,
	boxuR: boxuR,
	boxUr: boxUr,
	boxUR: boxUR,
	boxv: boxv,
	boxV: boxV,
	boxvh: boxvh,
	boxvH: boxvH,
	boxVh: boxVh,
	boxVH: boxVH,
	boxvl: boxvl,
	boxvL: boxvL,
	boxVl: boxVl,
	boxVL: boxVL,
	boxvr: boxvr,
	boxvR: boxvR,
	boxVr: boxVr,
	boxVR: boxVR,
	bprime: bprime,
	breve: breve,
	Breve: Breve,
	brvbar: brvbar,
	bscr: bscr,
	Bscr: Bscr,
	bsemi: bsemi,
	bsim: bsim,
	bsime: bsime,
	bsolb: bsolb,
	bsol: bsol,
	bsolhsub: bsolhsub,
	bull: bull,
	bullet: bullet,
	bump: bump,
	bumpE: bumpE,
	bumpe: bumpe,
	Bumpeq: Bumpeq,
	bumpeq: bumpeq,
	Cacute: Cacute,
	cacute: cacute,
	capand: capand,
	capbrcup: capbrcup,
	capcap: capcap,
	cap: cap,
	Cap: Cap,
	capcup: capcup,
	capdot: capdot,
	CapitalDifferentialD: CapitalDifferentialD,
	caps: caps,
	caret: caret,
	caron: caron,
	Cayleys: Cayleys,
	ccaps: ccaps,
	Ccaron: Ccaron,
	ccaron: ccaron,
	Ccedil: Ccedil,
	ccedil: ccedil,
	Ccirc: Ccirc,
	ccirc: ccirc,
	Cconint: Cconint,
	ccups: ccups,
	ccupssm: ccupssm,
	Cdot: Cdot,
	cdot: cdot,
	cedil: cedil,
	Cedilla: Cedilla,
	cemptyv: cemptyv,
	cent: cent,
	centerdot: centerdot,
	CenterDot: CenterDot,
	cfr: cfr,
	Cfr: Cfr,
	CHcy: CHcy,
	chcy: chcy,
	check: check,
	checkmark: checkmark,
	Chi: Chi,
	chi: chi,
	circ: circ,
	circeq: circeq,
	circlearrowleft: circlearrowleft,
	circlearrowright: circlearrowright,
	circledast: circledast,
	circledcirc: circledcirc,
	circleddash: circleddash,
	CircleDot: CircleDot,
	circledR: circledR,
	circledS: circledS,
	CircleMinus: CircleMinus,
	CirclePlus: CirclePlus,
	CircleTimes: CircleTimes,
	cir: cir,
	cirE: cirE,
	cire: cire,
	cirfnint: cirfnint,
	cirmid: cirmid,
	cirscir: cirscir,
	ClockwiseContourIntegral: ClockwiseContourIntegral,
	CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
	CloseCurlyQuote: CloseCurlyQuote,
	clubs: clubs,
	clubsuit: clubsuit,
	colon: colon,
	Colon: Colon,
	Colone: Colone,
	colone: colone,
	coloneq: coloneq,
	comma: comma,
	commat: commat,
	comp: comp,
	compfn: compfn,
	complement: complement,
	complexes: complexes,
	cong: cong,
	congdot: congdot,
	Congruent: Congruent,
	conint: conint,
	Conint: Conint,
	ContourIntegral: ContourIntegral,
	copf: copf,
	Copf: Copf,
	coprod: coprod,
	Coproduct: Coproduct,
	copy: copy,
	COPY: COPY,
	copysr: copysr,
	CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
	crarr: crarr,
	cross: cross,
	Cross: Cross,
	Cscr: Cscr,
	cscr: cscr,
	csub: csub,
	csube: csube,
	csup: csup,
	csupe: csupe,
	ctdot: ctdot,
	cudarrl: cudarrl,
	cudarrr: cudarrr,
	cuepr: cuepr,
	cuesc: cuesc,
	cularr: cularr,
	cularrp: cularrp,
	cupbrcap: cupbrcap,
	cupcap: cupcap,
	CupCap: CupCap,
	cup: cup,
	Cup: Cup,
	cupcup: cupcup,
	cupdot: cupdot,
	cupor: cupor,
	cups: cups,
	curarr: curarr,
	curarrm: curarrm,
	curlyeqprec: curlyeqprec,
	curlyeqsucc: curlyeqsucc,
	curlyvee: curlyvee,
	curlywedge: curlywedge,
	curren: curren,
	curvearrowleft: curvearrowleft,
	curvearrowright: curvearrowright,
	cuvee: cuvee,
	cuwed: cuwed,
	cwconint: cwconint,
	cwint: cwint,
	cylcty: cylcty,
	dagger: dagger,
	Dagger: Dagger,
	daleth: daleth,
	darr: darr,
	Darr: Darr,
	dArr: dArr,
	dash: dash,
	Dashv: Dashv,
	dashv: dashv,
	dbkarow: dbkarow,
	dblac: dblac,
	Dcaron: Dcaron,
	dcaron: dcaron,
	Dcy: Dcy,
	dcy: dcy,
	ddagger: ddagger,
	ddarr: ddarr,
	DD: DD,
	dd: dd,
	DDotrahd: DDotrahd,
	ddotseq: ddotseq,
	deg: deg,
	Del: Del,
	Delta: Delta,
	delta: delta,
	demptyv: demptyv,
	dfisht: dfisht,
	Dfr: Dfr,
	dfr: dfr,
	dHar: dHar,
	dharl: dharl,
	dharr: dharr,
	DiacriticalAcute: DiacriticalAcute,
	DiacriticalDot: DiacriticalDot,
	DiacriticalDoubleAcute: DiacriticalDoubleAcute,
	DiacriticalGrave: DiacriticalGrave,
	DiacriticalTilde: DiacriticalTilde,
	diam: diam,
	diamond: diamond,
	Diamond: Diamond,
	diamondsuit: diamondsuit,
	diams: diams,
	die: die,
	DifferentialD: DifferentialD,
	digamma: digamma,
	disin: disin,
	div: div,
	divide: divide,
	divideontimes: divideontimes,
	divonx: divonx,
	DJcy: DJcy,
	djcy: djcy,
	dlcorn: dlcorn,
	dlcrop: dlcrop,
	dollar: dollar,
	Dopf: Dopf,
	dopf: dopf,
	Dot: Dot,
	dot: dot,
	DotDot: DotDot,
	doteq: doteq,
	doteqdot: doteqdot,
	DotEqual: DotEqual,
	dotminus: dotminus,
	dotplus: dotplus,
	dotsquare: dotsquare,
	doublebarwedge: doublebarwedge,
	DoubleContourIntegral: DoubleContourIntegral,
	DoubleDot: DoubleDot,
	DoubleDownArrow: DoubleDownArrow,
	DoubleLeftArrow: DoubleLeftArrow,
	DoubleLeftRightArrow: DoubleLeftRightArrow,
	DoubleLeftTee: DoubleLeftTee,
	DoubleLongLeftArrow: DoubleLongLeftArrow,
	DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
	DoubleLongRightArrow: DoubleLongRightArrow,
	DoubleRightArrow: DoubleRightArrow,
	DoubleRightTee: DoubleRightTee,
	DoubleUpArrow: DoubleUpArrow,
	DoubleUpDownArrow: DoubleUpDownArrow,
	DoubleVerticalBar: DoubleVerticalBar,
	DownArrowBar: DownArrowBar,
	downarrow: downarrow,
	DownArrow: DownArrow,
	Downarrow: Downarrow,
	DownArrowUpArrow: DownArrowUpArrow,
	DownBreve: DownBreve,
	downdownarrows: downdownarrows,
	downharpoonleft: downharpoonleft,
	downharpoonright: downharpoonright,
	DownLeftRightVector: DownLeftRightVector,
	DownLeftTeeVector: DownLeftTeeVector,
	DownLeftVectorBar: DownLeftVectorBar,
	DownLeftVector: DownLeftVector,
	DownRightTeeVector: DownRightTeeVector,
	DownRightVectorBar: DownRightVectorBar,
	DownRightVector: DownRightVector,
	DownTeeArrow: DownTeeArrow,
	DownTee: DownTee,
	drbkarow: drbkarow,
	drcorn: drcorn,
	drcrop: drcrop,
	Dscr: Dscr,
	dscr: dscr,
	DScy: DScy,
	dscy: dscy,
	dsol: dsol,
	Dstrok: Dstrok,
	dstrok: dstrok,
	dtdot: dtdot,
	dtri: dtri,
	dtrif: dtrif,
	duarr: duarr,
	duhar: duhar,
	dwangle: dwangle,
	DZcy: DZcy,
	dzcy: dzcy,
	dzigrarr: dzigrarr,
	Eacute: Eacute,
	eacute: eacute,
	easter: easter,
	Ecaron: Ecaron,
	ecaron: ecaron,
	Ecirc: Ecirc,
	ecirc: ecirc,
	ecir: ecir,
	ecolon: ecolon,
	Ecy: Ecy,
	ecy: ecy,
	eDDot: eDDot,
	Edot: Edot,
	edot: edot,
	eDot: eDot,
	ee: ee,
	efDot: efDot,
	Efr: Efr,
	efr: efr,
	eg: eg,
	Egrave: Egrave,
	egrave: egrave,
	egs: egs,
	egsdot: egsdot,
	el: el,
	Element: Element,
	elinters: elinters,
	ell: ell,
	els: els,
	elsdot: elsdot,
	Emacr: Emacr,
	emacr: emacr,
	empty: empty,
	emptyset: emptyset,
	EmptySmallSquare: EmptySmallSquare,
	emptyv: emptyv,
	EmptyVerySmallSquare: EmptyVerySmallSquare,
	emsp13: emsp13,
	emsp14: emsp14,
	emsp: emsp,
	ENG: ENG,
	eng: eng,
	ensp: ensp,
	Eogon: Eogon,
	eogon: eogon,
	Eopf: Eopf,
	eopf: eopf,
	epar: epar,
	eparsl: eparsl,
	eplus: eplus,
	epsi: epsi,
	Epsilon: Epsilon,
	epsilon: epsilon,
	epsiv: epsiv,
	eqcirc: eqcirc,
	eqcolon: eqcolon,
	eqsim: eqsim,
	eqslantgtr: eqslantgtr,
	eqslantless: eqslantless,
	Equal: Equal,
	equals: equals,
	EqualTilde: EqualTilde,
	equest: equest,
	Equilibrium: Equilibrium,
	equiv: equiv,
	equivDD: equivDD,
	eqvparsl: eqvparsl,
	erarr: erarr,
	erDot: erDot,
	escr: escr,
	Escr: Escr,
	esdot: esdot,
	Esim: Esim,
	esim: esim,
	Eta: Eta,
	eta: eta,
	ETH: ETH,
	eth: eth,
	Euml: Euml,
	euml: euml,
	euro: euro,
	excl: excl,
	exist: exist,
	Exists: Exists,
	expectation: expectation,
	exponentiale: exponentiale,
	ExponentialE: ExponentialE,
	fallingdotseq: fallingdotseq,
	Fcy: Fcy,
	fcy: fcy,
	female: female,
	ffilig: ffilig,
	fflig: fflig,
	ffllig: ffllig,
	Ffr: Ffr,
	ffr: ffr,
	filig: filig,
	FilledSmallSquare: FilledSmallSquare,
	FilledVerySmallSquare: FilledVerySmallSquare,
	fjlig: fjlig,
	flat: flat,
	fllig: fllig,
	fltns: fltns,
	fnof: fnof,
	Fopf: Fopf,
	fopf: fopf,
	forall: forall,
	ForAll: ForAll,
	fork: fork,
	forkv: forkv,
	Fouriertrf: Fouriertrf,
	fpartint: fpartint,
	frac12: frac12,
	frac13: frac13,
	frac14: frac14,
	frac15: frac15,
	frac16: frac16,
	frac18: frac18,
	frac23: frac23,
	frac25: frac25,
	frac34: frac34,
	frac35: frac35,
	frac38: frac38,
	frac45: frac45,
	frac56: frac56,
	frac58: frac58,
	frac78: frac78,
	frasl: frasl,
	frown: frown,
	fscr: fscr,
	Fscr: Fscr,
	gacute: gacute,
	Gamma: Gamma,
	gamma: gamma,
	Gammad: Gammad,
	gammad: gammad,
	gap: gap,
	Gbreve: Gbreve,
	gbreve: gbreve,
	Gcedil: Gcedil,
	Gcirc: Gcirc,
	gcirc: gcirc,
	Gcy: Gcy,
	gcy: gcy,
	Gdot: Gdot,
	gdot: gdot,
	ge: ge,
	gE: gE,
	gEl: gEl,
	gel: gel,
	geq: geq,
	geqq: geqq,
	geqslant: geqslant,
	gescc: gescc,
	ges: ges,
	gesdot: gesdot,
	gesdoto: gesdoto,
	gesdotol: gesdotol,
	gesl: gesl,
	gesles: gesles,
	Gfr: Gfr,
	gfr: gfr,
	gg: gg,
	Gg: Gg,
	ggg: ggg,
	gimel: gimel,
	GJcy: GJcy,
	gjcy: gjcy,
	gla: gla,
	gl: gl,
	glE: glE,
	glj: glj,
	gnap: gnap,
	gnapprox: gnapprox,
	gne: gne,
	gnE: gnE,
	gneq: gneq,
	gneqq: gneqq,
	gnsim: gnsim,
	Gopf: Gopf,
	gopf: gopf,
	grave: grave,
	GreaterEqual: GreaterEqual,
	GreaterEqualLess: GreaterEqualLess,
	GreaterFullEqual: GreaterFullEqual,
	GreaterGreater: GreaterGreater,
	GreaterLess: GreaterLess,
	GreaterSlantEqual: GreaterSlantEqual,
	GreaterTilde: GreaterTilde,
	Gscr: Gscr,
	gscr: gscr,
	gsim: gsim,
	gsime: gsime,
	gsiml: gsiml,
	gtcc: gtcc,
	gtcir: gtcir,
	gt: gt$1,
	GT: GT,
	Gt: Gt,
	gtdot: gtdot,
	gtlPar: gtlPar,
	gtquest: gtquest,
	gtrapprox: gtrapprox,
	gtrarr: gtrarr,
	gtrdot: gtrdot,
	gtreqless: gtreqless,
	gtreqqless: gtreqqless,
	gtrless: gtrless,
	gtrsim: gtrsim,
	gvertneqq: gvertneqq,
	gvnE: gvnE,
	Hacek: Hacek,
	hairsp: hairsp,
	half: half,
	hamilt: hamilt,
	HARDcy: HARDcy,
	hardcy: hardcy,
	harrcir: harrcir,
	harr: harr,
	hArr: hArr,
	harrw: harrw,
	Hat: Hat,
	hbar: hbar,
	Hcirc: Hcirc,
	hcirc: hcirc,
	hearts: hearts,
	heartsuit: heartsuit,
	hellip: hellip,
	hercon: hercon,
	hfr: hfr,
	Hfr: Hfr,
	HilbertSpace: HilbertSpace,
	hksearow: hksearow,
	hkswarow: hkswarow,
	hoarr: hoarr,
	homtht: homtht,
	hookleftarrow: hookleftarrow,
	hookrightarrow: hookrightarrow,
	hopf: hopf,
	Hopf: Hopf,
	horbar: horbar,
	HorizontalLine: HorizontalLine,
	hscr: hscr,
	Hscr: Hscr,
	hslash: hslash,
	Hstrok: Hstrok,
	hstrok: hstrok,
	HumpDownHump: HumpDownHump,
	HumpEqual: HumpEqual,
	hybull: hybull,
	hyphen: hyphen,
	Iacute: Iacute,
	iacute: iacute,
	ic: ic,
	Icirc: Icirc,
	icirc: icirc,
	Icy: Icy,
	icy: icy,
	Idot: Idot,
	IEcy: IEcy,
	iecy: iecy,
	iexcl: iexcl,
	iff: iff,
	ifr: ifr,
	Ifr: Ifr,
	Igrave: Igrave,
	igrave: igrave,
	ii: ii,
	iiiint: iiiint,
	iiint: iiint,
	iinfin: iinfin,
	iiota: iiota,
	IJlig: IJlig,
	ijlig: ijlig,
	Imacr: Imacr,
	imacr: imacr,
	image: image,
	ImaginaryI: ImaginaryI,
	imagline: imagline,
	imagpart: imagpart,
	imath: imath,
	Im: Im,
	imof: imof,
	imped: imped,
	Implies: Implies,
	incare: incare,
	"in": "∈",
	infin: infin,
	infintie: infintie,
	inodot: inodot,
	intcal: intcal,
	int: int,
	Int: Int,
	integers: integers,
	Integral: Integral,
	intercal: intercal,
	Intersection: Intersection,
	intlarhk: intlarhk,
	intprod: intprod,
	InvisibleComma: InvisibleComma,
	InvisibleTimes: InvisibleTimes,
	IOcy: IOcy,
	iocy: iocy,
	Iogon: Iogon,
	iogon: iogon,
	Iopf: Iopf,
	iopf: iopf,
	Iota: Iota,
	iota: iota,
	iprod: iprod,
	iquest: iquest,
	iscr: iscr,
	Iscr: Iscr,
	isin: isin,
	isindot: isindot,
	isinE: isinE,
	isins: isins,
	isinsv: isinsv,
	isinv: isinv,
	it: it,
	Itilde: Itilde,
	itilde: itilde,
	Iukcy: Iukcy,
	iukcy: iukcy,
	Iuml: Iuml,
	iuml: iuml,
	Jcirc: Jcirc,
	jcirc: jcirc,
	Jcy: Jcy,
	jcy: jcy,
	Jfr: Jfr,
	jfr: jfr,
	jmath: jmath,
	Jopf: Jopf,
	jopf: jopf,
	Jscr: Jscr,
	jscr: jscr,
	Jsercy: Jsercy,
	jsercy: jsercy,
	Jukcy: Jukcy,
	jukcy: jukcy,
	Kappa: Kappa,
	kappa: kappa,
	kappav: kappav,
	Kcedil: Kcedil,
	kcedil: kcedil,
	Kcy: Kcy,
	kcy: kcy,
	Kfr: Kfr,
	kfr: kfr,
	kgreen: kgreen,
	KHcy: KHcy,
	khcy: khcy,
	KJcy: KJcy,
	kjcy: kjcy,
	Kopf: Kopf,
	kopf: kopf,
	Kscr: Kscr,
	kscr: kscr,
	lAarr: lAarr,
	Lacute: Lacute,
	lacute: lacute,
	laemptyv: laemptyv,
	lagran: lagran,
	Lambda: Lambda,
	lambda: lambda,
	lang: lang,
	Lang: Lang,
	langd: langd,
	langle: langle,
	lap: lap,
	Laplacetrf: Laplacetrf,
	laquo: laquo,
	larrb: larrb,
	larrbfs: larrbfs,
	larr: larr,
	Larr: Larr,
	lArr: lArr,
	larrfs: larrfs,
	larrhk: larrhk,
	larrlp: larrlp,
	larrpl: larrpl,
	larrsim: larrsim,
	larrtl: larrtl,
	latail: latail,
	lAtail: lAtail,
	lat: lat,
	late: late,
	lates: lates,
	lbarr: lbarr,
	lBarr: lBarr,
	lbbrk: lbbrk,
	lbrace: lbrace,
	lbrack: lbrack,
	lbrke: lbrke,
	lbrksld: lbrksld,
	lbrkslu: lbrkslu,
	Lcaron: Lcaron,
	lcaron: lcaron,
	Lcedil: Lcedil,
	lcedil: lcedil,
	lceil: lceil,
	lcub: lcub,
	Lcy: Lcy,
	lcy: lcy,
	ldca: ldca,
	ldquo: ldquo,
	ldquor: ldquor,
	ldrdhar: ldrdhar,
	ldrushar: ldrushar,
	ldsh: ldsh,
	le: le,
	lE: lE,
	LeftAngleBracket: LeftAngleBracket,
	LeftArrowBar: LeftArrowBar,
	leftarrow: leftarrow,
	LeftArrow: LeftArrow,
	Leftarrow: Leftarrow,
	LeftArrowRightArrow: LeftArrowRightArrow,
	leftarrowtail: leftarrowtail,
	LeftCeiling: LeftCeiling,
	LeftDoubleBracket: LeftDoubleBracket,
	LeftDownTeeVector: LeftDownTeeVector,
	LeftDownVectorBar: LeftDownVectorBar,
	LeftDownVector: LeftDownVector,
	LeftFloor: LeftFloor,
	leftharpoondown: leftharpoondown,
	leftharpoonup: leftharpoonup,
	leftleftarrows: leftleftarrows,
	leftrightarrow: leftrightarrow,
	LeftRightArrow: LeftRightArrow,
	Leftrightarrow: Leftrightarrow,
	leftrightarrows: leftrightarrows,
	leftrightharpoons: leftrightharpoons,
	leftrightsquigarrow: leftrightsquigarrow,
	LeftRightVector: LeftRightVector,
	LeftTeeArrow: LeftTeeArrow,
	LeftTee: LeftTee,
	LeftTeeVector: LeftTeeVector,
	leftthreetimes: leftthreetimes,
	LeftTriangleBar: LeftTriangleBar,
	LeftTriangle: LeftTriangle,
	LeftTriangleEqual: LeftTriangleEqual,
	LeftUpDownVector: LeftUpDownVector,
	LeftUpTeeVector: LeftUpTeeVector,
	LeftUpVectorBar: LeftUpVectorBar,
	LeftUpVector: LeftUpVector,
	LeftVectorBar: LeftVectorBar,
	LeftVector: LeftVector,
	lEg: lEg,
	leg: leg,
	leq: leq,
	leqq: leqq,
	leqslant: leqslant,
	lescc: lescc,
	les: les,
	lesdot: lesdot,
	lesdoto: lesdoto,
	lesdotor: lesdotor,
	lesg: lesg,
	lesges: lesges,
	lessapprox: lessapprox,
	lessdot: lessdot,
	lesseqgtr: lesseqgtr,
	lesseqqgtr: lesseqqgtr,
	LessEqualGreater: LessEqualGreater,
	LessFullEqual: LessFullEqual,
	LessGreater: LessGreater,
	lessgtr: lessgtr,
	LessLess: LessLess,
	lesssim: lesssim,
	LessSlantEqual: LessSlantEqual,
	LessTilde: LessTilde,
	lfisht: lfisht,
	lfloor: lfloor,
	Lfr: Lfr,
	lfr: lfr,
	lg: lg,
	lgE: lgE,
	lHar: lHar,
	lhard: lhard,
	lharu: lharu,
	lharul: lharul,
	lhblk: lhblk,
	LJcy: LJcy,
	ljcy: ljcy,
	llarr: llarr,
	ll: ll,
	Ll: Ll,
	llcorner: llcorner,
	Lleftarrow: Lleftarrow,
	llhard: llhard,
	lltri: lltri,
	Lmidot: Lmidot,
	lmidot: lmidot,
	lmoustache: lmoustache,
	lmoust: lmoust,
	lnap: lnap,
	lnapprox: lnapprox,
	lne: lne,
	lnE: lnE,
	lneq: lneq,
	lneqq: lneqq,
	lnsim: lnsim,
	loang: loang,
	loarr: loarr,
	lobrk: lobrk,
	longleftarrow: longleftarrow,
	LongLeftArrow: LongLeftArrow,
	Longleftarrow: Longleftarrow,
	longleftrightarrow: longleftrightarrow,
	LongLeftRightArrow: LongLeftRightArrow,
	Longleftrightarrow: Longleftrightarrow,
	longmapsto: longmapsto,
	longrightarrow: longrightarrow,
	LongRightArrow: LongRightArrow,
	Longrightarrow: Longrightarrow,
	looparrowleft: looparrowleft,
	looparrowright: looparrowright,
	lopar: lopar,
	Lopf: Lopf,
	lopf: lopf,
	loplus: loplus,
	lotimes: lotimes,
	lowast: lowast,
	lowbar: lowbar,
	LowerLeftArrow: LowerLeftArrow,
	LowerRightArrow: LowerRightArrow,
	loz: loz,
	lozenge: lozenge,
	lozf: lozf,
	lpar: lpar,
	lparlt: lparlt,
	lrarr: lrarr,
	lrcorner: lrcorner,
	lrhar: lrhar,
	lrhard: lrhard,
	lrm: lrm,
	lrtri: lrtri,
	lsaquo: lsaquo,
	lscr: lscr,
	Lscr: Lscr,
	lsh: lsh,
	Lsh: Lsh,
	lsim: lsim,
	lsime: lsime,
	lsimg: lsimg,
	lsqb: lsqb,
	lsquo: lsquo,
	lsquor: lsquor,
	Lstrok: Lstrok,
	lstrok: lstrok,
	ltcc: ltcc,
	ltcir: ltcir,
	lt: lt$1,
	LT: LT,
	Lt: Lt,
	ltdot: ltdot,
	lthree: lthree,
	ltimes: ltimes,
	ltlarr: ltlarr,
	ltquest: ltquest,
	ltri: ltri,
	ltrie: ltrie,
	ltrif: ltrif,
	ltrPar: ltrPar,
	lurdshar: lurdshar,
	luruhar: luruhar,
	lvertneqq: lvertneqq,
	lvnE: lvnE,
	macr: macr,
	male: male,
	malt: malt,
	maltese: maltese,
	"Map": "⤅",
	map: map,
	mapsto: mapsto,
	mapstodown: mapstodown,
	mapstoleft: mapstoleft,
	mapstoup: mapstoup,
	marker: marker,
	mcomma: mcomma,
	Mcy: Mcy,
	mcy: mcy,
	mdash: mdash,
	mDDot: mDDot,
	measuredangle: measuredangle,
	MediumSpace: MediumSpace,
	Mellintrf: Mellintrf,
	Mfr: Mfr,
	mfr: mfr,
	mho: mho,
	micro: micro,
	midast: midast,
	midcir: midcir,
	mid: mid,
	middot: middot,
	minusb: minusb,
	minus: minus,
	minusd: minusd,
	minusdu: minusdu,
	MinusPlus: MinusPlus,
	mlcp: mlcp,
	mldr: mldr,
	mnplus: mnplus,
	models: models,
	Mopf: Mopf,
	mopf: mopf,
	mp: mp,
	mscr: mscr,
	Mscr: Mscr,
	mstpos: mstpos,
	Mu: Mu,
	mu: mu,
	multimap: multimap,
	mumap: mumap,
	nabla: nabla,
	Nacute: Nacute,
	nacute: nacute,
	nang: nang,
	nap: nap,
	napE: napE,
	napid: napid,
	napos: napos,
	napprox: napprox,
	natural: natural,
	naturals: naturals,
	natur: natur,
	nbsp: nbsp,
	nbump: nbump,
	nbumpe: nbumpe,
	ncap: ncap,
	Ncaron: Ncaron,
	ncaron: ncaron,
	Ncedil: Ncedil,
	ncedil: ncedil,
	ncong: ncong,
	ncongdot: ncongdot,
	ncup: ncup,
	Ncy: Ncy,
	ncy: ncy,
	ndash: ndash,
	nearhk: nearhk,
	nearr: nearr,
	neArr: neArr,
	nearrow: nearrow,
	ne: ne,
	nedot: nedot,
	NegativeMediumSpace: NegativeMediumSpace,
	NegativeThickSpace: NegativeThickSpace,
	NegativeThinSpace: NegativeThinSpace,
	NegativeVeryThinSpace: NegativeVeryThinSpace,
	nequiv: nequiv,
	nesear: nesear,
	nesim: nesim,
	NestedGreaterGreater: NestedGreaterGreater,
	NestedLessLess: NestedLessLess,
	NewLine: NewLine,
	nexist: nexist,
	nexists: nexists,
	Nfr: Nfr,
	nfr: nfr,
	ngE: ngE,
	nge: nge,
	ngeq: ngeq,
	ngeqq: ngeqq,
	ngeqslant: ngeqslant,
	nges: nges,
	nGg: nGg,
	ngsim: ngsim,
	nGt: nGt,
	ngt: ngt,
	ngtr: ngtr,
	nGtv: nGtv,
	nharr: nharr,
	nhArr: nhArr,
	nhpar: nhpar,
	ni: ni,
	nis: nis,
	nisd: nisd,
	niv: niv,
	NJcy: NJcy,
	njcy: njcy,
	nlarr: nlarr,
	nlArr: nlArr,
	nldr: nldr,
	nlE: nlE,
	nle: nle,
	nleftarrow: nleftarrow,
	nLeftarrow: nLeftarrow,
	nleftrightarrow: nleftrightarrow,
	nLeftrightarrow: nLeftrightarrow,
	nleq: nleq,
	nleqq: nleqq,
	nleqslant: nleqslant,
	nles: nles,
	nless: nless,
	nLl: nLl,
	nlsim: nlsim,
	nLt: nLt,
	nlt: nlt,
	nltri: nltri,
	nltrie: nltrie,
	nLtv: nLtv,
	nmid: nmid,
	NoBreak: NoBreak,
	NonBreakingSpace: NonBreakingSpace,
	nopf: nopf,
	Nopf: Nopf,
	Not: Not,
	not: not,
	NotCongruent: NotCongruent,
	NotCupCap: NotCupCap,
	NotDoubleVerticalBar: NotDoubleVerticalBar,
	NotElement: NotElement,
	NotEqual: NotEqual,
	NotEqualTilde: NotEqualTilde,
	NotExists: NotExists,
	NotGreater: NotGreater,
	NotGreaterEqual: NotGreaterEqual,
	NotGreaterFullEqual: NotGreaterFullEqual,
	NotGreaterGreater: NotGreaterGreater,
	NotGreaterLess: NotGreaterLess,
	NotGreaterSlantEqual: NotGreaterSlantEqual,
	NotGreaterTilde: NotGreaterTilde,
	NotHumpDownHump: NotHumpDownHump,
	NotHumpEqual: NotHumpEqual,
	notin: notin,
	notindot: notindot,
	notinE: notinE,
	notinva: notinva,
	notinvb: notinvb,
	notinvc: notinvc,
	NotLeftTriangleBar: NotLeftTriangleBar,
	NotLeftTriangle: NotLeftTriangle,
	NotLeftTriangleEqual: NotLeftTriangleEqual,
	NotLess: NotLess,
	NotLessEqual: NotLessEqual,
	NotLessGreater: NotLessGreater,
	NotLessLess: NotLessLess,
	NotLessSlantEqual: NotLessSlantEqual,
	NotLessTilde: NotLessTilde,
	NotNestedGreaterGreater: NotNestedGreaterGreater,
	NotNestedLessLess: NotNestedLessLess,
	notni: notni,
	notniva: notniva,
	notnivb: notnivb,
	notnivc: notnivc,
	NotPrecedes: NotPrecedes,
	NotPrecedesEqual: NotPrecedesEqual,
	NotPrecedesSlantEqual: NotPrecedesSlantEqual,
	NotReverseElement: NotReverseElement,
	NotRightTriangleBar: NotRightTriangleBar,
	NotRightTriangle: NotRightTriangle,
	NotRightTriangleEqual: NotRightTriangleEqual,
	NotSquareSubset: NotSquareSubset,
	NotSquareSubsetEqual: NotSquareSubsetEqual,
	NotSquareSuperset: NotSquareSuperset,
	NotSquareSupersetEqual: NotSquareSupersetEqual,
	NotSubset: NotSubset,
	NotSubsetEqual: NotSubsetEqual,
	NotSucceeds: NotSucceeds,
	NotSucceedsEqual: NotSucceedsEqual,
	NotSucceedsSlantEqual: NotSucceedsSlantEqual,
	NotSucceedsTilde: NotSucceedsTilde,
	NotSuperset: NotSuperset,
	NotSupersetEqual: NotSupersetEqual,
	NotTilde: NotTilde,
	NotTildeEqual: NotTildeEqual,
	NotTildeFullEqual: NotTildeFullEqual,
	NotTildeTilde: NotTildeTilde,
	NotVerticalBar: NotVerticalBar,
	nparallel: nparallel,
	npar: npar,
	nparsl: nparsl,
	npart: npart,
	npolint: npolint,
	npr: npr,
	nprcue: nprcue,
	nprec: nprec,
	npreceq: npreceq,
	npre: npre,
	nrarrc: nrarrc,
	nrarr: nrarr,
	nrArr: nrArr,
	nrarrw: nrarrw,
	nrightarrow: nrightarrow,
	nRightarrow: nRightarrow,
	nrtri: nrtri,
	nrtrie: nrtrie,
	nsc: nsc,
	nsccue: nsccue,
	nsce: nsce,
	Nscr: Nscr,
	nscr: nscr,
	nshortmid: nshortmid,
	nshortparallel: nshortparallel,
	nsim: nsim,
	nsime: nsime,
	nsimeq: nsimeq,
	nsmid: nsmid,
	nspar: nspar,
	nsqsube: nsqsube,
	nsqsupe: nsqsupe,
	nsub: nsub,
	nsubE: nsubE,
	nsube: nsube,
	nsubset: nsubset,
	nsubseteq: nsubseteq,
	nsubseteqq: nsubseteqq,
	nsucc: nsucc,
	nsucceq: nsucceq,
	nsup: nsup,
	nsupE: nsupE,
	nsupe: nsupe,
	nsupset: nsupset,
	nsupseteq: nsupseteq,
	nsupseteqq: nsupseteqq,
	ntgl: ntgl,
	Ntilde: Ntilde,
	ntilde: ntilde,
	ntlg: ntlg,
	ntriangleleft: ntriangleleft,
	ntrianglelefteq: ntrianglelefteq,
	ntriangleright: ntriangleright,
	ntrianglerighteq: ntrianglerighteq,
	Nu: Nu,
	nu: nu,
	num: num,
	numero: numero,
	numsp: numsp,
	nvap: nvap,
	nvdash: nvdash,
	nvDash: nvDash,
	nVdash: nVdash,
	nVDash: nVDash,
	nvge: nvge,
	nvgt: nvgt,
	nvHarr: nvHarr,
	nvinfin: nvinfin,
	nvlArr: nvlArr,
	nvle: nvle,
	nvlt: nvlt,
	nvltrie: nvltrie,
	nvrArr: nvrArr,
	nvrtrie: nvrtrie,
	nvsim: nvsim,
	nwarhk: nwarhk,
	nwarr: nwarr,
	nwArr: nwArr,
	nwarrow: nwarrow,
	nwnear: nwnear,
	Oacute: Oacute,
	oacute: oacute,
	oast: oast,
	Ocirc: Ocirc,
	ocirc: ocirc,
	ocir: ocir,
	Ocy: Ocy,
	ocy: ocy,
	odash: odash,
	Odblac: Odblac,
	odblac: odblac,
	odiv: odiv,
	odot: odot,
	odsold: odsold,
	OElig: OElig,
	oelig: oelig,
	ofcir: ofcir,
	Ofr: Ofr,
	ofr: ofr,
	ogon: ogon,
	Ograve: Ograve,
	ograve: ograve,
	ogt: ogt,
	ohbar: ohbar,
	ohm: ohm,
	oint: oint,
	olarr: olarr,
	olcir: olcir,
	olcross: olcross,
	oline: oline,
	olt: olt,
	Omacr: Omacr,
	omacr: omacr,
	Omega: Omega,
	omega: omega,
	Omicron: Omicron,
	omicron: omicron,
	omid: omid,
	ominus: ominus,
	Oopf: Oopf,
	oopf: oopf,
	opar: opar,
	OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
	OpenCurlyQuote: OpenCurlyQuote,
	operp: operp,
	oplus: oplus,
	orarr: orarr,
	Or: Or,
	or: or,
	ord: ord,
	order: order,
	orderof: orderof,
	ordf: ordf,
	ordm: ordm,
	origof: origof,
	oror: oror,
	orslope: orslope,
	orv: orv,
	oS: oS,
	Oscr: Oscr,
	oscr: oscr,
	Oslash: Oslash,
	oslash: oslash,
	osol: osol,
	Otilde: Otilde,
	otilde: otilde,
	otimesas: otimesas,
	Otimes: Otimes,
	otimes: otimes,
	Ouml: Ouml,
	ouml: ouml,
	ovbar: ovbar,
	OverBar: OverBar,
	OverBrace: OverBrace,
	OverBracket: OverBracket,
	OverParenthesis: OverParenthesis,
	para: para,
	parallel: parallel,
	par: par,
	parsim: parsim,
	parsl: parsl,
	part: part,
	PartialD: PartialD,
	Pcy: Pcy,
	pcy: pcy,
	percnt: percnt,
	period: period,
	permil: permil,
	perp: perp,
	pertenk: pertenk,
	Pfr: Pfr,
	pfr: pfr,
	Phi: Phi,
	phi: phi,
	phiv: phiv,
	phmmat: phmmat,
	phone: phone,
	Pi: Pi,
	pi: pi,
	pitchfork: pitchfork,
	piv: piv,
	planck: planck,
	planckh: planckh,
	plankv: plankv,
	plusacir: plusacir,
	plusb: plusb,
	pluscir: pluscir,
	plus: plus,
	plusdo: plusdo,
	plusdu: plusdu,
	pluse: pluse,
	PlusMinus: PlusMinus,
	plusmn: plusmn,
	plussim: plussim,
	plustwo: plustwo,
	pm: pm,
	Poincareplane: Poincareplane,
	pointint: pointint,
	popf: popf,
	Popf: Popf,
	pound: pound,
	prap: prap,
	Pr: Pr,
	pr: pr,
	prcue: prcue,
	precapprox: precapprox,
	prec: prec,
	preccurlyeq: preccurlyeq,
	Precedes: Precedes,
	PrecedesEqual: PrecedesEqual,
	PrecedesSlantEqual: PrecedesSlantEqual,
	PrecedesTilde: PrecedesTilde,
	preceq: preceq,
	precnapprox: precnapprox,
	precneqq: precneqq,
	precnsim: precnsim,
	pre: pre,
	prE: prE,
	precsim: precsim,
	prime: prime,
	Prime: Prime,
	primes: primes,
	prnap: prnap,
	prnE: prnE,
	prnsim: prnsim,
	prod: prod,
	Product: Product,
	profalar: profalar,
	profline: profline,
	profsurf: profsurf,
	prop: prop,
	Proportional: Proportional,
	Proportion: Proportion,
	propto: propto,
	prsim: prsim,
	prurel: prurel,
	Pscr: Pscr,
	pscr: pscr,
	Psi: Psi,
	psi: psi,
	puncsp: puncsp,
	Qfr: Qfr,
	qfr: qfr,
	qint: qint,
	qopf: qopf,
	Qopf: Qopf,
	qprime: qprime,
	Qscr: Qscr,
	qscr: qscr,
	quaternions: quaternions,
	quatint: quatint,
	quest: quest,
	questeq: questeq,
	quot: quot$1,
	QUOT: QUOT,
	rAarr: rAarr,
	race: race,
	Racute: Racute,
	racute: racute,
	radic: radic,
	raemptyv: raemptyv,
	rang: rang,
	Rang: Rang,
	rangd: rangd,
	range: range,
	rangle: rangle,
	raquo: raquo,
	rarrap: rarrap,
	rarrb: rarrb,
	rarrbfs: rarrbfs,
	rarrc: rarrc,
	rarr: rarr,
	Rarr: Rarr,
	rArr: rArr,
	rarrfs: rarrfs,
	rarrhk: rarrhk,
	rarrlp: rarrlp,
	rarrpl: rarrpl,
	rarrsim: rarrsim,
	Rarrtl: Rarrtl,
	rarrtl: rarrtl,
	rarrw: rarrw,
	ratail: ratail,
	rAtail: rAtail,
	ratio: ratio,
	rationals: rationals,
	rbarr: rbarr,
	rBarr: rBarr,
	RBarr: RBarr,
	rbbrk: rbbrk,
	rbrace: rbrace,
	rbrack: rbrack,
	rbrke: rbrke,
	rbrksld: rbrksld,
	rbrkslu: rbrkslu,
	Rcaron: Rcaron,
	rcaron: rcaron,
	Rcedil: Rcedil,
	rcedil: rcedil,
	rceil: rceil,
	rcub: rcub,
	Rcy: Rcy,
	rcy: rcy,
	rdca: rdca,
	rdldhar: rdldhar,
	rdquo: rdquo,
	rdquor: rdquor,
	rdsh: rdsh,
	real: real,
	realine: realine,
	realpart: realpart,
	reals: reals,
	Re: Re,
	rect: rect,
	reg: reg,
	REG: REG,
	ReverseElement: ReverseElement,
	ReverseEquilibrium: ReverseEquilibrium,
	ReverseUpEquilibrium: ReverseUpEquilibrium,
	rfisht: rfisht,
	rfloor: rfloor,
	rfr: rfr,
	Rfr: Rfr,
	rHar: rHar,
	rhard: rhard,
	rharu: rharu,
	rharul: rharul,
	Rho: Rho,
	rho: rho,
	rhov: rhov,
	RightAngleBracket: RightAngleBracket,
	RightArrowBar: RightArrowBar,
	rightarrow: rightarrow,
	RightArrow: RightArrow,
	Rightarrow: Rightarrow,
	RightArrowLeftArrow: RightArrowLeftArrow,
	rightarrowtail: rightarrowtail,
	RightCeiling: RightCeiling,
	RightDoubleBracket: RightDoubleBracket,
	RightDownTeeVector: RightDownTeeVector,
	RightDownVectorBar: RightDownVectorBar,
	RightDownVector: RightDownVector,
	RightFloor: RightFloor,
	rightharpoondown: rightharpoondown,
	rightharpoonup: rightharpoonup,
	rightleftarrows: rightleftarrows,
	rightleftharpoons: rightleftharpoons,
	rightrightarrows: rightrightarrows,
	rightsquigarrow: rightsquigarrow,
	RightTeeArrow: RightTeeArrow,
	RightTee: RightTee,
	RightTeeVector: RightTeeVector,
	rightthreetimes: rightthreetimes,
	RightTriangleBar: RightTriangleBar,
	RightTriangle: RightTriangle,
	RightTriangleEqual: RightTriangleEqual,
	RightUpDownVector: RightUpDownVector,
	RightUpTeeVector: RightUpTeeVector,
	RightUpVectorBar: RightUpVectorBar,
	RightUpVector: RightUpVector,
	RightVectorBar: RightVectorBar,
	RightVector: RightVector,
	ring: ring,
	risingdotseq: risingdotseq,
	rlarr: rlarr,
	rlhar: rlhar,
	rlm: rlm,
	rmoustache: rmoustache,
	rmoust: rmoust,
	rnmid: rnmid,
	roang: roang,
	roarr: roarr,
	robrk: robrk,
	ropar: ropar,
	ropf: ropf,
	Ropf: Ropf,
	roplus: roplus,
	rotimes: rotimes,
	RoundImplies: RoundImplies,
	rpar: rpar,
	rpargt: rpargt,
	rppolint: rppolint,
	rrarr: rrarr,
	Rrightarrow: Rrightarrow,
	rsaquo: rsaquo,
	rscr: rscr,
	Rscr: Rscr,
	rsh: rsh,
	Rsh: Rsh,
	rsqb: rsqb,
	rsquo: rsquo,
	rsquor: rsquor,
	rthree: rthree,
	rtimes: rtimes,
	rtri: rtri,
	rtrie: rtrie,
	rtrif: rtrif,
	rtriltri: rtriltri,
	RuleDelayed: RuleDelayed,
	ruluhar: ruluhar,
	rx: rx,
	Sacute: Sacute,
	sacute: sacute,
	sbquo: sbquo,
	scap: scap,
	Scaron: Scaron,
	scaron: scaron,
	Sc: Sc,
	sc: sc,
	sccue: sccue,
	sce: sce,
	scE: scE,
	Scedil: Scedil,
	scedil: scedil,
	Scirc: Scirc,
	scirc: scirc,
	scnap: scnap,
	scnE: scnE,
	scnsim: scnsim,
	scpolint: scpolint,
	scsim: scsim,
	Scy: Scy,
	scy: scy,
	sdotb: sdotb,
	sdot: sdot,
	sdote: sdote,
	searhk: searhk,
	searr: searr,
	seArr: seArr,
	searrow: searrow,
	sect: sect,
	semi: semi,
	seswar: seswar,
	setminus: setminus,
	setmn: setmn,
	sext: sext,
	Sfr: Sfr,
	sfr: sfr,
	sfrown: sfrown,
	sharp: sharp,
	SHCHcy: SHCHcy,
	shchcy: shchcy,
	SHcy: SHcy,
	shcy: shcy,
	ShortDownArrow: ShortDownArrow,
	ShortLeftArrow: ShortLeftArrow,
	shortmid: shortmid,
	shortparallel: shortparallel,
	ShortRightArrow: ShortRightArrow,
	ShortUpArrow: ShortUpArrow,
	shy: shy,
	Sigma: Sigma,
	sigma: sigma,
	sigmaf: sigmaf,
	sigmav: sigmav,
	sim: sim,
	simdot: simdot,
	sime: sime,
	simeq: simeq,
	simg: simg,
	simgE: simgE,
	siml: siml,
	simlE: simlE,
	simne: simne,
	simplus: simplus,
	simrarr: simrarr,
	slarr: slarr,
	SmallCircle: SmallCircle,
	smallsetminus: smallsetminus,
	smashp: smashp,
	smeparsl: smeparsl,
	smid: smid,
	smile: smile,
	smt: smt,
	smte: smte,
	smtes: smtes,
	SOFTcy: SOFTcy,
	softcy: softcy,
	solbar: solbar,
	solb: solb,
	sol: sol,
	Sopf: Sopf,
	sopf: sopf,
	spades: spades,
	spadesuit: spadesuit,
	spar: spar,
	sqcap: sqcap,
	sqcaps: sqcaps,
	sqcup: sqcup,
	sqcups: sqcups,
	Sqrt: Sqrt,
	sqsub: sqsub,
	sqsube: sqsube,
	sqsubset: sqsubset,
	sqsubseteq: sqsubseteq,
	sqsup: sqsup,
	sqsupe: sqsupe,
	sqsupset: sqsupset,
	sqsupseteq: sqsupseteq,
	square: square,
	Square: Square,
	SquareIntersection: SquareIntersection,
	SquareSubset: SquareSubset,
	SquareSubsetEqual: SquareSubsetEqual,
	SquareSuperset: SquareSuperset,
	SquareSupersetEqual: SquareSupersetEqual,
	SquareUnion: SquareUnion,
	squarf: squarf,
	squ: squ,
	squf: squf,
	srarr: srarr,
	Sscr: Sscr,
	sscr: sscr,
	ssetmn: ssetmn,
	ssmile: ssmile,
	sstarf: sstarf,
	Star: Star,
	star: star,
	starf: starf,
	straightepsilon: straightepsilon,
	straightphi: straightphi,
	strns: strns,
	sub: sub,
	Sub: Sub,
	subdot: subdot,
	subE: subE,
	sube: sube,
	subedot: subedot,
	submult: submult,
	subnE: subnE,
	subne: subne,
	subplus: subplus,
	subrarr: subrarr,
	subset: subset,
	Subset: Subset,
	subseteq: subseteq,
	subseteqq: subseteqq,
	SubsetEqual: SubsetEqual,
	subsetneq: subsetneq,
	subsetneqq: subsetneqq,
	subsim: subsim,
	subsub: subsub,
	subsup: subsup,
	succapprox: succapprox,
	succ: succ,
	succcurlyeq: succcurlyeq,
	Succeeds: Succeeds,
	SucceedsEqual: SucceedsEqual,
	SucceedsSlantEqual: SucceedsSlantEqual,
	SucceedsTilde: SucceedsTilde,
	succeq: succeq,
	succnapprox: succnapprox,
	succneqq: succneqq,
	succnsim: succnsim,
	succsim: succsim,
	SuchThat: SuchThat,
	sum: sum,
	Sum: Sum,
	sung: sung,
	sup1: sup1,
	sup2: sup2,
	sup3: sup3,
	sup: sup,
	Sup: Sup,
	supdot: supdot,
	supdsub: supdsub,
	supE: supE,
	supe: supe,
	supedot: supedot,
	Superset: Superset,
	SupersetEqual: SupersetEqual,
	suphsol: suphsol,
	suphsub: suphsub,
	suplarr: suplarr,
	supmult: supmult,
	supnE: supnE,
	supne: supne,
	supplus: supplus,
	supset: supset,
	Supset: Supset,
	supseteq: supseteq,
	supseteqq: supseteqq,
	supsetneq: supsetneq,
	supsetneqq: supsetneqq,
	supsim: supsim,
	supsub: supsub,
	supsup: supsup,
	swarhk: swarhk,
	swarr: swarr,
	swArr: swArr,
	swarrow: swarrow,
	swnwar: swnwar,
	szlig: szlig,
	Tab: Tab,
	target: target,
	Tau: Tau,
	tau: tau,
	tbrk: tbrk,
	Tcaron: Tcaron,
	tcaron: tcaron,
	Tcedil: Tcedil,
	tcedil: tcedil,
	Tcy: Tcy,
	tcy: tcy,
	tdot: tdot,
	telrec: telrec,
	Tfr: Tfr,
	tfr: tfr,
	there4: there4,
	therefore: therefore,
	Therefore: Therefore,
	Theta: Theta,
	theta: theta,
	thetasym: thetasym,
	thetav: thetav,
	thickapprox: thickapprox,
	thicksim: thicksim,
	ThickSpace: ThickSpace,
	ThinSpace: ThinSpace,
	thinsp: thinsp,
	thkap: thkap,
	thksim: thksim,
	THORN: THORN,
	thorn: thorn,
	tilde: tilde,
	Tilde: Tilde,
	TildeEqual: TildeEqual,
	TildeFullEqual: TildeFullEqual,
	TildeTilde: TildeTilde,
	timesbar: timesbar,
	timesb: timesb,
	times: times,
	timesd: timesd,
	tint: tint,
	toea: toea,
	topbot: topbot,
	topcir: topcir,
	top: top,
	Topf: Topf,
	topf: topf,
	topfork: topfork,
	tosa: tosa,
	tprime: tprime,
	trade: trade,
	TRADE: TRADE,
	triangle: triangle,
	triangledown: triangledown,
	triangleleft: triangleleft,
	trianglelefteq: trianglelefteq,
	triangleq: triangleq,
	triangleright: triangleright,
	trianglerighteq: trianglerighteq,
	tridot: tridot,
	trie: trie,
	triminus: triminus,
	TripleDot: TripleDot,
	triplus: triplus,
	trisb: trisb,
	tritime: tritime,
	trpezium: trpezium,
	Tscr: Tscr,
	tscr: tscr,
	TScy: TScy,
	tscy: tscy,
	TSHcy: TSHcy,
	tshcy: tshcy,
	Tstrok: Tstrok,
	tstrok: tstrok,
	twixt: twixt,
	twoheadleftarrow: twoheadleftarrow,
	twoheadrightarrow: twoheadrightarrow,
	Uacute: Uacute,
	uacute: uacute,
	uarr: uarr,
	Uarr: Uarr,
	uArr: uArr,
	Uarrocir: Uarrocir,
	Ubrcy: Ubrcy,
	ubrcy: ubrcy,
	Ubreve: Ubreve,
	ubreve: ubreve,
	Ucirc: Ucirc,
	ucirc: ucirc,
	Ucy: Ucy,
	ucy: ucy,
	udarr: udarr,
	Udblac: Udblac,
	udblac: udblac,
	udhar: udhar,
	ufisht: ufisht,
	Ufr: Ufr,
	ufr: ufr,
	Ugrave: Ugrave,
	ugrave: ugrave,
	uHar: uHar,
	uharl: uharl,
	uharr: uharr,
	uhblk: uhblk,
	ulcorn: ulcorn,
	ulcorner: ulcorner,
	ulcrop: ulcrop,
	ultri: ultri,
	Umacr: Umacr,
	umacr: umacr,
	uml: uml,
	UnderBar: UnderBar,
	UnderBrace: UnderBrace,
	UnderBracket: UnderBracket,
	UnderParenthesis: UnderParenthesis,
	Union: Union,
	UnionPlus: UnionPlus,
	Uogon: Uogon,
	uogon: uogon,
	Uopf: Uopf,
	uopf: uopf,
	UpArrowBar: UpArrowBar,
	uparrow: uparrow,
	UpArrow: UpArrow,
	Uparrow: Uparrow,
	UpArrowDownArrow: UpArrowDownArrow,
	updownarrow: updownarrow,
	UpDownArrow: UpDownArrow,
	Updownarrow: Updownarrow,
	UpEquilibrium: UpEquilibrium,
	upharpoonleft: upharpoonleft,
	upharpoonright: upharpoonright,
	uplus: uplus,
	UpperLeftArrow: UpperLeftArrow,
	UpperRightArrow: UpperRightArrow,
	upsi: upsi,
	Upsi: Upsi,
	upsih: upsih,
	Upsilon: Upsilon,
	upsilon: upsilon,
	UpTeeArrow: UpTeeArrow,
	UpTee: UpTee,
	upuparrows: upuparrows,
	urcorn: urcorn,
	urcorner: urcorner,
	urcrop: urcrop,
	Uring: Uring,
	uring: uring,
	urtri: urtri,
	Uscr: Uscr,
	uscr: uscr,
	utdot: utdot,
	Utilde: Utilde,
	utilde: utilde,
	utri: utri,
	utrif: utrif,
	uuarr: uuarr,
	Uuml: Uuml,
	uuml: uuml,
	uwangle: uwangle,
	vangrt: vangrt,
	varepsilon: varepsilon,
	varkappa: varkappa,
	varnothing: varnothing,
	varphi: varphi,
	varpi: varpi,
	varpropto: varpropto,
	varr: varr,
	vArr: vArr,
	varrho: varrho,
	varsigma: varsigma,
	varsubsetneq: varsubsetneq,
	varsubsetneqq: varsubsetneqq,
	varsupsetneq: varsupsetneq,
	varsupsetneqq: varsupsetneqq,
	vartheta: vartheta,
	vartriangleleft: vartriangleleft,
	vartriangleright: vartriangleright,
	vBar: vBar,
	Vbar: Vbar,
	vBarv: vBarv,
	Vcy: Vcy,
	vcy: vcy,
	vdash: vdash,
	vDash: vDash,
	Vdash: Vdash,
	VDash: VDash,
	Vdashl: Vdashl,
	veebar: veebar,
	vee: vee,
	Vee: Vee,
	veeeq: veeeq,
	vellip: vellip,
	verbar: verbar,
	Verbar: Verbar,
	vert: vert,
	Vert: Vert,
	VerticalBar: VerticalBar,
	VerticalLine: VerticalLine,
	VerticalSeparator: VerticalSeparator,
	VerticalTilde: VerticalTilde,
	VeryThinSpace: VeryThinSpace,
	Vfr: Vfr,
	vfr: vfr,
	vltri: vltri,
	vnsub: vnsub,
	vnsup: vnsup,
	Vopf: Vopf,
	vopf: vopf,
	vprop: vprop,
	vrtri: vrtri,
	Vscr: Vscr,
	vscr: vscr,
	vsubnE: vsubnE,
	vsubne: vsubne,
	vsupnE: vsupnE,
	vsupne: vsupne,
	Vvdash: Vvdash,
	vzigzag: vzigzag,
	Wcirc: Wcirc,
	wcirc: wcirc,
	wedbar: wedbar,
	wedge: wedge,
	Wedge: Wedge,
	wedgeq: wedgeq,
	weierp: weierp,
	Wfr: Wfr,
	wfr: wfr,
	Wopf: Wopf,
	wopf: wopf,
	wp: wp,
	wr: wr,
	wreath: wreath,
	Wscr: Wscr,
	wscr: wscr,
	xcap: xcap,
	xcirc: xcirc,
	xcup: xcup,
	xdtri: xdtri,
	Xfr: Xfr,
	xfr: xfr,
	xharr: xharr,
	xhArr: xhArr,
	Xi: Xi,
	xi: xi,
	xlarr: xlarr,
	xlArr: xlArr,
	xmap: xmap,
	xnis: xnis,
	xodot: xodot,
	Xopf: Xopf,
	xopf: xopf,
	xoplus: xoplus,
	xotime: xotime,
	xrarr: xrarr,
	xrArr: xrArr,
	Xscr: Xscr,
	xscr: xscr,
	xsqcup: xsqcup,
	xuplus: xuplus,
	xutri: xutri,
	xvee: xvee,
	xwedge: xwedge,
	Yacute: Yacute,
	yacute: yacute,
	YAcy: YAcy,
	yacy: yacy,
	Ycirc: Ycirc,
	ycirc: ycirc,
	Ycy: Ycy,
	ycy: ycy,
	yen: yen,
	Yfr: Yfr,
	yfr: yfr,
	YIcy: YIcy,
	yicy: yicy,
	Yopf: Yopf,
	yopf: yopf,
	Yscr: Yscr,
	yscr: yscr,
	YUcy: YUcy,
	yucy: yucy,
	yuml: yuml,
	Yuml: Yuml,
	Zacute: Zacute,
	zacute: zacute,
	Zcaron: Zcaron,
	zcaron: zcaron,
	Zcy: Zcy,
	zcy: zcy,
	Zdot: Zdot,
	zdot: zdot,
	zeetrf: zeetrf,
	ZeroWidthSpace: ZeroWidthSpace,
	Zeta: Zeta,
	zeta: zeta,
	zfr: zfr,
	Zfr: Zfr,
	ZHcy: ZHcy,
	zhcy: zhcy,
	zigrarr: zigrarr,
	zopf: zopf,
	Zopf: Zopf,
	Zscr: Zscr,
	zscr: zscr,
	zwj: zwj,
	zwnj: zwnj
};

var entities$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Aacute: Aacute,
	aacute: aacute,
	Abreve: Abreve,
	abreve: abreve,
	ac: ac,
	acd: acd,
	acE: acE,
	Acirc: Acirc,
	acirc: acirc,
	acute: acute,
	Acy: Acy,
	acy: acy,
	AElig: AElig,
	aelig: aelig,
	af: af,
	Afr: Afr,
	afr: afr,
	Agrave: Agrave,
	agrave: agrave,
	alefsym: alefsym,
	aleph: aleph,
	Alpha: Alpha,
	alpha: alpha,
	Amacr: Amacr,
	amacr: amacr,
	amalg: amalg,
	amp: amp$1,
	AMP: AMP,
	andand: andand,
	And: And,
	and: and,
	andd: andd,
	andslope: andslope,
	andv: andv,
	ang: ang,
	ange: ange,
	angle: angle,
	angmsdaa: angmsdaa,
	angmsdab: angmsdab,
	angmsdac: angmsdac,
	angmsdad: angmsdad,
	angmsdae: angmsdae,
	angmsdaf: angmsdaf,
	angmsdag: angmsdag,
	angmsdah: angmsdah,
	angmsd: angmsd,
	angrt: angrt,
	angrtvb: angrtvb,
	angrtvbd: angrtvbd,
	angsph: angsph,
	angst: angst,
	angzarr: angzarr,
	Aogon: Aogon,
	aogon: aogon,
	Aopf: Aopf,
	aopf: aopf,
	apacir: apacir,
	ap: ap,
	apE: apE,
	ape: ape,
	apid: apid,
	apos: apos$1,
	ApplyFunction: ApplyFunction,
	approx: approx,
	approxeq: approxeq,
	Aring: Aring,
	aring: aring,
	Ascr: Ascr,
	ascr: ascr,
	Assign: Assign,
	ast: ast,
	asymp: asymp,
	asympeq: asympeq,
	Atilde: Atilde,
	atilde: atilde,
	Auml: Auml,
	auml: auml,
	awconint: awconint,
	awint: awint,
	backcong: backcong,
	backepsilon: backepsilon,
	backprime: backprime,
	backsim: backsim,
	backsimeq: backsimeq,
	Backslash: Backslash,
	Barv: Barv,
	barvee: barvee,
	barwed: barwed,
	Barwed: Barwed,
	barwedge: barwedge,
	bbrk: bbrk,
	bbrktbrk: bbrktbrk,
	bcong: bcong,
	Bcy: Bcy,
	bcy: bcy,
	bdquo: bdquo,
	becaus: becaus,
	because: because,
	Because: Because,
	bemptyv: bemptyv,
	bepsi: bepsi,
	bernou: bernou,
	Bernoullis: Bernoullis,
	Beta: Beta,
	beta: beta,
	beth: beth,
	between: between,
	Bfr: Bfr,
	bfr: bfr,
	bigcap: bigcap,
	bigcirc: bigcirc,
	bigcup: bigcup,
	bigodot: bigodot,
	bigoplus: bigoplus,
	bigotimes: bigotimes,
	bigsqcup: bigsqcup,
	bigstar: bigstar,
	bigtriangledown: bigtriangledown,
	bigtriangleup: bigtriangleup,
	biguplus: biguplus,
	bigvee: bigvee,
	bigwedge: bigwedge,
	bkarow: bkarow,
	blacklozenge: blacklozenge,
	blacksquare: blacksquare,
	blacktriangle: blacktriangle,
	blacktriangledown: blacktriangledown,
	blacktriangleleft: blacktriangleleft,
	blacktriangleright: blacktriangleright,
	blank: blank,
	blk12: blk12,
	blk14: blk14,
	blk34: blk34,
	block: block,
	bne: bne,
	bnequiv: bnequiv,
	bNot: bNot,
	bnot: bnot,
	Bopf: Bopf,
	bopf: bopf,
	bot: bot,
	bottom: bottom,
	bowtie: bowtie,
	boxbox: boxbox,
	boxdl: boxdl,
	boxdL: boxdL,
	boxDl: boxDl,
	boxDL: boxDL,
	boxdr: boxdr,
	boxdR: boxdR,
	boxDr: boxDr,
	boxDR: boxDR,
	boxh: boxh,
	boxH: boxH,
	boxhd: boxhd,
	boxHd: boxHd,
	boxhD: boxhD,
	boxHD: boxHD,
	boxhu: boxhu,
	boxHu: boxHu,
	boxhU: boxhU,
	boxHU: boxHU,
	boxminus: boxminus,
	boxplus: boxplus,
	boxtimes: boxtimes,
	boxul: boxul,
	boxuL: boxuL,
	boxUl: boxUl,
	boxUL: boxUL,
	boxur: boxur,
	boxuR: boxuR,
	boxUr: boxUr,
	boxUR: boxUR,
	boxv: boxv,
	boxV: boxV,
	boxvh: boxvh,
	boxvH: boxvH,
	boxVh: boxVh,
	boxVH: boxVH,
	boxvl: boxvl,
	boxvL: boxvL,
	boxVl: boxVl,
	boxVL: boxVL,
	boxvr: boxvr,
	boxvR: boxvR,
	boxVr: boxVr,
	boxVR: boxVR,
	bprime: bprime,
	breve: breve,
	Breve: Breve,
	brvbar: brvbar,
	bscr: bscr,
	Bscr: Bscr,
	bsemi: bsemi,
	bsim: bsim,
	bsime: bsime,
	bsolb: bsolb,
	bsol: bsol,
	bsolhsub: bsolhsub,
	bull: bull,
	bullet: bullet,
	bump: bump,
	bumpE: bumpE,
	bumpe: bumpe,
	Bumpeq: Bumpeq,
	bumpeq: bumpeq,
	Cacute: Cacute,
	cacute: cacute,
	capand: capand,
	capbrcup: capbrcup,
	capcap: capcap,
	cap: cap,
	Cap: Cap,
	capcup: capcup,
	capdot: capdot,
	CapitalDifferentialD: CapitalDifferentialD,
	caps: caps,
	caret: caret,
	caron: caron,
	Cayleys: Cayleys,
	ccaps: ccaps,
	Ccaron: Ccaron,
	ccaron: ccaron,
	Ccedil: Ccedil,
	ccedil: ccedil,
	Ccirc: Ccirc,
	ccirc: ccirc,
	Cconint: Cconint,
	ccups: ccups,
	ccupssm: ccupssm,
	Cdot: Cdot,
	cdot: cdot,
	cedil: cedil,
	Cedilla: Cedilla,
	cemptyv: cemptyv,
	cent: cent,
	centerdot: centerdot,
	CenterDot: CenterDot,
	cfr: cfr,
	Cfr: Cfr,
	CHcy: CHcy,
	chcy: chcy,
	check: check,
	checkmark: checkmark,
	Chi: Chi,
	chi: chi,
	circ: circ,
	circeq: circeq,
	circlearrowleft: circlearrowleft,
	circlearrowright: circlearrowright,
	circledast: circledast,
	circledcirc: circledcirc,
	circleddash: circleddash,
	CircleDot: CircleDot,
	circledR: circledR,
	circledS: circledS,
	CircleMinus: CircleMinus,
	CirclePlus: CirclePlus,
	CircleTimes: CircleTimes,
	cir: cir,
	cirE: cirE,
	cire: cire,
	cirfnint: cirfnint,
	cirmid: cirmid,
	cirscir: cirscir,
	ClockwiseContourIntegral: ClockwiseContourIntegral,
	CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
	CloseCurlyQuote: CloseCurlyQuote,
	clubs: clubs,
	clubsuit: clubsuit,
	colon: colon,
	Colon: Colon,
	Colone: Colone,
	colone: colone,
	coloneq: coloneq,
	comma: comma,
	commat: commat,
	comp: comp,
	compfn: compfn,
	complement: complement,
	complexes: complexes,
	cong: cong,
	congdot: congdot,
	Congruent: Congruent,
	conint: conint,
	Conint: Conint,
	ContourIntegral: ContourIntegral,
	copf: copf,
	Copf: Copf,
	coprod: coprod,
	Coproduct: Coproduct,
	copy: copy,
	COPY: COPY,
	copysr: copysr,
	CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
	crarr: crarr,
	cross: cross,
	Cross: Cross,
	Cscr: Cscr,
	cscr: cscr,
	csub: csub,
	csube: csube,
	csup: csup,
	csupe: csupe,
	ctdot: ctdot,
	cudarrl: cudarrl,
	cudarrr: cudarrr,
	cuepr: cuepr,
	cuesc: cuesc,
	cularr: cularr,
	cularrp: cularrp,
	cupbrcap: cupbrcap,
	cupcap: cupcap,
	CupCap: CupCap,
	cup: cup,
	Cup: Cup,
	cupcup: cupcup,
	cupdot: cupdot,
	cupor: cupor,
	cups: cups,
	curarr: curarr,
	curarrm: curarrm,
	curlyeqprec: curlyeqprec,
	curlyeqsucc: curlyeqsucc,
	curlyvee: curlyvee,
	curlywedge: curlywedge,
	curren: curren,
	curvearrowleft: curvearrowleft,
	curvearrowright: curvearrowright,
	cuvee: cuvee,
	cuwed: cuwed,
	cwconint: cwconint,
	cwint: cwint,
	cylcty: cylcty,
	dagger: dagger,
	Dagger: Dagger,
	daleth: daleth,
	darr: darr,
	Darr: Darr,
	dArr: dArr,
	dash: dash,
	Dashv: Dashv,
	dashv: dashv,
	dbkarow: dbkarow,
	dblac: dblac,
	Dcaron: Dcaron,
	dcaron: dcaron,
	Dcy: Dcy,
	dcy: dcy,
	ddagger: ddagger,
	ddarr: ddarr,
	DD: DD,
	dd: dd,
	DDotrahd: DDotrahd,
	ddotseq: ddotseq,
	deg: deg,
	Del: Del,
	Delta: Delta,
	delta: delta,
	demptyv: demptyv,
	dfisht: dfisht,
	Dfr: Dfr,
	dfr: dfr,
	dHar: dHar,
	dharl: dharl,
	dharr: dharr,
	DiacriticalAcute: DiacriticalAcute,
	DiacriticalDot: DiacriticalDot,
	DiacriticalDoubleAcute: DiacriticalDoubleAcute,
	DiacriticalGrave: DiacriticalGrave,
	DiacriticalTilde: DiacriticalTilde,
	diam: diam,
	diamond: diamond,
	Diamond: Diamond,
	diamondsuit: diamondsuit,
	diams: diams,
	die: die,
	DifferentialD: DifferentialD,
	digamma: digamma,
	disin: disin,
	div: div,
	divide: divide,
	divideontimes: divideontimes,
	divonx: divonx,
	DJcy: DJcy,
	djcy: djcy,
	dlcorn: dlcorn,
	dlcrop: dlcrop,
	dollar: dollar,
	Dopf: Dopf,
	dopf: dopf,
	Dot: Dot,
	dot: dot,
	DotDot: DotDot,
	doteq: doteq,
	doteqdot: doteqdot,
	DotEqual: DotEqual,
	dotminus: dotminus,
	dotplus: dotplus,
	dotsquare: dotsquare,
	doublebarwedge: doublebarwedge,
	DoubleContourIntegral: DoubleContourIntegral,
	DoubleDot: DoubleDot,
	DoubleDownArrow: DoubleDownArrow,
	DoubleLeftArrow: DoubleLeftArrow,
	DoubleLeftRightArrow: DoubleLeftRightArrow,
	DoubleLeftTee: DoubleLeftTee,
	DoubleLongLeftArrow: DoubleLongLeftArrow,
	DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
	DoubleLongRightArrow: DoubleLongRightArrow,
	DoubleRightArrow: DoubleRightArrow,
	DoubleRightTee: DoubleRightTee,
	DoubleUpArrow: DoubleUpArrow,
	DoubleUpDownArrow: DoubleUpDownArrow,
	DoubleVerticalBar: DoubleVerticalBar,
	DownArrowBar: DownArrowBar,
	downarrow: downarrow,
	DownArrow: DownArrow,
	Downarrow: Downarrow,
	DownArrowUpArrow: DownArrowUpArrow,
	DownBreve: DownBreve,
	downdownarrows: downdownarrows,
	downharpoonleft: downharpoonleft,
	downharpoonright: downharpoonright,
	DownLeftRightVector: DownLeftRightVector,
	DownLeftTeeVector: DownLeftTeeVector,
	DownLeftVectorBar: DownLeftVectorBar,
	DownLeftVector: DownLeftVector,
	DownRightTeeVector: DownRightTeeVector,
	DownRightVectorBar: DownRightVectorBar,
	DownRightVector: DownRightVector,
	DownTeeArrow: DownTeeArrow,
	DownTee: DownTee,
	drbkarow: drbkarow,
	drcorn: drcorn,
	drcrop: drcrop,
	Dscr: Dscr,
	dscr: dscr,
	DScy: DScy,
	dscy: dscy,
	dsol: dsol,
	Dstrok: Dstrok,
	dstrok: dstrok,
	dtdot: dtdot,
	dtri: dtri,
	dtrif: dtrif,
	duarr: duarr,
	duhar: duhar,
	dwangle: dwangle,
	DZcy: DZcy,
	dzcy: dzcy,
	dzigrarr: dzigrarr,
	Eacute: Eacute,
	eacute: eacute,
	easter: easter,
	Ecaron: Ecaron,
	ecaron: ecaron,
	Ecirc: Ecirc,
	ecirc: ecirc,
	ecir: ecir,
	ecolon: ecolon,
	Ecy: Ecy,
	ecy: ecy,
	eDDot: eDDot,
	Edot: Edot,
	edot: edot,
	eDot: eDot,
	ee: ee,
	efDot: efDot,
	Efr: Efr,
	efr: efr,
	eg: eg,
	Egrave: Egrave,
	egrave: egrave,
	egs: egs,
	egsdot: egsdot,
	el: el,
	Element: Element,
	elinters: elinters,
	ell: ell,
	els: els,
	elsdot: elsdot,
	Emacr: Emacr,
	emacr: emacr,
	empty: empty,
	emptyset: emptyset,
	EmptySmallSquare: EmptySmallSquare,
	emptyv: emptyv,
	EmptyVerySmallSquare: EmptyVerySmallSquare,
	emsp13: emsp13,
	emsp14: emsp14,
	emsp: emsp,
	ENG: ENG,
	eng: eng,
	ensp: ensp,
	Eogon: Eogon,
	eogon: eogon,
	Eopf: Eopf,
	eopf: eopf,
	epar: epar,
	eparsl: eparsl,
	eplus: eplus,
	epsi: epsi,
	Epsilon: Epsilon,
	epsilon: epsilon,
	epsiv: epsiv,
	eqcirc: eqcirc,
	eqcolon: eqcolon,
	eqsim: eqsim,
	eqslantgtr: eqslantgtr,
	eqslantless: eqslantless,
	Equal: Equal,
	equals: equals,
	EqualTilde: EqualTilde,
	equest: equest,
	Equilibrium: Equilibrium,
	equiv: equiv,
	equivDD: equivDD,
	eqvparsl: eqvparsl,
	erarr: erarr,
	erDot: erDot,
	escr: escr,
	Escr: Escr,
	esdot: esdot,
	Esim: Esim,
	esim: esim,
	Eta: Eta,
	eta: eta,
	ETH: ETH,
	eth: eth,
	Euml: Euml,
	euml: euml,
	euro: euro,
	excl: excl,
	exist: exist,
	Exists: Exists,
	expectation: expectation,
	exponentiale: exponentiale,
	ExponentialE: ExponentialE,
	fallingdotseq: fallingdotseq,
	Fcy: Fcy,
	fcy: fcy,
	female: female,
	ffilig: ffilig,
	fflig: fflig,
	ffllig: ffllig,
	Ffr: Ffr,
	ffr: ffr,
	filig: filig,
	FilledSmallSquare: FilledSmallSquare,
	FilledVerySmallSquare: FilledVerySmallSquare,
	fjlig: fjlig,
	flat: flat,
	fllig: fllig,
	fltns: fltns,
	fnof: fnof,
	Fopf: Fopf,
	fopf: fopf,
	forall: forall,
	ForAll: ForAll,
	fork: fork,
	forkv: forkv,
	Fouriertrf: Fouriertrf,
	fpartint: fpartint,
	frac12: frac12,
	frac13: frac13,
	frac14: frac14,
	frac15: frac15,
	frac16: frac16,
	frac18: frac18,
	frac23: frac23,
	frac25: frac25,
	frac34: frac34,
	frac35: frac35,
	frac38: frac38,
	frac45: frac45,
	frac56: frac56,
	frac58: frac58,
	frac78: frac78,
	frasl: frasl,
	frown: frown,
	fscr: fscr,
	Fscr: Fscr,
	gacute: gacute,
	Gamma: Gamma,
	gamma: gamma,
	Gammad: Gammad,
	gammad: gammad,
	gap: gap,
	Gbreve: Gbreve,
	gbreve: gbreve,
	Gcedil: Gcedil,
	Gcirc: Gcirc,
	gcirc: gcirc,
	Gcy: Gcy,
	gcy: gcy,
	Gdot: Gdot,
	gdot: gdot,
	ge: ge,
	gE: gE,
	gEl: gEl,
	gel: gel,
	geq: geq,
	geqq: geqq,
	geqslant: geqslant,
	gescc: gescc,
	ges: ges,
	gesdot: gesdot,
	gesdoto: gesdoto,
	gesdotol: gesdotol,
	gesl: gesl,
	gesles: gesles,
	Gfr: Gfr,
	gfr: gfr,
	gg: gg,
	Gg: Gg,
	ggg: ggg,
	gimel: gimel,
	GJcy: GJcy,
	gjcy: gjcy,
	gla: gla,
	gl: gl,
	glE: glE,
	glj: glj,
	gnap: gnap,
	gnapprox: gnapprox,
	gne: gne,
	gnE: gnE,
	gneq: gneq,
	gneqq: gneqq,
	gnsim: gnsim,
	Gopf: Gopf,
	gopf: gopf,
	grave: grave,
	GreaterEqual: GreaterEqual,
	GreaterEqualLess: GreaterEqualLess,
	GreaterFullEqual: GreaterFullEqual,
	GreaterGreater: GreaterGreater,
	GreaterLess: GreaterLess,
	GreaterSlantEqual: GreaterSlantEqual,
	GreaterTilde: GreaterTilde,
	Gscr: Gscr,
	gscr: gscr,
	gsim: gsim,
	gsime: gsime,
	gsiml: gsiml,
	gtcc: gtcc,
	gtcir: gtcir,
	gt: gt$1,
	GT: GT,
	Gt: Gt,
	gtdot: gtdot,
	gtlPar: gtlPar,
	gtquest: gtquest,
	gtrapprox: gtrapprox,
	gtrarr: gtrarr,
	gtrdot: gtrdot,
	gtreqless: gtreqless,
	gtreqqless: gtreqqless,
	gtrless: gtrless,
	gtrsim: gtrsim,
	gvertneqq: gvertneqq,
	gvnE: gvnE,
	Hacek: Hacek,
	hairsp: hairsp,
	half: half,
	hamilt: hamilt,
	HARDcy: HARDcy,
	hardcy: hardcy,
	harrcir: harrcir,
	harr: harr,
	hArr: hArr,
	harrw: harrw,
	Hat: Hat,
	hbar: hbar,
	Hcirc: Hcirc,
	hcirc: hcirc,
	hearts: hearts,
	heartsuit: heartsuit,
	hellip: hellip,
	hercon: hercon,
	hfr: hfr,
	Hfr: Hfr,
	HilbertSpace: HilbertSpace,
	hksearow: hksearow,
	hkswarow: hkswarow,
	hoarr: hoarr,
	homtht: homtht,
	hookleftarrow: hookleftarrow,
	hookrightarrow: hookrightarrow,
	hopf: hopf,
	Hopf: Hopf,
	horbar: horbar,
	HorizontalLine: HorizontalLine,
	hscr: hscr,
	Hscr: Hscr,
	hslash: hslash,
	Hstrok: Hstrok,
	hstrok: hstrok,
	HumpDownHump: HumpDownHump,
	HumpEqual: HumpEqual,
	hybull: hybull,
	hyphen: hyphen,
	Iacute: Iacute,
	iacute: iacute,
	ic: ic,
	Icirc: Icirc,
	icirc: icirc,
	Icy: Icy,
	icy: icy,
	Idot: Idot,
	IEcy: IEcy,
	iecy: iecy,
	iexcl: iexcl,
	iff: iff,
	ifr: ifr,
	Ifr: Ifr,
	Igrave: Igrave,
	igrave: igrave,
	ii: ii,
	iiiint: iiiint,
	iiint: iiint,
	iinfin: iinfin,
	iiota: iiota,
	IJlig: IJlig,
	ijlig: ijlig,
	Imacr: Imacr,
	imacr: imacr,
	image: image,
	ImaginaryI: ImaginaryI,
	imagline: imagline,
	imagpart: imagpart,
	imath: imath,
	Im: Im,
	imof: imof,
	imped: imped,
	Implies: Implies,
	incare: incare,
	infin: infin,
	infintie: infintie,
	inodot: inodot,
	intcal: intcal,
	int: int,
	Int: Int,
	integers: integers,
	Integral: Integral,
	intercal: intercal,
	Intersection: Intersection,
	intlarhk: intlarhk,
	intprod: intprod,
	InvisibleComma: InvisibleComma,
	InvisibleTimes: InvisibleTimes,
	IOcy: IOcy,
	iocy: iocy,
	Iogon: Iogon,
	iogon: iogon,
	Iopf: Iopf,
	iopf: iopf,
	Iota: Iota,
	iota: iota,
	iprod: iprod,
	iquest: iquest,
	iscr: iscr,
	Iscr: Iscr,
	isin: isin,
	isindot: isindot,
	isinE: isinE,
	isins: isins,
	isinsv: isinsv,
	isinv: isinv,
	it: it,
	Itilde: Itilde,
	itilde: itilde,
	Iukcy: Iukcy,
	iukcy: iukcy,
	Iuml: Iuml,
	iuml: iuml,
	Jcirc: Jcirc,
	jcirc: jcirc,
	Jcy: Jcy,
	jcy: jcy,
	Jfr: Jfr,
	jfr: jfr,
	jmath: jmath,
	Jopf: Jopf,
	jopf: jopf,
	Jscr: Jscr,
	jscr: jscr,
	Jsercy: Jsercy,
	jsercy: jsercy,
	Jukcy: Jukcy,
	jukcy: jukcy,
	Kappa: Kappa,
	kappa: kappa,
	kappav: kappav,
	Kcedil: Kcedil,
	kcedil: kcedil,
	Kcy: Kcy,
	kcy: kcy,
	Kfr: Kfr,
	kfr: kfr,
	kgreen: kgreen,
	KHcy: KHcy,
	khcy: khcy,
	KJcy: KJcy,
	kjcy: kjcy,
	Kopf: Kopf,
	kopf: kopf,
	Kscr: Kscr,
	kscr: kscr,
	lAarr: lAarr,
	Lacute: Lacute,
	lacute: lacute,
	laemptyv: laemptyv,
	lagran: lagran,
	Lambda: Lambda,
	lambda: lambda,
	lang: lang,
	Lang: Lang,
	langd: langd,
	langle: langle,
	lap: lap,
	Laplacetrf: Laplacetrf,
	laquo: laquo,
	larrb: larrb,
	larrbfs: larrbfs,
	larr: larr,
	Larr: Larr,
	lArr: lArr,
	larrfs: larrfs,
	larrhk: larrhk,
	larrlp: larrlp,
	larrpl: larrpl,
	larrsim: larrsim,
	larrtl: larrtl,
	latail: latail,
	lAtail: lAtail,
	lat: lat,
	late: late,
	lates: lates,
	lbarr: lbarr,
	lBarr: lBarr,
	lbbrk: lbbrk,
	lbrace: lbrace,
	lbrack: lbrack,
	lbrke: lbrke,
	lbrksld: lbrksld,
	lbrkslu: lbrkslu,
	Lcaron: Lcaron,
	lcaron: lcaron,
	Lcedil: Lcedil,
	lcedil: lcedil,
	lceil: lceil,
	lcub: lcub,
	Lcy: Lcy,
	lcy: lcy,
	ldca: ldca,
	ldquo: ldquo,
	ldquor: ldquor,
	ldrdhar: ldrdhar,
	ldrushar: ldrushar,
	ldsh: ldsh,
	le: le,
	lE: lE,
	LeftAngleBracket: LeftAngleBracket,
	LeftArrowBar: LeftArrowBar,
	leftarrow: leftarrow,
	LeftArrow: LeftArrow,
	Leftarrow: Leftarrow,
	LeftArrowRightArrow: LeftArrowRightArrow,
	leftarrowtail: leftarrowtail,
	LeftCeiling: LeftCeiling,
	LeftDoubleBracket: LeftDoubleBracket,
	LeftDownTeeVector: LeftDownTeeVector,
	LeftDownVectorBar: LeftDownVectorBar,
	LeftDownVector: LeftDownVector,
	LeftFloor: LeftFloor,
	leftharpoondown: leftharpoondown,
	leftharpoonup: leftharpoonup,
	leftleftarrows: leftleftarrows,
	leftrightarrow: leftrightarrow,
	LeftRightArrow: LeftRightArrow,
	Leftrightarrow: Leftrightarrow,
	leftrightarrows: leftrightarrows,
	leftrightharpoons: leftrightharpoons,
	leftrightsquigarrow: leftrightsquigarrow,
	LeftRightVector: LeftRightVector,
	LeftTeeArrow: LeftTeeArrow,
	LeftTee: LeftTee,
	LeftTeeVector: LeftTeeVector,
	leftthreetimes: leftthreetimes,
	LeftTriangleBar: LeftTriangleBar,
	LeftTriangle: LeftTriangle,
	LeftTriangleEqual: LeftTriangleEqual,
	LeftUpDownVector: LeftUpDownVector,
	LeftUpTeeVector: LeftUpTeeVector,
	LeftUpVectorBar: LeftUpVectorBar,
	LeftUpVector: LeftUpVector,
	LeftVectorBar: LeftVectorBar,
	LeftVector: LeftVector,
	lEg: lEg,
	leg: leg,
	leq: leq,
	leqq: leqq,
	leqslant: leqslant,
	lescc: lescc,
	les: les,
	lesdot: lesdot,
	lesdoto: lesdoto,
	lesdotor: lesdotor,
	lesg: lesg,
	lesges: lesges,
	lessapprox: lessapprox,
	lessdot: lessdot,
	lesseqgtr: lesseqgtr,
	lesseqqgtr: lesseqqgtr,
	LessEqualGreater: LessEqualGreater,
	LessFullEqual: LessFullEqual,
	LessGreater: LessGreater,
	lessgtr: lessgtr,
	LessLess: LessLess,
	lesssim: lesssim,
	LessSlantEqual: LessSlantEqual,
	LessTilde: LessTilde,
	lfisht: lfisht,
	lfloor: lfloor,
	Lfr: Lfr,
	lfr: lfr,
	lg: lg,
	lgE: lgE,
	lHar: lHar,
	lhard: lhard,
	lharu: lharu,
	lharul: lharul,
	lhblk: lhblk,
	LJcy: LJcy,
	ljcy: ljcy,
	llarr: llarr,
	ll: ll,
	Ll: Ll,
	llcorner: llcorner,
	Lleftarrow: Lleftarrow,
	llhard: llhard,
	lltri: lltri,
	Lmidot: Lmidot,
	lmidot: lmidot,
	lmoustache: lmoustache,
	lmoust: lmoust,
	lnap: lnap,
	lnapprox: lnapprox,
	lne: lne,
	lnE: lnE,
	lneq: lneq,
	lneqq: lneqq,
	lnsim: lnsim,
	loang: loang,
	loarr: loarr,
	lobrk: lobrk,
	longleftarrow: longleftarrow,
	LongLeftArrow: LongLeftArrow,
	Longleftarrow: Longleftarrow,
	longleftrightarrow: longleftrightarrow,
	LongLeftRightArrow: LongLeftRightArrow,
	Longleftrightarrow: Longleftrightarrow,
	longmapsto: longmapsto,
	longrightarrow: longrightarrow,
	LongRightArrow: LongRightArrow,
	Longrightarrow: Longrightarrow,
	looparrowleft: looparrowleft,
	looparrowright: looparrowright,
	lopar: lopar,
	Lopf: Lopf,
	lopf: lopf,
	loplus: loplus,
	lotimes: lotimes,
	lowast: lowast,
	lowbar: lowbar,
	LowerLeftArrow: LowerLeftArrow,
	LowerRightArrow: LowerRightArrow,
	loz: loz,
	lozenge: lozenge,
	lozf: lozf,
	lpar: lpar,
	lparlt: lparlt,
	lrarr: lrarr,
	lrcorner: lrcorner,
	lrhar: lrhar,
	lrhard: lrhard,
	lrm: lrm,
	lrtri: lrtri,
	lsaquo: lsaquo,
	lscr: lscr,
	Lscr: Lscr,
	lsh: lsh,
	Lsh: Lsh,
	lsim: lsim,
	lsime: lsime,
	lsimg: lsimg,
	lsqb: lsqb,
	lsquo: lsquo,
	lsquor: lsquor,
	Lstrok: Lstrok,
	lstrok: lstrok,
	ltcc: ltcc,
	ltcir: ltcir,
	lt: lt$1,
	LT: LT,
	Lt: Lt,
	ltdot: ltdot,
	lthree: lthree,
	ltimes: ltimes,
	ltlarr: ltlarr,
	ltquest: ltquest,
	ltri: ltri,
	ltrie: ltrie,
	ltrif: ltrif,
	ltrPar: ltrPar,
	lurdshar: lurdshar,
	luruhar: luruhar,
	lvertneqq: lvertneqq,
	lvnE: lvnE,
	macr: macr,
	male: male,
	malt: malt,
	maltese: maltese,
	map: map,
	mapsto: mapsto,
	mapstodown: mapstodown,
	mapstoleft: mapstoleft,
	mapstoup: mapstoup,
	marker: marker,
	mcomma: mcomma,
	Mcy: Mcy,
	mcy: mcy,
	mdash: mdash,
	mDDot: mDDot,
	measuredangle: measuredangle,
	MediumSpace: MediumSpace,
	Mellintrf: Mellintrf,
	Mfr: Mfr,
	mfr: mfr,
	mho: mho,
	micro: micro,
	midast: midast,
	midcir: midcir,
	mid: mid,
	middot: middot,
	minusb: minusb,
	minus: minus,
	minusd: minusd,
	minusdu: minusdu,
	MinusPlus: MinusPlus,
	mlcp: mlcp,
	mldr: mldr,
	mnplus: mnplus,
	models: models,
	Mopf: Mopf,
	mopf: mopf,
	mp: mp,
	mscr: mscr,
	Mscr: Mscr,
	mstpos: mstpos,
	Mu: Mu,
	mu: mu,
	multimap: multimap,
	mumap: mumap,
	nabla: nabla,
	Nacute: Nacute,
	nacute: nacute,
	nang: nang,
	nap: nap,
	napE: napE,
	napid: napid,
	napos: napos,
	napprox: napprox,
	natural: natural,
	naturals: naturals,
	natur: natur,
	nbsp: nbsp,
	nbump: nbump,
	nbumpe: nbumpe,
	ncap: ncap,
	Ncaron: Ncaron,
	ncaron: ncaron,
	Ncedil: Ncedil,
	ncedil: ncedil,
	ncong: ncong,
	ncongdot: ncongdot,
	ncup: ncup,
	Ncy: Ncy,
	ncy: ncy,
	ndash: ndash,
	nearhk: nearhk,
	nearr: nearr,
	neArr: neArr,
	nearrow: nearrow,
	ne: ne,
	nedot: nedot,
	NegativeMediumSpace: NegativeMediumSpace,
	NegativeThickSpace: NegativeThickSpace,
	NegativeThinSpace: NegativeThinSpace,
	NegativeVeryThinSpace: NegativeVeryThinSpace,
	nequiv: nequiv,
	nesear: nesear,
	nesim: nesim,
	NestedGreaterGreater: NestedGreaterGreater,
	NestedLessLess: NestedLessLess,
	NewLine: NewLine,
	nexist: nexist,
	nexists: nexists,
	Nfr: Nfr,
	nfr: nfr,
	ngE: ngE,
	nge: nge,
	ngeq: ngeq,
	ngeqq: ngeqq,
	ngeqslant: ngeqslant,
	nges: nges,
	nGg: nGg,
	ngsim: ngsim,
	nGt: nGt,
	ngt: ngt,
	ngtr: ngtr,
	nGtv: nGtv,
	nharr: nharr,
	nhArr: nhArr,
	nhpar: nhpar,
	ni: ni,
	nis: nis,
	nisd: nisd,
	niv: niv,
	NJcy: NJcy,
	njcy: njcy,
	nlarr: nlarr,
	nlArr: nlArr,
	nldr: nldr,
	nlE: nlE,
	nle: nle,
	nleftarrow: nleftarrow,
	nLeftarrow: nLeftarrow,
	nleftrightarrow: nleftrightarrow,
	nLeftrightarrow: nLeftrightarrow,
	nleq: nleq,
	nleqq: nleqq,
	nleqslant: nleqslant,
	nles: nles,
	nless: nless,
	nLl: nLl,
	nlsim: nlsim,
	nLt: nLt,
	nlt: nlt,
	nltri: nltri,
	nltrie: nltrie,
	nLtv: nLtv,
	nmid: nmid,
	NoBreak: NoBreak,
	NonBreakingSpace: NonBreakingSpace,
	nopf: nopf,
	Nopf: Nopf,
	Not: Not,
	not: not,
	NotCongruent: NotCongruent,
	NotCupCap: NotCupCap,
	NotDoubleVerticalBar: NotDoubleVerticalBar,
	NotElement: NotElement,
	NotEqual: NotEqual,
	NotEqualTilde: NotEqualTilde,
	NotExists: NotExists,
	NotGreater: NotGreater,
	NotGreaterEqual: NotGreaterEqual,
	NotGreaterFullEqual: NotGreaterFullEqual,
	NotGreaterGreater: NotGreaterGreater,
	NotGreaterLess: NotGreaterLess,
	NotGreaterSlantEqual: NotGreaterSlantEqual,
	NotGreaterTilde: NotGreaterTilde,
	NotHumpDownHump: NotHumpDownHump,
	NotHumpEqual: NotHumpEqual,
	notin: notin,
	notindot: notindot,
	notinE: notinE,
	notinva: notinva,
	notinvb: notinvb,
	notinvc: notinvc,
	NotLeftTriangleBar: NotLeftTriangleBar,
	NotLeftTriangle: NotLeftTriangle,
	NotLeftTriangleEqual: NotLeftTriangleEqual,
	NotLess: NotLess,
	NotLessEqual: NotLessEqual,
	NotLessGreater: NotLessGreater,
	NotLessLess: NotLessLess,
	NotLessSlantEqual: NotLessSlantEqual,
	NotLessTilde: NotLessTilde,
	NotNestedGreaterGreater: NotNestedGreaterGreater,
	NotNestedLessLess: NotNestedLessLess,
	notni: notni,
	notniva: notniva,
	notnivb: notnivb,
	notnivc: notnivc,
	NotPrecedes: NotPrecedes,
	NotPrecedesEqual: NotPrecedesEqual,
	NotPrecedesSlantEqual: NotPrecedesSlantEqual,
	NotReverseElement: NotReverseElement,
	NotRightTriangleBar: NotRightTriangleBar,
	NotRightTriangle: NotRightTriangle,
	NotRightTriangleEqual: NotRightTriangleEqual,
	NotSquareSubset: NotSquareSubset,
	NotSquareSubsetEqual: NotSquareSubsetEqual,
	NotSquareSuperset: NotSquareSuperset,
	NotSquareSupersetEqual: NotSquareSupersetEqual,
	NotSubset: NotSubset,
	NotSubsetEqual: NotSubsetEqual,
	NotSucceeds: NotSucceeds,
	NotSucceedsEqual: NotSucceedsEqual,
	NotSucceedsSlantEqual: NotSucceedsSlantEqual,
	NotSucceedsTilde: NotSucceedsTilde,
	NotSuperset: NotSuperset,
	NotSupersetEqual: NotSupersetEqual,
	NotTilde: NotTilde,
	NotTildeEqual: NotTildeEqual,
	NotTildeFullEqual: NotTildeFullEqual,
	NotTildeTilde: NotTildeTilde,
	NotVerticalBar: NotVerticalBar,
	nparallel: nparallel,
	npar: npar,
	nparsl: nparsl,
	npart: npart,
	npolint: npolint,
	npr: npr,
	nprcue: nprcue,
	nprec: nprec,
	npreceq: npreceq,
	npre: npre,
	nrarrc: nrarrc,
	nrarr: nrarr,
	nrArr: nrArr,
	nrarrw: nrarrw,
	nrightarrow: nrightarrow,
	nRightarrow: nRightarrow,
	nrtri: nrtri,
	nrtrie: nrtrie,
	nsc: nsc,
	nsccue: nsccue,
	nsce: nsce,
	Nscr: Nscr,
	nscr: nscr,
	nshortmid: nshortmid,
	nshortparallel: nshortparallel,
	nsim: nsim,
	nsime: nsime,
	nsimeq: nsimeq,
	nsmid: nsmid,
	nspar: nspar,
	nsqsube: nsqsube,
	nsqsupe: nsqsupe,
	nsub: nsub,
	nsubE: nsubE,
	nsube: nsube,
	nsubset: nsubset,
	nsubseteq: nsubseteq,
	nsubseteqq: nsubseteqq,
	nsucc: nsucc,
	nsucceq: nsucceq,
	nsup: nsup,
	nsupE: nsupE,
	nsupe: nsupe,
	nsupset: nsupset,
	nsupseteq: nsupseteq,
	nsupseteqq: nsupseteqq,
	ntgl: ntgl,
	Ntilde: Ntilde,
	ntilde: ntilde,
	ntlg: ntlg,
	ntriangleleft: ntriangleleft,
	ntrianglelefteq: ntrianglelefteq,
	ntriangleright: ntriangleright,
	ntrianglerighteq: ntrianglerighteq,
	Nu: Nu,
	nu: nu,
	num: num,
	numero: numero,
	numsp: numsp,
	nvap: nvap,
	nvdash: nvdash,
	nvDash: nvDash,
	nVdash: nVdash,
	nVDash: nVDash,
	nvge: nvge,
	nvgt: nvgt,
	nvHarr: nvHarr,
	nvinfin: nvinfin,
	nvlArr: nvlArr,
	nvle: nvle,
	nvlt: nvlt,
	nvltrie: nvltrie,
	nvrArr: nvrArr,
	nvrtrie: nvrtrie,
	nvsim: nvsim,
	nwarhk: nwarhk,
	nwarr: nwarr,
	nwArr: nwArr,
	nwarrow: nwarrow,
	nwnear: nwnear,
	Oacute: Oacute,
	oacute: oacute,
	oast: oast,
	Ocirc: Ocirc,
	ocirc: ocirc,
	ocir: ocir,
	Ocy: Ocy,
	ocy: ocy,
	odash: odash,
	Odblac: Odblac,
	odblac: odblac,
	odiv: odiv,
	odot: odot,
	odsold: odsold,
	OElig: OElig,
	oelig: oelig,
	ofcir: ofcir,
	Ofr: Ofr,
	ofr: ofr,
	ogon: ogon,
	Ograve: Ograve,
	ograve: ograve,
	ogt: ogt,
	ohbar: ohbar,
	ohm: ohm,
	oint: oint,
	olarr: olarr,
	olcir: olcir,
	olcross: olcross,
	oline: oline,
	olt: olt,
	Omacr: Omacr,
	omacr: omacr,
	Omega: Omega,
	omega: omega,
	Omicron: Omicron,
	omicron: omicron,
	omid: omid,
	ominus: ominus,
	Oopf: Oopf,
	oopf: oopf,
	opar: opar,
	OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
	OpenCurlyQuote: OpenCurlyQuote,
	operp: operp,
	oplus: oplus,
	orarr: orarr,
	Or: Or,
	or: or,
	ord: ord,
	order: order,
	orderof: orderof,
	ordf: ordf,
	ordm: ordm,
	origof: origof,
	oror: oror,
	orslope: orslope,
	orv: orv,
	oS: oS,
	Oscr: Oscr,
	oscr: oscr,
	Oslash: Oslash,
	oslash: oslash,
	osol: osol,
	Otilde: Otilde,
	otilde: otilde,
	otimesas: otimesas,
	Otimes: Otimes,
	otimes: otimes,
	Ouml: Ouml,
	ouml: ouml,
	ovbar: ovbar,
	OverBar: OverBar,
	OverBrace: OverBrace,
	OverBracket: OverBracket,
	OverParenthesis: OverParenthesis,
	para: para,
	parallel: parallel,
	par: par,
	parsim: parsim,
	parsl: parsl,
	part: part,
	PartialD: PartialD,
	Pcy: Pcy,
	pcy: pcy,
	percnt: percnt,
	period: period,
	permil: permil,
	perp: perp,
	pertenk: pertenk,
	Pfr: Pfr,
	pfr: pfr,
	Phi: Phi,
	phi: phi,
	phiv: phiv,
	phmmat: phmmat,
	phone: phone,
	Pi: Pi,
	pi: pi,
	pitchfork: pitchfork,
	piv: piv,
	planck: planck,
	planckh: planckh,
	plankv: plankv,
	plusacir: plusacir,
	plusb: plusb,
	pluscir: pluscir,
	plus: plus,
	plusdo: plusdo,
	plusdu: plusdu,
	pluse: pluse,
	PlusMinus: PlusMinus,
	plusmn: plusmn,
	plussim: plussim,
	plustwo: plustwo,
	pm: pm,
	Poincareplane: Poincareplane,
	pointint: pointint,
	popf: popf,
	Popf: Popf,
	pound: pound,
	prap: prap,
	Pr: Pr,
	pr: pr,
	prcue: prcue,
	precapprox: precapprox,
	prec: prec,
	preccurlyeq: preccurlyeq,
	Precedes: Precedes,
	PrecedesEqual: PrecedesEqual,
	PrecedesSlantEqual: PrecedesSlantEqual,
	PrecedesTilde: PrecedesTilde,
	preceq: preceq,
	precnapprox: precnapprox,
	precneqq: precneqq,
	precnsim: precnsim,
	pre: pre,
	prE: prE,
	precsim: precsim,
	prime: prime,
	Prime: Prime,
	primes: primes,
	prnap: prnap,
	prnE: prnE,
	prnsim: prnsim,
	prod: prod,
	Product: Product,
	profalar: profalar,
	profline: profline,
	profsurf: profsurf,
	prop: prop,
	Proportional: Proportional,
	Proportion: Proportion,
	propto: propto,
	prsim: prsim,
	prurel: prurel,
	Pscr: Pscr,
	pscr: pscr,
	Psi: Psi,
	psi: psi,
	puncsp: puncsp,
	Qfr: Qfr,
	qfr: qfr,
	qint: qint,
	qopf: qopf,
	Qopf: Qopf,
	qprime: qprime,
	Qscr: Qscr,
	qscr: qscr,
	quaternions: quaternions,
	quatint: quatint,
	quest: quest,
	questeq: questeq,
	quot: quot$1,
	QUOT: QUOT,
	rAarr: rAarr,
	race: race,
	Racute: Racute,
	racute: racute,
	radic: radic,
	raemptyv: raemptyv,
	rang: rang,
	Rang: Rang,
	rangd: rangd,
	range: range,
	rangle: rangle,
	raquo: raquo,
	rarrap: rarrap,
	rarrb: rarrb,
	rarrbfs: rarrbfs,
	rarrc: rarrc,
	rarr: rarr,
	Rarr: Rarr,
	rArr: rArr,
	rarrfs: rarrfs,
	rarrhk: rarrhk,
	rarrlp: rarrlp,
	rarrpl: rarrpl,
	rarrsim: rarrsim,
	Rarrtl: Rarrtl,
	rarrtl: rarrtl,
	rarrw: rarrw,
	ratail: ratail,
	rAtail: rAtail,
	ratio: ratio,
	rationals: rationals,
	rbarr: rbarr,
	rBarr: rBarr,
	RBarr: RBarr,
	rbbrk: rbbrk,
	rbrace: rbrace,
	rbrack: rbrack,
	rbrke: rbrke,
	rbrksld: rbrksld,
	rbrkslu: rbrkslu,
	Rcaron: Rcaron,
	rcaron: rcaron,
	Rcedil: Rcedil,
	rcedil: rcedil,
	rceil: rceil,
	rcub: rcub,
	Rcy: Rcy,
	rcy: rcy,
	rdca: rdca,
	rdldhar: rdldhar,
	rdquo: rdquo,
	rdquor: rdquor,
	rdsh: rdsh,
	real: real,
	realine: realine,
	realpart: realpart,
	reals: reals,
	Re: Re,
	rect: rect,
	reg: reg,
	REG: REG,
	ReverseElement: ReverseElement,
	ReverseEquilibrium: ReverseEquilibrium,
	ReverseUpEquilibrium: ReverseUpEquilibrium,
	rfisht: rfisht,
	rfloor: rfloor,
	rfr: rfr,
	Rfr: Rfr,
	rHar: rHar,
	rhard: rhard,
	rharu: rharu,
	rharul: rharul,
	Rho: Rho,
	rho: rho,
	rhov: rhov,
	RightAngleBracket: RightAngleBracket,
	RightArrowBar: RightArrowBar,
	rightarrow: rightarrow,
	RightArrow: RightArrow,
	Rightarrow: Rightarrow,
	RightArrowLeftArrow: RightArrowLeftArrow,
	rightarrowtail: rightarrowtail,
	RightCeiling: RightCeiling,
	RightDoubleBracket: RightDoubleBracket,
	RightDownTeeVector: RightDownTeeVector,
	RightDownVectorBar: RightDownVectorBar,
	RightDownVector: RightDownVector,
	RightFloor: RightFloor,
	rightharpoondown: rightharpoondown,
	rightharpoonup: rightharpoonup,
	rightleftarrows: rightleftarrows,
	rightleftharpoons: rightleftharpoons,
	rightrightarrows: rightrightarrows,
	rightsquigarrow: rightsquigarrow,
	RightTeeArrow: RightTeeArrow,
	RightTee: RightTee,
	RightTeeVector: RightTeeVector,
	rightthreetimes: rightthreetimes,
	RightTriangleBar: RightTriangleBar,
	RightTriangle: RightTriangle,
	RightTriangleEqual: RightTriangleEqual,
	RightUpDownVector: RightUpDownVector,
	RightUpTeeVector: RightUpTeeVector,
	RightUpVectorBar: RightUpVectorBar,
	RightUpVector: RightUpVector,
	RightVectorBar: RightVectorBar,
	RightVector: RightVector,
	ring: ring,
	risingdotseq: risingdotseq,
	rlarr: rlarr,
	rlhar: rlhar,
	rlm: rlm,
	rmoustache: rmoustache,
	rmoust: rmoust,
	rnmid: rnmid,
	roang: roang,
	roarr: roarr,
	robrk: robrk,
	ropar: ropar,
	ropf: ropf,
	Ropf: Ropf,
	roplus: roplus,
	rotimes: rotimes,
	RoundImplies: RoundImplies,
	rpar: rpar,
	rpargt: rpargt,
	rppolint: rppolint,
	rrarr: rrarr,
	Rrightarrow: Rrightarrow,
	rsaquo: rsaquo,
	rscr: rscr,
	Rscr: Rscr,
	rsh: rsh,
	Rsh: Rsh,
	rsqb: rsqb,
	rsquo: rsquo,
	rsquor: rsquor,
	rthree: rthree,
	rtimes: rtimes,
	rtri: rtri,
	rtrie: rtrie,
	rtrif: rtrif,
	rtriltri: rtriltri,
	RuleDelayed: RuleDelayed,
	ruluhar: ruluhar,
	rx: rx,
	Sacute: Sacute,
	sacute: sacute,
	sbquo: sbquo,
	scap: scap,
	Scaron: Scaron,
	scaron: scaron,
	Sc: Sc,
	sc: sc,
	sccue: sccue,
	sce: sce,
	scE: scE,
	Scedil: Scedil,
	scedil: scedil,
	Scirc: Scirc,
	scirc: scirc,
	scnap: scnap,
	scnE: scnE,
	scnsim: scnsim,
	scpolint: scpolint,
	scsim: scsim,
	Scy: Scy,
	scy: scy,
	sdotb: sdotb,
	sdot: sdot,
	sdote: sdote,
	searhk: searhk,
	searr: searr,
	seArr: seArr,
	searrow: searrow,
	sect: sect,
	semi: semi,
	seswar: seswar,
	setminus: setminus,
	setmn: setmn,
	sext: sext,
	Sfr: Sfr,
	sfr: sfr,
	sfrown: sfrown,
	sharp: sharp,
	SHCHcy: SHCHcy,
	shchcy: shchcy,
	SHcy: SHcy,
	shcy: shcy,
	ShortDownArrow: ShortDownArrow,
	ShortLeftArrow: ShortLeftArrow,
	shortmid: shortmid,
	shortparallel: shortparallel,
	ShortRightArrow: ShortRightArrow,
	ShortUpArrow: ShortUpArrow,
	shy: shy,
	Sigma: Sigma,
	sigma: sigma,
	sigmaf: sigmaf,
	sigmav: sigmav,
	sim: sim,
	simdot: simdot,
	sime: sime,
	simeq: simeq,
	simg: simg,
	simgE: simgE,
	siml: siml,
	simlE: simlE,
	simne: simne,
	simplus: simplus,
	simrarr: simrarr,
	slarr: slarr,
	SmallCircle: SmallCircle,
	smallsetminus: smallsetminus,
	smashp: smashp,
	smeparsl: smeparsl,
	smid: smid,
	smile: smile,
	smt: smt,
	smte: smte,
	smtes: smtes,
	SOFTcy: SOFTcy,
	softcy: softcy,
	solbar: solbar,
	solb: solb,
	sol: sol,
	Sopf: Sopf,
	sopf: sopf,
	spades: spades,
	spadesuit: spadesuit,
	spar: spar,
	sqcap: sqcap,
	sqcaps: sqcaps,
	sqcup: sqcup,
	sqcups: sqcups,
	Sqrt: Sqrt,
	sqsub: sqsub,
	sqsube: sqsube,
	sqsubset: sqsubset,
	sqsubseteq: sqsubseteq,
	sqsup: sqsup,
	sqsupe: sqsupe,
	sqsupset: sqsupset,
	sqsupseteq: sqsupseteq,
	square: square,
	Square: Square,
	SquareIntersection: SquareIntersection,
	SquareSubset: SquareSubset,
	SquareSubsetEqual: SquareSubsetEqual,
	SquareSuperset: SquareSuperset,
	SquareSupersetEqual: SquareSupersetEqual,
	SquareUnion: SquareUnion,
	squarf: squarf,
	squ: squ,
	squf: squf,
	srarr: srarr,
	Sscr: Sscr,
	sscr: sscr,
	ssetmn: ssetmn,
	ssmile: ssmile,
	sstarf: sstarf,
	Star: Star,
	star: star,
	starf: starf,
	straightepsilon: straightepsilon,
	straightphi: straightphi,
	strns: strns,
	sub: sub,
	Sub: Sub,
	subdot: subdot,
	subE: subE,
	sube: sube,
	subedot: subedot,
	submult: submult,
	subnE: subnE,
	subne: subne,
	subplus: subplus,
	subrarr: subrarr,
	subset: subset,
	Subset: Subset,
	subseteq: subseteq,
	subseteqq: subseteqq,
	SubsetEqual: SubsetEqual,
	subsetneq: subsetneq,
	subsetneqq: subsetneqq,
	subsim: subsim,
	subsub: subsub,
	subsup: subsup,
	succapprox: succapprox,
	succ: succ,
	succcurlyeq: succcurlyeq,
	Succeeds: Succeeds,
	SucceedsEqual: SucceedsEqual,
	SucceedsSlantEqual: SucceedsSlantEqual,
	SucceedsTilde: SucceedsTilde,
	succeq: succeq,
	succnapprox: succnapprox,
	succneqq: succneqq,
	succnsim: succnsim,
	succsim: succsim,
	SuchThat: SuchThat,
	sum: sum,
	Sum: Sum,
	sung: sung,
	sup1: sup1,
	sup2: sup2,
	sup3: sup3,
	sup: sup,
	Sup: Sup,
	supdot: supdot,
	supdsub: supdsub,
	supE: supE,
	supe: supe,
	supedot: supedot,
	Superset: Superset,
	SupersetEqual: SupersetEqual,
	suphsol: suphsol,
	suphsub: suphsub,
	suplarr: suplarr,
	supmult: supmult,
	supnE: supnE,
	supne: supne,
	supplus: supplus,
	supset: supset,
	Supset: Supset,
	supseteq: supseteq,
	supseteqq: supseteqq,
	supsetneq: supsetneq,
	supsetneqq: supsetneqq,
	supsim: supsim,
	supsub: supsub,
	supsup: supsup,
	swarhk: swarhk,
	swarr: swarr,
	swArr: swArr,
	swarrow: swarrow,
	swnwar: swnwar,
	szlig: szlig,
	Tab: Tab,
	target: target,
	Tau: Tau,
	tau: tau,
	tbrk: tbrk,
	Tcaron: Tcaron,
	tcaron: tcaron,
	Tcedil: Tcedil,
	tcedil: tcedil,
	Tcy: Tcy,
	tcy: tcy,
	tdot: tdot,
	telrec: telrec,
	Tfr: Tfr,
	tfr: tfr,
	there4: there4,
	therefore: therefore,
	Therefore: Therefore,
	Theta: Theta,
	theta: theta,
	thetasym: thetasym,
	thetav: thetav,
	thickapprox: thickapprox,
	thicksim: thicksim,
	ThickSpace: ThickSpace,
	ThinSpace: ThinSpace,
	thinsp: thinsp,
	thkap: thkap,
	thksim: thksim,
	THORN: THORN,
	thorn: thorn,
	tilde: tilde,
	Tilde: Tilde,
	TildeEqual: TildeEqual,
	TildeFullEqual: TildeFullEqual,
	TildeTilde: TildeTilde,
	timesbar: timesbar,
	timesb: timesb,
	times: times,
	timesd: timesd,
	tint: tint,
	toea: toea,
	topbot: topbot,
	topcir: topcir,
	top: top,
	Topf: Topf,
	topf: topf,
	topfork: topfork,
	tosa: tosa,
	tprime: tprime,
	trade: trade,
	TRADE: TRADE,
	triangle: triangle,
	triangledown: triangledown,
	triangleleft: triangleleft,
	trianglelefteq: trianglelefteq,
	triangleq: triangleq,
	triangleright: triangleright,
	trianglerighteq: trianglerighteq,
	tridot: tridot,
	trie: trie,
	triminus: triminus,
	TripleDot: TripleDot,
	triplus: triplus,
	trisb: trisb,
	tritime: tritime,
	trpezium: trpezium,
	Tscr: Tscr,
	tscr: tscr,
	TScy: TScy,
	tscy: tscy,
	TSHcy: TSHcy,
	tshcy: tshcy,
	Tstrok: Tstrok,
	tstrok: tstrok,
	twixt: twixt,
	twoheadleftarrow: twoheadleftarrow,
	twoheadrightarrow: twoheadrightarrow,
	Uacute: Uacute,
	uacute: uacute,
	uarr: uarr,
	Uarr: Uarr,
	uArr: uArr,
	Uarrocir: Uarrocir,
	Ubrcy: Ubrcy,
	ubrcy: ubrcy,
	Ubreve: Ubreve,
	ubreve: ubreve,
	Ucirc: Ucirc,
	ucirc: ucirc,
	Ucy: Ucy,
	ucy: ucy,
	udarr: udarr,
	Udblac: Udblac,
	udblac: udblac,
	udhar: udhar,
	ufisht: ufisht,
	Ufr: Ufr,
	ufr: ufr,
	Ugrave: Ugrave,
	ugrave: ugrave,
	uHar: uHar,
	uharl: uharl,
	uharr: uharr,
	uhblk: uhblk,
	ulcorn: ulcorn,
	ulcorner: ulcorner,
	ulcrop: ulcrop,
	ultri: ultri,
	Umacr: Umacr,
	umacr: umacr,
	uml: uml,
	UnderBar: UnderBar,
	UnderBrace: UnderBrace,
	UnderBracket: UnderBracket,
	UnderParenthesis: UnderParenthesis,
	Union: Union,
	UnionPlus: UnionPlus,
	Uogon: Uogon,
	uogon: uogon,
	Uopf: Uopf,
	uopf: uopf,
	UpArrowBar: UpArrowBar,
	uparrow: uparrow,
	UpArrow: UpArrow,
	Uparrow: Uparrow,
	UpArrowDownArrow: UpArrowDownArrow,
	updownarrow: updownarrow,
	UpDownArrow: UpDownArrow,
	Updownarrow: Updownarrow,
	UpEquilibrium: UpEquilibrium,
	upharpoonleft: upharpoonleft,
	upharpoonright: upharpoonright,
	uplus: uplus,
	UpperLeftArrow: UpperLeftArrow,
	UpperRightArrow: UpperRightArrow,
	upsi: upsi,
	Upsi: Upsi,
	upsih: upsih,
	Upsilon: Upsilon,
	upsilon: upsilon,
	UpTeeArrow: UpTeeArrow,
	UpTee: UpTee,
	upuparrows: upuparrows,
	urcorn: urcorn,
	urcorner: urcorner,
	urcrop: urcrop,
	Uring: Uring,
	uring: uring,
	urtri: urtri,
	Uscr: Uscr,
	uscr: uscr,
	utdot: utdot,
	Utilde: Utilde,
	utilde: utilde,
	utri: utri,
	utrif: utrif,
	uuarr: uuarr,
	Uuml: Uuml,
	uuml: uuml,
	uwangle: uwangle,
	vangrt: vangrt,
	varepsilon: varepsilon,
	varkappa: varkappa,
	varnothing: varnothing,
	varphi: varphi,
	varpi: varpi,
	varpropto: varpropto,
	varr: varr,
	vArr: vArr,
	varrho: varrho,
	varsigma: varsigma,
	varsubsetneq: varsubsetneq,
	varsubsetneqq: varsubsetneqq,
	varsupsetneq: varsupsetneq,
	varsupsetneqq: varsupsetneqq,
	vartheta: vartheta,
	vartriangleleft: vartriangleleft,
	vartriangleright: vartriangleright,
	vBar: vBar,
	Vbar: Vbar,
	vBarv: vBarv,
	Vcy: Vcy,
	vcy: vcy,
	vdash: vdash,
	vDash: vDash,
	Vdash: Vdash,
	VDash: VDash,
	Vdashl: Vdashl,
	veebar: veebar,
	vee: vee,
	Vee: Vee,
	veeeq: veeeq,
	vellip: vellip,
	verbar: verbar,
	Verbar: Verbar,
	vert: vert,
	Vert: Vert,
	VerticalBar: VerticalBar,
	VerticalLine: VerticalLine,
	VerticalSeparator: VerticalSeparator,
	VerticalTilde: VerticalTilde,
	VeryThinSpace: VeryThinSpace,
	Vfr: Vfr,
	vfr: vfr,
	vltri: vltri,
	vnsub: vnsub,
	vnsup: vnsup,
	Vopf: Vopf,
	vopf: vopf,
	vprop: vprop,
	vrtri: vrtri,
	Vscr: Vscr,
	vscr: vscr,
	vsubnE: vsubnE,
	vsubne: vsubne,
	vsupnE: vsupnE,
	vsupne: vsupne,
	Vvdash: Vvdash,
	vzigzag: vzigzag,
	Wcirc: Wcirc,
	wcirc: wcirc,
	wedbar: wedbar,
	wedge: wedge,
	Wedge: Wedge,
	wedgeq: wedgeq,
	weierp: weierp,
	Wfr: Wfr,
	wfr: wfr,
	Wopf: Wopf,
	wopf: wopf,
	wp: wp,
	wr: wr,
	wreath: wreath,
	Wscr: Wscr,
	wscr: wscr,
	xcap: xcap,
	xcirc: xcirc,
	xcup: xcup,
	xdtri: xdtri,
	Xfr: Xfr,
	xfr: xfr,
	xharr: xharr,
	xhArr: xhArr,
	Xi: Xi,
	xi: xi,
	xlarr: xlarr,
	xlArr: xlArr,
	xmap: xmap,
	xnis: xnis,
	xodot: xodot,
	Xopf: Xopf,
	xopf: xopf,
	xoplus: xoplus,
	xotime: xotime,
	xrarr: xrarr,
	xrArr: xrArr,
	Xscr: Xscr,
	xscr: xscr,
	xsqcup: xsqcup,
	xuplus: xuplus,
	xutri: xutri,
	xvee: xvee,
	xwedge: xwedge,
	Yacute: Yacute,
	yacute: yacute,
	YAcy: YAcy,
	yacy: yacy,
	Ycirc: Ycirc,
	ycirc: ycirc,
	Ycy: Ycy,
	ycy: ycy,
	yen: yen,
	Yfr: Yfr,
	yfr: yfr,
	YIcy: YIcy,
	yicy: yicy,
	Yopf: Yopf,
	yopf: yopf,
	Yscr: Yscr,
	yscr: yscr,
	YUcy: YUcy,
	yucy: yucy,
	yuml: yuml,
	Yuml: Yuml,
	Zacute: Zacute,
	zacute: zacute,
	Zcaron: Zcaron,
	zcaron: zcaron,
	Zcy: Zcy,
	zcy: zcy,
	Zdot: Zdot,
	zdot: zdot,
	zeetrf: zeetrf,
	ZeroWidthSpace: ZeroWidthSpace,
	Zeta: Zeta,
	zeta: zeta,
	zfr: zfr,
	Zfr: Zfr,
	ZHcy: ZHcy,
	zhcy: zhcy,
	zigrarr: zigrarr,
	zopf: zopf,
	Zopf: Zopf,
	Zscr: Zscr,
	zscr: zscr,
	zwj: zwj,
	zwnj: zwnj,
	'default': entities
});

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var require$$0 = getCjsExportFromNamespace(xml$1);

var require$$1 = getCjsExportFromNamespace(entities$1);

var inverseXML = getInverseObj$1(require$$0),
    xmlReplacer = getInverseReplacer$1(inverseXML);

var inverseHTML = getInverseObj$1(require$$1),
    htmlReplacer = getInverseReplacer$1(inverseHTML);

function getInverseObj$1(obj){
	return Object.keys(obj).sort().reduce(function(inverse, name){
		inverse[obj[name]] = "&" + name + ";";
		return inverse;
	}, {});
}

function getInverseReplacer$1(inverse){
	var single = [],
	    multiple = [];

	Object.keys(inverse).forEach(function(k){
		if(k.length === 1){
			single.push("\\" + k);
		} else {
			multiple.push(k);
		}
	});

	//TODO add ranges
	multiple.unshift("[" + single.join("") + "]");

	return new RegExp(multiple.join("|"), "g");
}

var re_xmlChars = getInverseReplacer$1(inverseXML);

var decode = {
	"0": 65533,
	"128": 8364,
	"130": 8218,
	"131": 402,
	"132": 8222,
	"133": 8230,
	"134": 8224,
	"135": 8225,
	"136": 710,
	"137": 8240,
	"138": 352,
	"139": 8249,
	"140": 338,
	"142": 381,
	"145": 8216,
	"146": 8217,
	"147": 8220,
	"148": 8221,
	"149": 8226,
	"150": 8211,
	"151": 8212,
	"152": 732,
	"153": 8482,
	"154": 353,
	"155": 8250,
	"156": 339,
	"158": 382,
	"159": 376
};

var decode$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': decode
});

var decodeMap = getCjsExportFromNamespace(decode$1);

var decode_codepoint = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){

	if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
		return "\uFFFD";
	}

	if(codePoint in decodeMap){
		codePoint = decodeMap[codePoint];
	}

	var output = "";

	if(codePoint > 0xFFFF){
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}

var Aacute$1 = "Á";
var aacute$1 = "á";
var Acirc$1 = "Â";
var acirc$1 = "â";
var acute$1 = "´";
var AElig$1 = "Æ";
var aelig$1 = "æ";
var Agrave$1 = "À";
var agrave$1 = "à";
var amp$2 = "&";
var AMP$1 = "&";
var Aring$1 = "Å";
var aring$1 = "å";
var Atilde$1 = "Ã";
var atilde$1 = "ã";
var Auml$1 = "Ä";
var auml$1 = "ä";
var brvbar$1 = "¦";
var Ccedil$1 = "Ç";
var ccedil$1 = "ç";
var cedil$1 = "¸";
var cent$1 = "¢";
var copy$1 = "©";
var COPY$1 = "©";
var curren$1 = "¤";
var deg$1 = "°";
var divide$1 = "÷";
var Eacute$1 = "É";
var eacute$1 = "é";
var Ecirc$1 = "Ê";
var ecirc$1 = "ê";
var Egrave$1 = "È";
var egrave$1 = "è";
var ETH$1 = "Ð";
var eth$1 = "ð";
var Euml$1 = "Ë";
var euml$1 = "ë";
var frac12$1 = "½";
var frac14$1 = "¼";
var frac34$1 = "¾";
var gt$2 = ">";
var GT$1 = ">";
var Iacute$1 = "Í";
var iacute$1 = "í";
var Icirc$1 = "Î";
var icirc$1 = "î";
var iexcl$1 = "¡";
var Igrave$1 = "Ì";
var igrave$1 = "ì";
var iquest$1 = "¿";
var Iuml$1 = "Ï";
var iuml$1 = "ï";
var laquo$1 = "«";
var lt$2 = "<";
var LT$1 = "<";
var macr$1 = "¯";
var micro$1 = "µ";
var middot$1 = "·";
var nbsp$1 = " ";
var not$1 = "¬";
var Ntilde$1 = "Ñ";
var ntilde$1 = "ñ";
var Oacute$1 = "Ó";
var oacute$1 = "ó";
var Ocirc$1 = "Ô";
var ocirc$1 = "ô";
var Ograve$1 = "Ò";
var ograve$1 = "ò";
var ordf$1 = "ª";
var ordm$1 = "º";
var Oslash$1 = "Ø";
var oslash$1 = "ø";
var Otilde$1 = "Õ";
var otilde$1 = "õ";
var Ouml$1 = "Ö";
var ouml$1 = "ö";
var para$1 = "¶";
var plusmn$1 = "±";
var pound$1 = "£";
var quot$2 = "\"";
var QUOT$1 = "\"";
var raquo$1 = "»";
var reg$1 = "®";
var REG$1 = "®";
var sect$1 = "§";
var shy$1 = "­";
var sup1$1 = "¹";
var sup2$1 = "²";
var sup3$1 = "³";
var szlig$1 = "ß";
var THORN$1 = "Þ";
var thorn$1 = "þ";
var times$1 = "×";
var Uacute$1 = "Ú";
var uacute$1 = "ú";
var Ucirc$1 = "Û";
var ucirc$1 = "û";
var Ugrave$1 = "Ù";
var ugrave$1 = "ù";
var uml$1 = "¨";
var Uuml$1 = "Ü";
var uuml$1 = "ü";
var Yacute$1 = "Ý";
var yacute$1 = "ý";
var yen$1 = "¥";
var yuml$1 = "ÿ";
var legacy = {
	Aacute: Aacute$1,
	aacute: aacute$1,
	Acirc: Acirc$1,
	acirc: acirc$1,
	acute: acute$1,
	AElig: AElig$1,
	aelig: aelig$1,
	Agrave: Agrave$1,
	agrave: agrave$1,
	amp: amp$2,
	AMP: AMP$1,
	Aring: Aring$1,
	aring: aring$1,
	Atilde: Atilde$1,
	atilde: atilde$1,
	Auml: Auml$1,
	auml: auml$1,
	brvbar: brvbar$1,
	Ccedil: Ccedil$1,
	ccedil: ccedil$1,
	cedil: cedil$1,
	cent: cent$1,
	copy: copy$1,
	COPY: COPY$1,
	curren: curren$1,
	deg: deg$1,
	divide: divide$1,
	Eacute: Eacute$1,
	eacute: eacute$1,
	Ecirc: Ecirc$1,
	ecirc: ecirc$1,
	Egrave: Egrave$1,
	egrave: egrave$1,
	ETH: ETH$1,
	eth: eth$1,
	Euml: Euml$1,
	euml: euml$1,
	frac12: frac12$1,
	frac14: frac14$1,
	frac34: frac34$1,
	gt: gt$2,
	GT: GT$1,
	Iacute: Iacute$1,
	iacute: iacute$1,
	Icirc: Icirc$1,
	icirc: icirc$1,
	iexcl: iexcl$1,
	Igrave: Igrave$1,
	igrave: igrave$1,
	iquest: iquest$1,
	Iuml: Iuml$1,
	iuml: iuml$1,
	laquo: laquo$1,
	lt: lt$2,
	LT: LT$1,
	macr: macr$1,
	micro: micro$1,
	middot: middot$1,
	nbsp: nbsp$1,
	not: not$1,
	Ntilde: Ntilde$1,
	ntilde: ntilde$1,
	Oacute: Oacute$1,
	oacute: oacute$1,
	Ocirc: Ocirc$1,
	ocirc: ocirc$1,
	Ograve: Ograve$1,
	ograve: ograve$1,
	ordf: ordf$1,
	ordm: ordm$1,
	Oslash: Oslash$1,
	oslash: oslash$1,
	Otilde: Otilde$1,
	otilde: otilde$1,
	Ouml: Ouml$1,
	ouml: ouml$1,
	para: para$1,
	plusmn: plusmn$1,
	pound: pound$1,
	quot: quot$2,
	QUOT: QUOT$1,
	raquo: raquo$1,
	reg: reg$1,
	REG: REG$1,
	sect: sect$1,
	shy: shy$1,
	sup1: sup1$1,
	sup2: sup2$1,
	sup3: sup3$1,
	szlig: szlig$1,
	THORN: THORN$1,
	thorn: thorn$1,
	times: times$1,
	Uacute: Uacute$1,
	uacute: uacute$1,
	Ucirc: Ucirc$1,
	ucirc: ucirc$1,
	Ugrave: Ugrave$1,
	ugrave: ugrave$1,
	uml: uml$1,
	Uuml: Uuml$1,
	uuml: uuml$1,
	Yacute: Yacute$1,
	yacute: yacute$1,
	yen: yen$1,
	yuml: yuml$1
};

var Tokenizer_1 = Tokenizer;

var i = 0,

    TEXT                      = i++,
    BEFORE_TAG_NAME           = i++, //after <
    IN_TAG_NAME               = i++,
    IN_SELF_CLOSING_TAG       = i++,
    BEFORE_CLOSING_TAG_NAME   = i++,
    IN_CLOSING_TAG_NAME       = i++,
    AFTER_CLOSING_TAG_NAME    = i++,

    //attributes
    BEFORE_ATTRIBUTE_NAME     = i++,
    IN_ATTRIBUTE_NAME         = i++,
    AFTER_ATTRIBUTE_NAME      = i++,
    BEFORE_ATTRIBUTE_VALUE    = i++,
    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
    IN_ATTRIBUTE_VALUE_NQ     = i++,

    //declarations
    BEFORE_DECLARATION        = i++, // !
    IN_DECLARATION            = i++,

    //processing instructions
    IN_PROCESSING_INSTRUCTION = i++, // ?

    //comments
    BEFORE_COMMENT            = i++,
    IN_COMMENT                = i++,
    AFTER_COMMENT_1           = i++,
    AFTER_COMMENT_2           = i++,

    //cdata
    BEFORE_CDATA_1            = i++, // [
    BEFORE_CDATA_2            = i++, // C
    BEFORE_CDATA_3            = i++, // D
    BEFORE_CDATA_4            = i++, // A
    BEFORE_CDATA_5            = i++, // T
    BEFORE_CDATA_6            = i++, // A
    IN_CDATA                  = i++, // [
    AFTER_CDATA_1             = i++, // ]
    AFTER_CDATA_2             = i++, // ]

    //special tags
    BEFORE_SPECIAL            = i++, //S
    BEFORE_SPECIAL_END        = i++,   //S

    BEFORE_SCRIPT_1           = i++, //C
    BEFORE_SCRIPT_2           = i++, //R
    BEFORE_SCRIPT_3           = i++, //I
    BEFORE_SCRIPT_4           = i++, //P
    BEFORE_SCRIPT_5           = i++, //T
    AFTER_SCRIPT_1            = i++, //C
    AFTER_SCRIPT_2            = i++, //R
    AFTER_SCRIPT_3            = i++, //I
    AFTER_SCRIPT_4            = i++, //P
    AFTER_SCRIPT_5            = i++, //T

    BEFORE_STYLE_1            = i++, //T
    BEFORE_STYLE_2            = i++, //Y
    BEFORE_STYLE_3            = i++, //L
    BEFORE_STYLE_4            = i++, //E
    AFTER_STYLE_1             = i++, //T
    AFTER_STYLE_2             = i++, //Y
    AFTER_STYLE_3             = i++, //L
    AFTER_STYLE_4             = i++, //E

    BEFORE_ENTITY             = i++, //&
    BEFORE_NUMERIC_ENTITY     = i++, //#
    IN_NAMED_ENTITY           = i++,
    IN_NUMERIC_ENTITY         = i++,
    IN_HEX_ENTITY             = i++, //X

    j = 0,

    SPECIAL_NONE              = j++,
    SPECIAL_SCRIPT            = j++,
    SPECIAL_STYLE             = j++;

function whitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function characterState(char, SUCCESS){
	return function(c){
		if(c === char) this._state = SUCCESS;
	};
}

function ifElseState(upper, SUCCESS, FAILURE){
	var lower = upper.toLowerCase();

	if(upper === lower){
		return function(c){
			if(c === lower){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	} else {
		return function(c){
			if(c === lower || c === upper){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	}
}

function consumeSpecialNameChar(upper, NEXT_STATE){
	var lower = upper.toLowerCase();

	return function(c){
		if(c === lower || c === upper){
			this._state = NEXT_STATE;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};
}

function Tokenizer(options, cbs){
	this._state = TEXT;
	this._buffer = "";
	this._sectionStart = 0;
	this._index = 0;
	this._bufferOffset = 0; //chars removed from _buffer
	this._baseState = TEXT;
	this._special = SPECIAL_NONE;
	this._cbs = cbs;
	this._running = true;
	this._ended = false;
	this._xmlMode = !!(options && options.xmlMode);
	this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function(c){
	if(c === "<"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._state = BEFORE_TAG_NAME;
		this._sectionStart = this._index;
	} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._baseState = TEXT;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeTagName = function(c){
	if(c === "/"){
		this._state = BEFORE_CLOSING_TAG_NAME;
	} else if(c === "<"){
		this._cbs.ontext(this._getSection());
		this._sectionStart = this._index;
	} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
		this._state = TEXT;
	} else if(c === "!"){
		this._state = BEFORE_DECLARATION;
		this._sectionStart = this._index + 1;
	} else if(c === "?"){
		this._state = IN_PROCESSING_INSTRUCTION;
		this._sectionStart = this._index + 1;
	} else {
		this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
						BEFORE_SPECIAL : IN_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInTagName = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._emitToken("onopentagname");
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
	if(whitespace(c));
	else if(c === ">"){
		this._state = TEXT;
	} else if(this._special !== SPECIAL_NONE){
		if(c === "s" || c === "S"){
			this._state = BEFORE_SPECIAL_END;
		} else {
			this._state = TEXT;
			this._index--;
		}
	} else {
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInCloseingTagName = function(c){
	if(c === ">" || whitespace(c)){
		this._emitToken("onclosetag");
		this._state = AFTER_CLOSING_TAG_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterCloseingTagName = function(c){
	//skip everything until ">"
	if(c === ">"){
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeAttributeName = function(c){
	if(c === ">"){
		this._cbs.onopentagend();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c === "/"){
		this._state = IN_SELF_CLOSING_TAG;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInSelfClosingTag = function(c){
	if(c === ">"){
		this._cbs.onselfclosingtag();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateInAttributeName = function(c){
	if(c === "=" || c === "/" || c === ">" || whitespace(c)){
		this._cbs.onattribname(this._getSection());
		this._sectionStart = -1;
		this._state = AFTER_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterAttributeName = function(c){
	if(c === "="){
		this._state = BEFORE_ATTRIBUTE_VALUE;
	} else if(c === "/" || c === ">"){
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(!whitespace(c)){
		this._cbs.onattribend();
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeAttributeValue = function(c){
	if(c === "\""){
		this._state = IN_ATTRIBUTE_VALUE_DQ;
		this._sectionStart = this._index + 1;
	} else if(c === "'"){
		this._state = IN_ATTRIBUTE_VALUE_SQ;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_VALUE_NQ;
		this._sectionStart = this._index;
		this._index--; //reconsume token
	}
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
	if(c === "\""){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
	if(c === "'"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
	if(whitespace(c) || c === ">"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeDeclaration = function(c){
	this._state = c === "[" ? BEFORE_CDATA_1 :
					c === "-" ? BEFORE_COMMENT :
						IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function(c){
	if(c === ">"){
		this._cbs.ondeclaration(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateInProcessingInstruction = function(c){
	if(c === ">"){
		this._cbs.onprocessinginstruction(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeComment = function(c){
	if(c === "-"){
		this._state = IN_COMMENT;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
	}
};

Tokenizer.prototype._stateInComment = function(c){
	if(c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = function(c){
	if(c === "-"){
		this._state = AFTER_COMMENT_2;
	} else {
		this._state = IN_COMMENT;
	}
};

Tokenizer.prototype._stateAfterComment2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "-"){
		this._state = IN_COMMENT;
	}
	// else: stay in AFTER_COMMENT_2 (`--->`)
};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

Tokenizer.prototype._stateBeforeCdata6 = function(c){
	if(c === "["){
		this._state = IN_CDATA;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
		this._index--;
	}
};

Tokenizer.prototype._stateInCdata = function(c){
	if(c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = characterState("]", AFTER_CDATA_2);

Tokenizer.prototype._stateAfterCdata2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "]") {
		this._state = IN_CDATA;
	}
	//else: stay in AFTER_CDATA_2 (`]]]>`)
};

Tokenizer.prototype._stateBeforeSpecial = function(c){
	if(c === "c" || c === "C"){
		this._state = BEFORE_SCRIPT_1;
	} else if(c === "t" || c === "T"){
		this._state = BEFORE_STYLE_1;
	} else {
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	}
};

Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
	if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
		this._state = AFTER_SCRIPT_1;
	} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
		this._state = AFTER_STYLE_1;
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

Tokenizer.prototype._stateBeforeScript5 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_SCRIPT;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 6;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

Tokenizer.prototype._stateBeforeStyle4 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_STYLE;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 5;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

//for entities terminated with a semicolon
Tokenizer.prototype._parseNamedEntityStrict = function(){
	//offset = 1
	if(this._sectionStart + 1 < this._index){
		var entity = this._buffer.substring(this._sectionStart + 1, this._index),
		    map = this._xmlMode ? xml : entities;

		if(map.hasOwnProperty(entity)){
			this._emitPartial(map[entity]);
			this._sectionStart = this._index + 1;
		}
	}
};


//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity = function(){
	var start = this._sectionStart + 1,
	    limit = this._index - start;

	if(limit > 6) limit = 6; //the max length of legacy entities is 6

	while(limit >= 2){ //the min length of legacy entities is 2
		var entity = this._buffer.substr(start, limit);

		if(legacy.hasOwnProperty(entity)){
			this._emitPartial(legacy[entity]);
			this._sectionStart += limit + 1;
			return;
		} else {
			limit--;
		}
	}
};

Tokenizer.prototype._stateInNamedEntity = function(c){
	if(c === ";"){
		this._parseNamedEntityStrict();
		if(this._sectionStart + 1 < this._index && !this._xmlMode){
			this._parseLegacyEntity();
		}
		this._state = this._baseState;
	} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
		if(this._xmlMode);
		else if(this._sectionStart + 1 === this._index);
		else if(this._baseState !== TEXT){
			if(c !== "="){
				this._parseNamedEntityStrict();
			}
		} else {
			this._parseLegacyEntity();
		}

		this._state = this._baseState;
		this._index--;
	}
};

Tokenizer.prototype._decodeNumericEntity = function(offset, base){
	var sectionStart = this._sectionStart + offset;

	if(sectionStart !== this._index){
		//parse entity
		var entity = this._buffer.substring(sectionStart, this._index);
		var parsed = parseInt(entity, base);

		this._emitPartial(decode_codepoint(parsed));
		this._sectionStart = this._index;
	} else {
		this._sectionStart--;
	}

	this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(2, 10);
		this._sectionStart++;
	} else if(c < "0" || c > "9"){
		if(!this._xmlMode){
			this._decodeNumericEntity(2, 10);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._stateInHexEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(3, 16);
		this._sectionStart++;
	} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
		if(!this._xmlMode){
			this._decodeNumericEntity(3, 16);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._cleanup = function (){
	if(this._sectionStart < 0){
		this._buffer = "";
		this._bufferOffset += this._index;
		this._index = 0;
	} else if(this._running){
		if(this._state === TEXT){
			if(this._sectionStart !== this._index){
				this._cbs.ontext(this._buffer.substr(this._sectionStart));
			}
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else if(this._sectionStart === this._index){
			//the section just started
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else {
			//remove everything unnecessary
			this._buffer = this._buffer.substr(this._sectionStart);
			this._index -= this._sectionStart;
			this._bufferOffset += this._sectionStart;
		}

		this._sectionStart = 0;
	}
};

//TODO make events conditional
Tokenizer.prototype.write = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".write() after done!"));

	this._buffer += chunk;
	this._parse();
};

Tokenizer.prototype._parse = function(){
	while(this._index < this._buffer.length && this._running){
		var c = this._buffer.charAt(this._index);
		if(this._state === TEXT) {
			this._stateText(c);
		} else if(this._state === BEFORE_TAG_NAME){
			this._stateBeforeTagName(c);
		} else if(this._state === IN_TAG_NAME) {
			this._stateInTagName(c);
		} else if(this._state === BEFORE_CLOSING_TAG_NAME){
			this._stateBeforeCloseingTagName(c);
		} else if(this._state === IN_CLOSING_TAG_NAME){
			this._stateInCloseingTagName(c);
		} else if(this._state === AFTER_CLOSING_TAG_NAME){
			this._stateAfterCloseingTagName(c);
		} else if(this._state === IN_SELF_CLOSING_TAG){
			this._stateInSelfClosingTag(c);
		}

		/*
		*	attributes
		*/
		else if(this._state === BEFORE_ATTRIBUTE_NAME){
			this._stateBeforeAttributeName(c);
		} else if(this._state === IN_ATTRIBUTE_NAME){
			this._stateInAttributeName(c);
		} else if(this._state === AFTER_ATTRIBUTE_NAME){
			this._stateAfterAttributeName(c);
		} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
			this._stateBeforeAttributeValue(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
			this._stateInAttributeValueDoubleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
			this._stateInAttributeValueSingleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
			this._stateInAttributeValueNoQuotes(c);
		}

		/*
		*	declarations
		*/
		else if(this._state === BEFORE_DECLARATION){
			this._stateBeforeDeclaration(c);
		} else if(this._state === IN_DECLARATION){
			this._stateInDeclaration(c);
		}

		/*
		*	processing instructions
		*/
		else if(this._state === IN_PROCESSING_INSTRUCTION){
			this._stateInProcessingInstruction(c);
		}

		/*
		*	comments
		*/
		else if(this._state === BEFORE_COMMENT){
			this._stateBeforeComment(c);
		} else if(this._state === IN_COMMENT){
			this._stateInComment(c);
		} else if(this._state === AFTER_COMMENT_1){
			this._stateAfterComment1(c);
		} else if(this._state === AFTER_COMMENT_2){
			this._stateAfterComment2(c);
		}

		/*
		*	cdata
		*/
		else if(this._state === BEFORE_CDATA_1){
			this._stateBeforeCdata1(c);
		} else if(this._state === BEFORE_CDATA_2){
			this._stateBeforeCdata2(c);
		} else if(this._state === BEFORE_CDATA_3){
			this._stateBeforeCdata3(c);
		} else if(this._state === BEFORE_CDATA_4){
			this._stateBeforeCdata4(c);
		} else if(this._state === BEFORE_CDATA_5){
			this._stateBeforeCdata5(c);
		} else if(this._state === BEFORE_CDATA_6){
			this._stateBeforeCdata6(c);
		} else if(this._state === IN_CDATA){
			this._stateInCdata(c);
		} else if(this._state === AFTER_CDATA_1){
			this._stateAfterCdata1(c);
		} else if(this._state === AFTER_CDATA_2){
			this._stateAfterCdata2(c);
		}

		/*
		* special tags
		*/
		else if(this._state === BEFORE_SPECIAL){
			this._stateBeforeSpecial(c);
		} else if(this._state === BEFORE_SPECIAL_END){
			this._stateBeforeSpecialEnd(c);
		}

		/*
		* script
		*/
		else if(this._state === BEFORE_SCRIPT_1){
			this._stateBeforeScript1(c);
		} else if(this._state === BEFORE_SCRIPT_2){
			this._stateBeforeScript2(c);
		} else if(this._state === BEFORE_SCRIPT_3){
			this._stateBeforeScript3(c);
		} else if(this._state === BEFORE_SCRIPT_4){
			this._stateBeforeScript4(c);
		} else if(this._state === BEFORE_SCRIPT_5){
			this._stateBeforeScript5(c);
		}

		else if(this._state === AFTER_SCRIPT_1){
			this._stateAfterScript1(c);
		} else if(this._state === AFTER_SCRIPT_2){
			this._stateAfterScript2(c);
		} else if(this._state === AFTER_SCRIPT_3){
			this._stateAfterScript3(c);
		} else if(this._state === AFTER_SCRIPT_4){
			this._stateAfterScript4(c);
		} else if(this._state === AFTER_SCRIPT_5){
			this._stateAfterScript5(c);
		}

		/*
		* style
		*/
		else if(this._state === BEFORE_STYLE_1){
			this._stateBeforeStyle1(c);
		} else if(this._state === BEFORE_STYLE_2){
			this._stateBeforeStyle2(c);
		} else if(this._state === BEFORE_STYLE_3){
			this._stateBeforeStyle3(c);
		} else if(this._state === BEFORE_STYLE_4){
			this._stateBeforeStyle4(c);
		}

		else if(this._state === AFTER_STYLE_1){
			this._stateAfterStyle1(c);
		} else if(this._state === AFTER_STYLE_2){
			this._stateAfterStyle2(c);
		} else if(this._state === AFTER_STYLE_3){
			this._stateAfterStyle3(c);
		} else if(this._state === AFTER_STYLE_4){
			this._stateAfterStyle4(c);
		}

		/*
		* entities
		*/
		else if(this._state === BEFORE_ENTITY){
			this._stateBeforeEntity(c);
		} else if(this._state === BEFORE_NUMERIC_ENTITY){
			this._stateBeforeNumericEntity(c);
		} else if(this._state === IN_NAMED_ENTITY){
			this._stateInNamedEntity(c);
		} else if(this._state === IN_NUMERIC_ENTITY){
			this._stateInNumericEntity(c);
		} else if(this._state === IN_HEX_ENTITY){
			this._stateInHexEntity(c);
		}

		else {
			this._cbs.onerror(Error("unknown _state"), this._state);
		}

		this._index++;
	}

	this._cleanup();
};

Tokenizer.prototype.pause = function(){
	this._running = false;
};
Tokenizer.prototype.resume = function(){
	this._running = true;

	if(this._index < this._buffer.length){
		this._parse();
	}
	if(this._ended){
		this._finish();
	}
};

Tokenizer.prototype.end = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".end() after done!"));
	if(chunk) this.write(chunk);

	this._ended = true;

	if(this._running) this._finish();
};

Tokenizer.prototype._finish = function(){
	//if there is remaining data, emit it in a reasonable way
	if(this._sectionStart < this._index){
		this._handleTrailingData();
	}

	this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function(){
	var data = this._buffer.substr(this._sectionStart);

	if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
		this._cbs.oncdata(data);
	} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
		this._cbs.oncomment(data);
	} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
		this._parseLegacyEntity();
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(2, 10);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(3, 16);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(
		this._state !== IN_TAG_NAME &&
		this._state !== BEFORE_ATTRIBUTE_NAME &&
		this._state !== BEFORE_ATTRIBUTE_VALUE &&
		this._state !== AFTER_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_VALUE_SQ &&
		this._state !== IN_ATTRIBUTE_VALUE_DQ &&
		this._state !== IN_ATTRIBUTE_VALUE_NQ &&
		this._state !== IN_CLOSING_TAG_NAME
	){
		this._cbs.ontext(data);
	}
	//else, ignore remaining data
	//TODO add a way to remove current tag
};

Tokenizer.prototype.reset = function(){
	Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
};

Tokenizer.prototype.getAbsoluteIndex = function(){
	return this._bufferOffset + this._index;
};

Tokenizer.prototype._getSection = function(){
	return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function(name){
	let section = this._getSection();
	switch (name) {
		case 'onattribute':
			this._cbs.onattribute(section);
			break
		case 'onattribdata':
			this._cbs.onattribdata(section);
			break
		case 'oncdatastart':
			this._cbs.oncdatastart(section);
			break
		case 'oncdataend':
			this._cbs.oncdataend(section);
			break
		case 'ontext':
			this._cbs.ontext(section);
			break
		case 'onprocessinginstruction':
			this._cbs.onprocessinginstruction(section);
			break
		case 'oncomment':
			this._cbs.oncomment(section);
			break
		case 'oncommentend':
			this._cbs.oncommentend(section);
			break
		case 'onclosetag':
			this._cbs.onclosetag(section);
			break
		case 'onopentag':
			this._cbs.onopentag(section);
			break
		case 'onopentagname':
			this._cbs.onopentagname(section);
			break
		case 'onerror':
			this._cbs.onerror(section);
			break
		case 'onend':
			this._cbs.onend(section);
			break
		default:
			throw new Error('Unsupported event: ' + name)
	}
	this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function(value){
	if(this._baseState !== TEXT){
		this._cbs.onattribdata(value); //TODO implement the new event
	} else {
		this._cbs.ontext(value);
	}
};

var Tokenizer$1 = Tokenizer_1;

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

var formTags = new Set([
	'input',
	'option',
	'optgroup',
	'select',
	'button',
	'datalist',
	'textarea'
]);

var openImpliesClose = new Map([
	['tr'      , new Set('tr','th','td')],
	['th'      , new Set('th')],
	['td'      , new Set('thead','th','td')],
	['body'    , new Set('head','link','script')],
	['li'      , new Set('li')],
	['p'       , new Set('p')],
	['h1'      , new Set('p')],
	['h2'      , new Set('p')],
	['h3'      , new Set('p')],
	['h4'      , new Set('p')],
	['h5'      , new Set('p')],
	['h6'      , new Set('p')],
	['select'  , formTags],
	['input'   , formTags],
	['output'  , formTags],
	['button'  , formTags],
	['datalist', formTags],
	['textarea', formTags],
	['option'  , new Set('option')],
	['optgroup', new Set('optgroup')]
]);

var voidElements = new Set([
	'area',
	'base',
	'basefont',
	'br',
	'col',
	'command',
	'embed',
	'frame',
	'hr',
	'img',
	'input',
	'isindex',
	'keygen',
	'link',
	'meta',
	'param',
	'source',
	'track',
	'wbr',
	//common self closing svg elements
	'path',
	'circle',
	'ellipse',
	'line',
	'rect',
	'use',
	'stop',
	'polyline',
	'polygon'
]);

var re_nameEnd = /\s|\//;

function Parser(cbs, options){
	this._options = options || {};
	this._cbs = cbs || {};

	this._tagname = "";
	this._attribname = "";
	this._attribvalue = "";
	this._attribs = null;
	this._stack = [];

	this.startIndex = 0;
	this.endIndex = null;

	this._lowerCaseTagNames = this._options.lowerCaseTags || !this._options.xmlMode;
	this._lowerCaseAttributeNames = this._options.lowerCaseAttributeNames || !this._options.xmlMode;

	if(this._options.Tokenizer) {
		Tokenizer$1 = this._options.Tokenizer;
	}
	this._tokenizer = new Tokenizer$1(this._options, this);

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
}

Parser.prototype._updatePosition = function(initialOffset){
	if(this.endIndex === null){
		if(this._tokenizer._sectionStart <= initialOffset){
			this.startIndex = 0;
		} else {
			this.startIndex = this._tokenizer._sectionStart - initialOffset;
		}
	}
	else this.startIndex = this.endIndex + 1;
	this.endIndex = this._tokenizer.getAbsoluteIndex();
};

//Tokenizer event handlers
Parser.prototype.ontext = function(data){
	this._updatePosition(1);
	this.endIndex--;

	if(this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function(name){
	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	this._tagname = name;

	if(!this._options.xmlMode && openImpliesClose.has(name)) {
		while (this._stack.length > 0) {
			var el = this._stack[this._stack.length - 1];
			if (openImpliesClose.get(name).has(el)) {
				this.onclosetag(el);
			} else {
				break
			}
		}
	}

	if(this._options.xmlMode || !(voidElements.has(name))){
		this._stack.push(name);
	}

	if(this._cbs.onopentagname) this._cbs.onopentagname(name);
	if(this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function(){
	this._updatePosition(1);

	if(this._attribs){
		if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
		this._attribs = null;
	}

	if(!this._options.xmlMode && this._cbs.onclosetag && voidElements.has(this._tagname)){
		this._cbs.onclosetag(this._tagname);
	}

	this._tagname = "";
};

Parser.prototype.onclosetag = function(name){
	this._updatePosition(1);
	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}
	// NOTE: the original implementation allows 'voidElements' in XML, such as in `<input>`, which
	// IMO is not valid. Only self-closing tags are allowd, such as in `<foo />`, but actually only
	// if it is declared as EMPTY in the XSD
	if(this._options.xmlMode) {
		const stack = this._stack;
		let last = stack.pop();
		while(last !== name) {
			if(this._cbs.onerror) {
				this._cbs.onerror("Unclosed tag <"+last+">");
			}
			last = stack.pop();
		}
		this.onopentagend();
		if(this._cbs.onclosetag) {
			this._cbs.onclosetag(last);
		}
	} else {
		if(this._stack.length && (!(voidElements.has(name)))) {
			let pos = this._stack.lastIndexOf(name);
			if(pos !== -1){
				if(this._cbs.onclosetag){
					pos = this._stack.length - pos;
					while(pos--) this._cbs.onclosetag(this._stack.pop());
				}
				else this._stack.length = pos;
			} else if(name === "p"){
				this.onopentagname(name);
				this._closeCurrentTag();
			}
		} else if(name === "br" || name === "p"){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	}
};

Parser.prototype.onselfclosingtag = function(){
	if(this._options.xmlMode || this._options.recognizeSelfClosing){
		this._closeCurrentTag();
	} else {
		this.onopentagend();
	}
};

Parser.prototype._closeCurrentTag = function(){
	var name = this._tagname;

	this.onopentagend();

	//self-closing tags will be on the top of the stack
	//(cheaper check than in onclosetag)
	if(this._stack[this._stack.length - 1] === name){
		if(this._cbs.onclosetag){
			this._cbs.onclosetag(name);
		}
		this._stack.pop();
	}
};

Parser.prototype.onattribname = function(name){
	if(this._lowerCaseAttributeNames){
		name = name.toLowerCase();
	}
	this._attribname = name;
};

Parser.prototype.onattribdata = function(value){
	this._attribvalue += value;
};

Parser.prototype.onattribend = function(){
	if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
	if(
		this._attribs &&
		!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
	){
		this._attribs[this._attribname] = this._attribvalue;
	}
	this._attribname = "";
	this._attribvalue = "";
};

Parser.prototype._getInstructionName = function(value){
	var idx = value.search(re_nameEnd),
	    name = idx < 0 ? value : value.substr(0, idx);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	return name;
};

Parser.prototype.ondeclaration = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("!" + name, "!" + value);
	}
};

Parser.prototype.onprocessinginstruction = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("?" + name, "?" + value);
	}
};

Parser.prototype.oncomment = function(value){
	this._updatePosition(4);

	if(this._cbs.oncomment) this._cbs.oncomment(value);
	if(this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function(value){
	this._updatePosition(1);

	if(this._options.xmlMode || this._options.recognizeCDATA){
		if(this._cbs.oncdatastart) this._cbs.oncdatastart();
		if(this._cbs.ontext) this._cbs.ontext(value);
		if(this._cbs.oncdataend) this._cbs.oncdataend();
	} else {
		this.oncomment("[CDATA[" + value + "]]");
	}
};

Parser.prototype.onerror = function(err){
	if(this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function(){
	if(this._cbs.onclosetag){
		for(
			var i = this._stack.length;
			i > 0;
			this._cbs.onclosetag(this._stack[--i])
		);
	}
	if(this._cbs.onend) this._cbs.onend();
};


//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset = function(){
	if(this._cbs.onreset) this._cbs.onreset();
	this._tokenizer.reset();

	this._tagname = "";
	this._attribname = "";
	this._attribs = null;
	this._stack = [];

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
};

//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete = function(data){
	this.reset();
	this.end(data);
};

Parser.prototype.write = function(chunk){
	this._tokenizer.write(chunk);
};

Parser.prototype.end = function(chunk){
	this._tokenizer.end(chunk);
};

Parser.prototype.pause = function(){
	this._tokenizer.pause();
};

Parser.prototype.resume = function(){
	this._tokenizer.resume();
};

//alias for backwards compat
Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;

var Parser_1 = Parser;

// monkey patching

Parser_1.prototype.ondeclaration = function(value){
  if(this._cbs.ondeclaration){
    this._cbs.ondeclaration(value);
  } else if(this._cbs.onprocessinginstruction){
    var name = this._getInstructionName(value);
    this._cbs.onprocessinginstruction("!" + name, "!" + value);
  }
};

Parser_1.prototype.oncdata = function(value){
  this._updatePosition(1);

  if(this._options.xmlMode || this._options.recognizeCDATA){
    if(this._cbs.oncdatastart) this._cbs.oncdatastart(value);
    // we don't want `ontext` getting called here
    if(this._cbs.oncdataend) this._cbs.oncdataend();
  } else {
    this.oncomment("[CDATA[" + value + "]]");
  }
};

/*
  Parses HTML or XML

  Options:
  - format: 'html' or 'xml'
  - ownerDocument: an MemoryDOMElement instance of type 'document'
*/
function parseMarkup (markup, options) {
  const format = options.ownerDocument ? options.ownerDocument.format : options.format;
  /* istanbul ignore next */
  if (!format) {
    throw new Error("Either 'ownerDocument' or 'format' must be set.")
  }
  const parserOptions = Object.assign({}, options, {
    xmlMode: (format === 'xml')
  });
  const handler = new DomHandler({ format, elementFactory: options.elementFactory });
  const parser = new Parser_1(handler, parserOptions);
  parser.end(markup);
  return handler.document
}

const RE_WHITESPACE = /\s+/g;
const RE_DOCTYPE = /^DOCTYPE\s+([^\s]+)(?:\s+PUBLIC\s+["]([^"]+)["](?:\s+["]([^"]+)["])?)?\s*$/;

/*
  Customized implementation of [DomHandler](https://github.com/fb55/domhandler).
*/
class DomHandler {
  constructor (options = {}) {
    this.elementFactory = options.elementFactory;
    if (!this.elementFactory) throw new Error("'elementFactory' is required")
    this.options = options;
    this.document = null;
    this._tagStack = [];
  }

  // called directly after construction of Parser and at the end of Parser.reset()
  onparserinit () {
    this.document = this.elementFactory('document', { format: this.options.format });
    this._tagStack = [this.document];
  }

  onend () {
    // TODO: would be nice to generate a good error message
    if (this._tagStack.length > 1) {
      throw new Error('Unexpected EOF. Tag was opened but not closed.')
    }
  }

  onerror (error) {
    throw new Error(error)
  }

  onclosetag () {
    this._tagStack.pop();
  }

  _addDomElement (element) {
    const parent = this._tagStack[this._tagStack.length - 1];
    if (!parent.childNodes) parent.childNodes = [];
    const siblings = parent.childNodes;

    const previousSibling = siblings[siblings.length - 1];
    // set up next/previous link
    element.next = null;
    if (previousSibling) {
      element.prev = previousSibling;
      previousSibling.next = element;
    } else {
      element.prev = null;
    }
    // either push the element to the current open tag's children, or keep a reference as top-level element
    siblings.push(element);
    element.parent = parent || null;
  }

  onopentag (name, attributes) {
    const element = this.document.createElement(name);
    forEach(attributes, (val, key) => {
      element.setAttribute(key, val);
    });
    this._addDomElement(element);
    this._tagStack.push(element);
  }

  ontext (text) {
    if (this.options.normalizeWhitespace) {
      text = text.replace(RE_WHITESPACE, ' ');
    }
    let lastTag;
    const _top = this._tagStack[this._tagStack.length - 1];
    if (_top && _top.childNodes) lastTag = _top.childNodes[_top.childNodes.length - 1];
    if (lastTag && lastTag.type === domelementtype.Text) {
      lastTag.data += text;
    } else {
      const element = this.document.createTextNode(text);
      this._addDomElement(element);
    }
  }

  oncomment (data) {
    var lastTag = this._tagStack[this._tagStack.length - 1];
    if (lastTag && lastTag.type === domelementtype.Comment) {
      lastTag.data += data;
    } else {
      const element = this.document.createComment(data);
      this._addDomElement(element);
      this._tagStack.push(element);
    }
  }

  oncommentend () {
    this._tagStack.pop();
  }

  oncdatastart (data) {
    const element = this.document.createCDATASection(data);
    this._addDomElement(element);
    this._tagStack.push(element);
  }

  oncdataend () {
    this._tagStack.pop();
  }

  onprocessinginstruction (name, data) {
    // ATTENTION: this looks a bit hacky, but is essentially caused by the XML parser implementation
    // remove leading '?${name}' and trailing '?'
    data = data.slice(name.length, -1).trim();
    // remove leading ?
    name = name.slice(1);
    const el = this.document.createProcessingInstruction(name, data);
    if (name === 'xml') {
      this.document._xmlInstruction = el;
    } else {
      this._addDomElement(el);
    }
  }

  ondeclaration (data) {
    if (data.startsWith('DOCTYPE')) {
      const m = RE_DOCTYPE.exec(data);
      if (!m) throw new Error('Could not parse DOCTYPE element: ' + data)
      this.document.setDoctype(m[1], m[2], m[3]);
    } else {
      throw new Error('Not implemented: parse declaration ' + data)
    }
  }
}

// Singleton for browser window stub
let _browserWindowStub;

class MemoryDOMElement extends DOMElement {
  constructor (type, args = {}) {
    super();

    this.type = type;
    if (!type) throw new Error("'type' is mandatory")

    this.ownerDocument = args.ownerDocument;
    /* istanbul ignore next */
    if (type !== 'document' && !this.ownerDocument) {
      throw new Error("'ownerDocument' is mandatory")
    }

    // NOTE: there are some properties which are named so that this
    // can be used together with htmlparser2 and css-select
    // but which could have a better naming, e.g., name -> tagName

    switch (type) {
      case domelementtype.Tag: {
        if (!args.name) throw new Error("'name' is mandatory.")
        this.name = this._normalizeName(args.name);
        this.nameWithoutNS = nameWithoutNS(this.name);
        this.properties = new Map();
        this.attributes = new Map();
        this.classes = new Set();
        this.styles = new Map();
        this.eventListeners = [];
        this.childNodes = args.children || args.childNodes || [];
        this._assign(args);
        break
      }
      case domelementtype.Text:
      case domelementtype.Comment: {
        this.data = args.data || '';
        break
      }
      case domelementtype.CDATA: {
        this.data = args.data || '';
        break
      }
      case domelementtype.Directive: {
        if (!args.name) throw new Error("'name' is mandatory.")
        this.name = this._normalizeName(args.name);
        this.nameWithoutNS = nameWithoutNS(this.name);
        this.data = args.data;
        break
      }
      case domelementtype.Doctype: {
        this.data = args.data;
        break
      }
      case 'document': {
        const format = args.format;
        this.format = format;
        if (!format) throw new Error("'format' is mandatory.")
        this.childNodes = args.children || args.childNodes || [];
        this._index = null;
        switch (format) {
          case 'xml':
            this.contentType = 'application/xml';
            break
          case 'html':
            this.contentType = 'text/html';
            break
          default:
            throw new Error('Unsupported format ' + format)
        }
        break
      }
      default:
        this.name = null;
        this.properties = new Map();
        this.attributes = new Map();
        this.classes = new Set();
        this.styles = new Map();
        this.eventListeners = [];
        this.childNodes = args.children || args.childNodes || [];
    }
  }

  getNativeElement () {
    return this
  }

  getNodeType () {
    switch (this.type) {
      case domelementtype.Tag:
      case domelementtype.Script:
      case domelementtype.Style:
        return 'element'
      default:
        return this.type
    }
  }

  isTextNode () {
    return this.type === 'text'
  }

  isElementNode () {
    return this.type === 'tag' || this.type === 'script'
  }

  isCommentNode () {
    return this.type === 'comment'
  }

  isDocumentNode () {
    return this.type === 'document'
  }

  isComponentNode () {
    return this.type === 'component'
  }

  clone (deep) {
    const clone = new MemoryDOMElement(this.type, this);
    if (this.childNodes) {
      clone.childNodes.length = 0;
      if (deep) {
        this.childNodes.forEach((child) => {
          clone.appendChild(child.clone(deep));
        });
      }
    }
    return clone
  }

  get tagName () {
    return this.getTagName()
  }

  set tagName (tagName) {
    this.setTagName(tagName);
  }

  getTagName () {
    return this.name
  }

  setTagName (tagName) {
    if (this._isXML()) {
      this.name = String(tagName);
    } else {
      this.name = String(tagName).toLowerCase();
    }
    this.nameWithoutNS = nameWithoutNS(this.name);
    return this
  }

  hasAttribute (name) {
    if (this.attributes) {
      return this.attributes.has(name)
    }
  }

  getAttribute (name) {
    if (this.attributes) {
      return this.attributes.get(name)
    }
  }

  setAttribute (name, value) {
    if (this.attributes) {
      value = String(value);
      // Note: keeping the Set version of classes and styles in sync
      switch (name) {
        case 'id': {
          this._invalidateIndex();
          break
        }
        case 'class':
          this.classes = new Set();
          parseClasses(this.classes, value);
          break
        case 'style':
          this.styles = new Map();
          parseStyles(this.styles, value);
          break
          //
      }
      this.attributes.set(name, value);
      if (this._isHTML()) {
        deriveHTMLPropertyFromAttribute(this, name, value);
      }
    }
    return this
  }

  removeAttribute (name) {
    if (this.attributes) {
      switch (name) {
        case 'id':
          this._invalidateIndex();
          break
        case 'class':
          this.classes = new Set();
          break
        case 'style':
          this.styles = new Map();
          break
          //
      }
      this.attributes.delete(name);
    }
    return this
  }

  getAttributes () {
    return this.attributes
  }

  getProperty (name) {
    if (this.properties) {
      return this.properties.get(name)
    }
  }

  setProperty (name, value) {
    if (this.properties) {
      if (this._isXML()) {
        throw new Error('setProperty() is only be used on HTML elements')
      }
      _setHTMLPropertyValue(this, name, value);
    }
    return this
  }

  hasClass (name) {
    if (this.classes) {
      return this.classes.has(name)
    }
  }

  addClass (name) {
    if (this.classes) {
      this.classes.add(name);
      this.attributes.set('class', stringifyClasses(this.classes));
    }
    return this
  }

  removeClass (name) {
    if (this.classes && this.classes.has(name)) {
      this.classes.delete(name);
      this.attributes.set('class', stringifyClasses(this.classes));
    }
    return this
  }

  getContentType () {
    return this.getOwnerDocument().contentType
  }

  getDoctype () {
    if (this.isDocumentNode()) {
      return _findDocTypeElement(this)
    } else {
      return this.getOwnerDocument().getDoctype()
    }
  }

  setDoctype (qualifiedNameStr, publicId, systemId) {
    // NOTE: there must be only one <!DOCTYPE> before the first content element
    const doc = this.getOwnerDocument();
    const oldDocType = _findDocTypeElement(doc);
    const newDocType = this.createDocumentType(qualifiedNameStr, publicId, systemId);
    if (oldDocType) {
      doc.replaceChild(oldDocType, newDocType);
    } else {
      // insert it before the first ELEMENT
      doc.insertBefore(newDocType, doc.getChildren()[0]);
    }
    doc.doctype = newDocType;
  }

  getInnerHTML () {
    const isXML = this._isXML();
    return domutils.getInnerHTML(this, { xmlMode: isXML, decodeEntities: !isXML })
  }

  // TODO: parse html using settings from el,
  // clear old childNodes and append new childNodes
  setInnerHTML (html) {
    if (this.childNodes) {
      const isXML = this._isXML();
      const _doc = parseMarkup(html, {
        ownerDocument: this.getOwnerDocument(),
        format: isXML ? 'xml' : 'html',
        decodeEntities: !isXML,
        elementFactory: MemoryDOMElementFactory
      });
      this.empty();
      // ATTENTION: important to copy the childNodes array first
      // as appendChild removes from parent
      _doc.childNodes.slice(0).forEach(child => {
        this.appendChild(child);
      });
    }
    return this
  }

  getOuterHTML () {
    const isXML = this._isXML();
    return domutils.getOuterHTML(this, { xmlMode: isXML, decodeEntities: !isXML })
  }

  getTextContent () {
    return domutils.getText(this)
  }

  setTextContent (text) {
    switch (this.type) {
      case domelementtype.Text:
      case domelementtype.Comment:
      case domelementtype.CDATA: {
        this.data = text;
        break
      }
      default: {
        if (this.childNodes) {
          const child = this.createTextNode(text);
          this.empty();
          this.appendChild(child);
        }
      }
    }
    return this
  }

  getStyle (name) {
    if (this.styles) {
      return this.styles.get(name)
    }
  }

  setStyle (name, value) {
    if (this.styles) {
      if (DOMElement.pxStyles[name] && isNumber(value)) {
        value = value + 'px';
      }
      this.styles.set(name, value);
      this.attributes.set('style', stringifyStyles(this.styles));
    }
    return this
  }

  is (cssSelector) {
    return cssSelect.is(this, cssSelector, { xmlMode: this._isXML() })
  }

  // TODO: it would be nice if we could use an index here
  // however,
  getElementById (id) {
    const doc = this.getOwnerDocument();
    if (!doc._index) {
      doc._createIndex();
    }
    return doc._index.get(id)
  }

  find (cssSelector) {
    return cssSelect.selectOne(cssSelector, this, { xmlMode: this._isXML() })
  }

  findAll (cssSelector) {
    return cssSelect.selectAll(cssSelector, this, { xmlMode: this._isXML() })
  }

  getChildCount () {
    if (this.childNodes) {
      return this.childNodes.length
    } else {
      return 0
    }
  }

  getChildNodes () {
    return this.childNodes.slice(0)
  }

  getChildren () {
    return this.childNodes.filter(function (node) {
      return node.type === 'tag'
    })
  }

  get children () {
    return this.getChildren()
  }

  getChildAt (pos) {
    if (this.childNodes) {
      return this.childNodes[pos]
    }
  }

  getChildIndex (child) {
    if (this.childNodes) {
      return this.childNodes.indexOf(child)
    }
  }

  getLastChild () {
    if (this.childNodes) {
      return last(this.childNodes)
    }
  }

  getFirstChild () {
    if (this.childNodes) {
      return this.childNodes[0]
    }
  }

  getNextSibling () {
    return this.next
  }

  getPreviousSibling () {
    return this.prev
  }

  getParent () {
    // TODO: to be consistent with the Browser implementation
    // root elements should return null as parent element.
    // However, this breaks other code ATM.
    // let parent = this.parent
    // if (parent && parent.type !== 'document') {
    //   return this.parent
    // } else {
    //   return null
    // }
    return this.parent
  }

  getOwnerDocument () {
    return (this.type === 'document') ? this : this.ownerDocument
  }

  getFormat () {
    return this.getOwnerDocument().format
  }

  createDocument (format) {
    return MemoryDOMElement.createDocument(format)
  }

  createElement (tagName) {
    return new MemoryDOMElement(domelementtype.Tag, { name: tagName, ownerDocument: this.getOwnerDocument() })
  }

  createTextNode (text) {
    return new MemoryDOMElement(domelementtype.Text, { data: text, ownerDocument: this.getOwnerDocument() })
  }

  createComment (data) {
    return new MemoryDOMElement(domelementtype.Comment, { data: data, ownerDocument: this.getOwnerDocument() })
  }

  createProcessingInstruction (name, data) {
    return new MemoryDOMElement(domelementtype.Directive, { name: name, data: data, ownerDocument: this.getOwnerDocument() })
  }

  createDocumentType (qualifiedNameStr, publicId, systemId) {
    return new MemoryDOMDoctype(domelementtype.Doctype, { data: { name: qualifiedNameStr, publicId, systemId }, ownerDocument: this.getOwnerDocument() })
  }

  createCDATASection (data) {
    return new MemoryDOMElement(domelementtype.CDATA, { data: data, ownerDocument: this.getOwnerDocument() })
  }

  appendChild (child) {
    if (this.childNodes && !isNil(child)) {
      child = this._normalizeChild(child);
      if (!child) return this
      if (child.id) this._invalidateIndex();
      domutils.appendChild(this, child);
      child.ownerDocument = this.getOwnerDocument();
    }
    return this
  }

  removeChild (child) {
    if (child.parentNode === this) {
      if (child.id) this._invalidateIndex();
      child.remove();
    }
  }

  insertAt (pos, child) {
    child = this._normalizeChild(child);
    if (!child) return this
    if (child.id) this._invalidateIndex();
    const childNodes = this.childNodes;
    if (childNodes) {
      // NOTE: manipulating htmlparser's internal children array
      if (pos >= childNodes.length) {
        domutils.appendChild(this, child);
      } else {
        domutils.prepend(childNodes[pos], child);
      }
      child.ownerDocument = this.getOwnerDocument();
    }
    return this
  }

  insertBefore (newChild, before) {
    if (newChild.id) this._invalidateIndex();
    if (isNil(before)) {
      return this.appendChild(newChild)
    } else if (this.childNodes) {
      var pos = this.childNodes.indexOf(before);
      if (pos > -1) {
        domutils.prepend(before, newChild);
        newChild.ownerDocument = this.getOwnerDocument();
      } else {
        throw new Error('insertBefore(): reference node is not a child of this element.')
      }
    }
    return this
  }

  removeAt (pos) {
    const childNodes = this.childNodes;
    if (childNodes) {
      const child = childNodes[pos];
      if (child.id) this._invalidateIndex();
      child.remove();
    }
    return this
  }

  empty () {
    this._invalidateIndex();
    const childNodes = this.childNodes;
    if (childNodes) {
      childNodes.forEach((child) => {
        child.next = child.prev = child.parent = null;
      });
      childNodes.length = 0;
    }
    this._invalidateIndex();
    return this
  }

  remove () {
    if (this.id) this._invalidateIndex();
    domutils.removeElement(this);
    return this
  }

  replaceChild (oldChild, newChild) {
    if (oldChild.id || newChild.id) this._invalidateIndex();
    if (oldChild.parent === this) {
      oldChild.replaceWith(newChild);
    }
    return this
  }

  replaceWith (newEl) {
    if (this.id || newEl.id) this._invalidateIndex();
    newEl = this._normalizeChild(newEl);
    domutils.replaceElement(this, newEl);
    newEl.ownerDocument = this.getOwnerDocument();
    return this
  }

  getEventListeners () {
    return this.eventListeners || []
  }

  click () {
    this.emit('click', { target: this, currentTarget: this });
    return true
  }

  emit (name, data) {
    this._propagateEvent(new MemoryDOMElementEvent(name, this, data));
  }

  getBoundingClientRect () {
    return { top: 0, left: 0, height: 0, width: 0 }
  }

  getClientRects () {
    return [{ top: 0, left: 0, height: 0, width: 0 }]
  }

  _propagateEvent (event) {
    const listeners = this.eventListeners;
    if (listeners) {
      listeners.forEach(l => {
        if (l.eventName === event.type) {
          l.handler(event);
        }
      });
      if (event.stopped) return
      const p = this.parentNode;
      if (p) p._propagateEvent(event);
    }
  }

  removeAllEventListeners () {
    this.eventListeners = [];
    return this
  }

  _assign (other) {
    if (other.name) this.name = other.name;
    if (this.classes && other.classes) {
      other.classes.forEach((val) => {
        this.classes.add(val);
      });
    }
    if (this.styles && other.styles) {
      forEach(other.styles, (val, name) => {
        this.styles.set(name, val);
      });
    }
    // TODO: while it is 'smart' to deal with 'style' and 'class'
    // implicitly, it introduces some confusion here
    const otherAttributes = other.attributes || other.attribs;
    if (this.attributes && otherAttributes) {
      forEach(otherAttributes, (val, name) => {
        switch (name) {
          case 'class': {
            parseClasses(this.classes, val);
            break
          }
          case 'style': {
            parseStyles(this.styles, val);
            break
          }
            //
        }
        this.attributes.set(name, val);
      });
    }
    if (this.eventListeners && other.eventListeners) {
      this.eventListeners = this.eventListeners.concat(other.eventListeners);
    }
  }

  _normalizeChild (child) {
    if (isNil(child)) return

    if (isString(child)) {
      child = this.createTextNode(child);
    }
    /* istanbul ignore next */
    if (!child || !child._isMemoryDOMElement) {
      throw new Error('Illegal argument: only String and MemoryDOMElement instances are valid.')
    }
    return child
  }

  _normalizeName (name) {
    if (this._isXML()) {
      return name
    } else {
      return name.toLowerCase()
    }
  }

  _isHTML () {
    return this.getFormat() === 'html'
  }

  _isXML () {
    return this.getFormat() === 'xml'
  }

  _invalidateIndex () {
    this.getOwnerDocument()._index = null;
  }

  _createIndex () {
    const elementsWithId = this.getOwnerDocument().findAll('[id]');
    this._index = new Map(elementsWithId.map(el => [el.id, el]));
  }

  // TODO: do we really need this?
  get _isMemoryDOMElement () { return true }

  static createDocument (format, opts = {}) {
    if (format === 'xml') {
      const doc = new MemoryDOMElement('document', { format: format });
      const xmlInstruction = [];
      if (opts.version) {
        xmlInstruction.push(`version="${opts.version}"`);
      }
      if (opts.encoding) {
        xmlInstruction.push(`encoding="${opts.encoding}"`);
      }
      if (xmlInstruction.length > 0) {
        doc._xmlInstruction = doc.createProcessingInstruction('xml', xmlInstruction.join(' '));
      }
      return doc
    } else {
      return MemoryDOMElement.parseMarkup(DOMElement.EMPTY_HTML, 'html')
    }
  }

  static parseMarkup (str, format, options = {}) {
    if (!str) {
      return MemoryDOMElement.createDocument(format)
    }
    // decodeEntities by default only in HTML mode
    const decodeEntities = format === 'html';
    const parserOpts = Object.assign({
      format,
      decodeEntities,
      elementFactory: MemoryDOMElementFactory
    }, options);
    // opt-out from HTML structure sanitization
    if (options.raw) {
      return parseMarkup(str, parserOpts)
    }
    if (options.snippet) {
      str = `<__snippet__>${str}</__snippet__>`;
    }
    let doc;
    if (format === 'html') {
      doc = parseMarkup(str, parserOpts);
      _sanitizeHTMLStructure(doc);
    } else if (format === 'xml') {
      doc = parseMarkup(str, parserOpts);
    }
    if (options.snippet) {
      const childNodes = doc.find('__snippet__').childNodes;
      if (childNodes.length === 1) {
        return childNodes[0]
      } else {
        return childNodes
      }
    } else {
      return doc
    }
  }

  static wrapNativeElement (el) {
    if (inBrowser) {
      // HACK: at many places we have an `isBrowser` check
      // to skip code that uses window or window.document
      // To be able to test such code together with the memory DOM implementation
      // we stub out window and document
      if (el === window || el === window.document) {
        return new DOMElementStub()
      // HACK: additionally, if a window.document.Node or a BrowserDOMElement is given
      // as it happens when trying to mount onto t.sandbox with DefaultDOMElement using MemoryDOMElement as default
      // we just return a new root element
      } else if (el instanceof window.Node || el._isBrowserDOMElement) ;
    }
    /* istanbul ignore next */
    if (!el._isMemoryDOMElement) {
      throw new Error('Illegal argument: expected MemoryDOMElement instance')
    }
    return el
  }

  static wrap (el) { return MemoryDOMElement.wrapNativeElement(el) }

  static unwrap (el) {
    /* istanbul ignore next */
    if (!el._isMemoryDOMElement) {
      throw new Error('Illegal argument: expected MemoryDOMElement instance')
    }
    return el
  }

  // TODO: this is used only in browser to determine if
  // a selection  is reverse.
  /* istanbul ignore next */
  static isReverse () {
    return false
  }

  static getBrowserWindow () {
    // HACK: this is a bit awkward
    if (!_browserWindowStub) {
      _browserWindowStub = new MemoryWindowStub();
    }
    return _browserWindowStub
  }
}

function MemoryDOMElementFactory (type, data) {
  return new MemoryDOMElement(type, data)
}

class MemoryDOMDoctype extends MemoryDOMElement {
  get name () { return this.data.name }
  get publicId () { return this.data.publicId }
  get systemId () { return this.data.systemId }
}

function parseClasses (classes, classStr) {
  classStr.split(/\s+/).forEach((name) => {
    classes.add(name);
  });
}

function stringifyClasses (classes) {
  return Array.from(classes).join(' ')
}

function parseStyles (styles, styleStr) {
  styleStr = (styleStr || '').trim();
  if (!styleStr) return
  styleStr.split(';').forEach((style) => {
    const n = style.indexOf(':');
    // skip if there is no :, or if it is the first/last character
    if (n < 1 || n === style.length - 1) return
    const name = style.slice(0, n).trim();
    const val = style.slice(n + 1).trim();
    styles.set(name, val);
  });
}

function stringifyStyles (styles) {
  if (!styles) return ''
  let str = Object.keys(styles).map((name) => {
    return name + ':' + styles[name]
  }).join(';');
  if (str.length > 0) str += ';';
  return str
}

const BUILTIN_EVENTS = [
  'keydown', 'keyup', 'keypress',
  'mousedown', 'mouseup', 'mouseover', 'click', 'dblclick'
].reduce((m, k) => { m[k] = true; return m }, {});

class MemoryDOMElementEvent {
  constructor (type, target, detail) {
    this.type = type;
    this.timeStamp = Date.now();
    this.target = target;

    if (BUILTIN_EVENTS[type]) {
      // TODO: dunno if this is the best way of doing it
      if (detail) {
        Object.assign(this, detail);
      }
    } else {
      this.detail = detail;
    }
  }

  stopPropagation () {
    this.stopped = true;
  }

  preventDefault () {
    this.defaultPrevented = true;
  }
}

class DOMElementStub {
  on () {}
  off () {}
}

// EXPERIMENTAL: we want to be able to use the Router in
// tests using MemoryDOM
class MemoryWindowStub extends MemoryDOMElement {
  constructor () {
    super('window', { ownerDocument: MemoryDOMElement.createDocument('html') });

    const location = {
      href: '',
      hash: ''
    };

    function _updateLocation (url) {
      const hashIdx = url.indexOf('#');
      location.href = url;
      if (hashIdx >= 0) {
        location.hash = url.slice(hashIdx);
      }
    }

    const history = {
      replaceState (stateObj, title, url) {
        _updateLocation(url);
      },
      pushState (stateObj, title, url) {
        _updateLocation(url);
      }
    };

    this.location = location;
    this.history = history;
  }
}

function nameWithoutNS (name) {
  const idx = name.indexOf(':');
  if (idx > 0) {
    return name.slice(idx + 1)
  } else {
    return name
  }
}

// Note: some attributes are used to initialize an
// element property
const ATTR_TO_PROPS = {
  input: {
    value: true,
    checked: (el, name, value) => {
      const checked = (value !== 'off');
      el.setProperty('checked', checked);
    }
  }
};

function deriveHTMLPropertyFromAttribute (el, name, value) {
  const mappings = ATTR_TO_PROPS[el.tagName];
  if (mappings) {
    const mapper = mappings[name];
    if (mapper === true) {
      el.setProperty(name, value);
    } else if (mapper) {
      mapper(el, name, value);
    }
  }
}

const PROPERTY_TRANSFORMATIONS = {
  input: {
    checked: (el, name, value) => {
      if (value === true) {
        el.properties.set(name, true);
        el.properties.set('value', 'on');
      } else {
        el.properties.set(name, false);
        el.properties.set('value', 'off');
      }
    },
    value: (el, name, value) => {
      const type = el.getAttribute('type');
      switch (type) {
        case 'checkbox':
          if (value === 'on') {
            el.properties.set(name, true);
            el.properties.set('value', 'on');
          } else {
            el.properties.set(name, false);
            el.properties.set('value', 'off');
          }
          break
        default:
          _setProperty(el, name, value);
      }
    }
  }
};

function _setProperty (el, name, value) {
  if (value === undefined) {
    el.properties.delete(name);
  } else {
    el.properties.set(name, String(value));
  }
}

function _setHTMLPropertyValue (el, name, value) {
  const trafos = PROPERTY_TRANSFORMATIONS[el.tagName];
  if (trafos) {
    const mapper = trafos[name];
    if (mapper) {
      mapper(el, name, value);
      return
    }
  }
  _setProperty(el, name, value);
}

function _sanitizeHTMLStructure (doc) {
  // as opposed to DOMParser in the browser
  // htmlparser2 does not create <head> and <body> per se
  // thus we need to make sure that everything is working
  // similar as in the browser
  let htmlEl = doc.find('html');
  if (!htmlEl) {
    // remove head and nodes which must go into the head
    // so they do not go into the body
    let headEl = doc.find('head');
    const titleEl = doc.find('title');
    const metaEls = doc.findAll('meta');
    let bodyEl = doc.find('body');
    if (headEl) headEl.remove();
    if (titleEl) titleEl.remove();
    metaEls.forEach(e => e.remove());
    if (bodyEl) bodyEl.remove();

    // keep the remaining content nodes,
    // we will add them to the body
    const contentNodes = doc.childNodes.slice();
    contentNodes.forEach((c) => { c.parent = null; });
    doc.childNodes.length = 0;

    htmlEl = doc.createElement('html');
    // if not there create a <head> and
    // add all the elements that are supposed to
    // go there
    if (!headEl) {
      headEl = doc.createElement('head');
      headEl.appendChild(titleEl);
      headEl.append(metaEls);
      htmlEl.appendChild(headEl);
    }
    if (!bodyEl) {
      bodyEl = doc.createElement('body');
      bodyEl.append(contentNodes);
    }
    htmlEl.appendChild(bodyEl);

    doc.append(htmlEl);
  }
}

function _findDocTypeElement (doc) {
  // Note: the looked up doctype element will be cached on the document element
  if (doc.doctype) return doc.doctype
  const childNodes = doc.childNodes;
  for (let i = 0; i < childNodes.length; i++) {
    const child = childNodes[i];
    if (child.type === domelementtype.Doctype) {
      doc.doctype = child;
      return child
    }
  }
}

/**
  A Bridge to the default DOMElement implementation, either BrowserDOMElement, or MemoryDOMElement.
*/
const DefaultDOMElement = {};

DefaultDOMElement.createDocument = function (format, opts) {
  return _getDefaultImpl().createDocument(format, opts)
};

/* istanbul ignore next */
DefaultDOMElement.createElement = function (tagName) {
  console.error('DEPRECATED: every element should have an ownerDocument. Use DefaultDOMElement.createDocument() to create a document first');
  const doc = DefaultDOMElement.createDocument('html');
  return doc.createElement(tagName)
};

/* istanbul ignore next */
DefaultDOMElement.createTextNode = function (text) {
  console.error('DEPRECATED: every element should have a ownerDocument. Use DefaultDOMElement.createDocument() to create a document first');
  const doc = DefaultDOMElement.createDocument('html');
  return doc.createTextNode(text)
};

/*
  A wrapper for Browser's `window` providing
  the DOMElement's eventlistener API.
*/
DefaultDOMElement.getBrowserWindow = function () {
  return _getDefaultImpl().getBrowserWindow()
};

/*
  @param {String} html
  @returns {DOMElement|DOMElement[]}
*/
DefaultDOMElement.parseHTML = function (html, options) {
  return _getDefaultImpl().parseMarkup(html, 'html', options)
};

/*
  @param {String} xml
  @returns {DOMElement|DOMElement[]}
*/
DefaultDOMElement.parseXML = function (xml, options) {
  return _getDefaultImpl().parseMarkup(xml, 'xml', options)
};

DefaultDOMElement.parseSnippet = function (str, format) {
  return _getDefaultImpl().parseMarkup(str, format, { snippet: true })
};

DefaultDOMElement.wrap =
DefaultDOMElement.wrapNativeElement = function (nativeEl) {
  if (!nativeEl) throw new Error('Illegal argument')
  return _getDefaultImpl().wrap(nativeEl)
};

DefaultDOMElement.unwrap = function (nativeEl) {
  if (!nativeEl) throw new Error('Illegal argument')
  return _getDefaultImpl().unwrap(nativeEl)
};

// TODO: this should not be part of DefaultDOMElement
/* istanbul ignore next */
DefaultDOMElement.isReverse = function (anchorNode, anchorOffset, focusNode, focusOffset) {
  return _getDefaultImpl().isReverse(anchorNode, anchorOffset, focusNode, focusOffset)
};

// used for testing
DefaultDOMElement._forceMemoryDOM = false;

function _getDefaultImpl () {
  if (DefaultDOMElement._forceMemoryDOM) {
    return MemoryDOMElement
  } else if (platform.inBrowser || platform.inElectron) {
    return BrowserDOMElement
  } else {
    return MemoryDOMElement
  }
}

function stop (event) {
  event.stopPropagation();
}

function stopAndPrevent (event) {
  event.stopPropagation();
  event.preventDefault();
}

function flatten (arr) {
  return Array.prototype.concat.apply([], arr)
}

function getClassName (obj) {
  const ctor = obj.constructor || obj;
  return ctor.displayName || ctor.name
}

function hasOwnProperty (obj, propName) {
  return Object.prototype.hasOwnProperty.call(obj, propName)
}

function deleteFromArray (array, value) {
  if (!array) return
  for (var i = 0; i < array.length; i++) {
    if (array[i] === value) {
      array.splice(i, 1);
      i--;
    }
  }
}

function flattenOften (arr, max) {
  if (!(max > 0)) throw new Error("'max' must be a positive number")
  let l = arr.length;
  arr = flatten(arr);
  let round = 1;
  while (round < max && l < arr.length) {
    l = arr.length;
    arr = flatten(arr);
    round++;
  }
  return arr
}

function isBoolean (val) {
  return (val === true || val === false || (val && val.constructor === Boolean))
}

function isPlainObject (o) {
  return Boolean(o) && o.constructor === {}.constructor
}

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var Symbol$1 = root.Symbol;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray$1 = Array.isArray;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$1.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag$1 && symToStringTag$1 in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/** Used to compose unicode character classes. */
var rsAstralRange$1 = '\\ud800-\\udfff',
    rsComboMarksRange$1 = '\\u0300-\\u036f',
    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
    rsVarRange$1 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange$1 + ']',
    rsCombo = '[' + rsComboRange$1 + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange$1 + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ$1 = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange$1 + ']?',
    rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange$2 = '\\u0300-\\u036f',
    reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

/** Used to compose unicode capture groups. */
var rsCombo$1 = '[' + rsComboRange$2 + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo$1, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

/** Used to compose unicode character classes. */
var rsAstralRange$2 = '\\ud800-\\udfff',
    rsComboMarksRange$3 = '\\u0300-\\u036f',
    reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange$2 = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo$2 = '[' + rsComboRange$3 + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
    rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ$2 = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$2 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

/** Used to compose unicode capture groups. */
var rsApos$1 = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos$1, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */
var camelCase = createCompounder(function(result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize(word) : word);
});

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$1(value) {
  if (!isObject$1(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$2 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$1$1 = objectProto$2.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$1$1).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject$1(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root, 'Map');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
}

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$3.call(data, key);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$1 || ListCache),
    'string': new Hash
  };
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map$1 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$4.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$5.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
}

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports$1 && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray$1(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$6.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

  return value === proto;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction$1(value);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject$1(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$8.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn$1(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn$1(source), object);
}

/** Detect free variable `exports`. */
var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

/** Built-in value references. */
var Buffer$1 = moduleExports$2 ? root.Buffer : undefined,
    allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable$1.call(object, symbol);
  });
};

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols$1 ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
}

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

/* Built-in method references that are verified to be native. */
var Promise$1 = getNative(root, 'Promise');

/* Built-in method references that are verified to be native. */
var Set$1 = getNative(root, 'Set');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]',
    objectTag$1 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$1 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$1 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$1) ||
    (Map$1 && getTag(new Map$1) != mapTag$1) ||
    (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||
    (Set$1 && getTag(new Set$1) != setTag$1) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag$1)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag$1 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$1;
        case mapCtorString: return mapTag$1;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$1;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var getTag$1 = getTag;

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$c.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty$9.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/** `Object#toString` result references. */
var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$1 = '[object Symbol]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return cloneArrayBuffer(object);

    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object);

    case dataViewTag$2:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$2:
      return new Ctor;

    case numberTag$1:
    case stringTag$1:
      return new Ctor(object);

    case regexpTag$1:
      return cloneRegExp(object);

    case setTag$2:
      return new Ctor;

    case symbolTag$1:
      return cloneSymbol(object);
  }
}

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject$1(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag$1(value) == mapTag$3;
}

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

/** `Object#toString` result references. */
var setTag$3 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag$1(value) == setTag$3;
}

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    mapTag$4 = '[object Map]',
    numberTag$2 = '[object Number]',
    objectTag$2 = '[object Object]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$2 = '[object Symbol]',
    weakMapTag$2 = '[object WeakMap]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$3 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] =
cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] =
cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] =
cloneableTags[numberTag$2] = cloneableTags[objectTag$2] =
cloneableTags[regexpTag$2] = cloneableTags[setTag$4] =
cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] =
cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag$2] =
cloneableTags[weakMapTag$2] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject$1(value)) {
    return value;
  }
  var isArr = isArray$1(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$1(value),
        isFunc = tag == funcTag$2 || tag == genTag$1;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$2 || tag == argsTag$2 || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG$1 = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG$1);
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1,
    CLONE_SYMBOLS_FLAG$2 = 4;

/**
 * This method is like `_.cloneWith` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @returns {*} Returns the deep cloned value.
 * @see _.cloneWith
 * @example
 *
 * function customizer(value) {
 *   if (_.isElement(value)) {
 *     return value.cloneNode(true);
 *   }
 * }
 *
 * var el = _.cloneDeepWith(document.body, customizer);
 *
 * console.log(el === document.body);
 * // => false
 * console.log(el.nodeName);
 * // => 'BODY'
 * console.log(el.childNodes.length);
 * // => 20
 */
function cloneDeepWith(value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$2, customizer);
}

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject$1(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$1(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject$1(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray$1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/** Error message constants. */
var FUNC_ERROR_TEXT$1 = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray$1(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED$2);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/** `Object#toString` result references. */
var boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$2 = '[object Error]',
    mapTag$5 = '[object Map]',
    numberTag$3 = '[object Number]',
    regexpTag$3 = '[object RegExp]',
    setTag$5 = '[object Set]',
    stringTag$3 = '[object String]',
    symbolTag$3 = '[object Symbol]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag$4:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag$3:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag$3:
    case dateTag$3:
    case numberTag$3:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag$2:
      return object.name == other.name && object.message == other.message;

    case regexpTag$3:
    case stringTag$3:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag$5:
      var convert = mapToArray;

    case setTag$5:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$1;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag$3:
      if (symbolValueOf$1) {
        return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
      }
  }
  return false;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** Used for built-in method references. */
var objectProto$d = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$d.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$a.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    objectTag$3 = '[object Object]';

/** Used for built-in method references. */
var objectProto$e = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$e.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$1(object),
      othIsArr = isArray$1(other),
      objTag = objIsArr ? arrayTag$2 : getTag$1(object),
      othTag = othIsArr ? arrayTag$2 : getTag$1(other);

  objTag = objTag == argsTag$3 ? objectTag$3 : objTag;
  othTag = othTag == argsTag$3 ? objectTag$3 : othTag;

  var objIsObj = objTag == objectTag$3,
      othIsObj = othTag == objectTag$3,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
    var objIsWrapped = objIsObj && hasOwnProperty$b.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$b.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject$1(value);
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray$1(object) || isArguments(object));
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * Performs a partial deep comparison between `object` and `source` to
 * determine if `object` contains equivalent property values.
 *
 * **Note:** This method is equivalent to `_.matches` when `source` is
 * partially applied.
 *
 * Partial comparisons will match empty array and empty object `source`
 * values against any array or object value, respectively. See `_.isEqual`
 * for a list of supported value comparisons.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 *
 * _.isMatch(object, { 'b': 2 });
 * // => true
 *
 * _.isMatch(object, { 'b': 1 });
 * // => false
 */
function isMatch(object, source) {
  return object === source || baseIsMatch(object, source, getMatchData(source));
}

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/** `Object#toString` result references. */
var objectTag$4 = '[object Object]';

/** Used for built-in method references. */
var funcProto$2 = Function.prototype,
    objectProto$f = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$f.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString$2.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject$1(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag$4) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$c.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString$2.call(Ctor) == objectCtorString;
}

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn$1(value));
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray$1(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$1(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject$1(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject$1(objValue) || isFunction$1(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject$1(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn$1);
}

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$2 = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax$2(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax$2(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject$1(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject$1(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject$1(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

/** Built-in value references. */
var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray$1(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten$1(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten$1), func + '');
}

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last$1(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last$1(path))];
}

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return isPlainObject$1(value) ? undefined : value;
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$2 = 1,
    CLONE_FLAT_FLAG$1 = 2,
    CLONE_SYMBOLS_FLAG$3 = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG$2 | CLONE_FLAT_FLAG$1 | CLONE_SYMBOLS_FLAG$3, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

/**
 * This method is like `_.set` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.setWith(object, '[0][1]', 'a', Object);
 * // => { '0': { '1': 'a' } }
 */
function setWith(object, path, value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return object == null ? object : baseSet(object, path, value, customizer);
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

/** Used as references for various `Number` constants. */
var INFINITY$3 = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set$1 && (1 / setToArray(new Set$1([,-0]))[1]) == INFINITY$3) ? noop : function(values) {
  return new Set$1(values);
};

/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */
function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE$2 = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE$2) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */
var without = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, values)
    : [];
});

function map$1 (iteratee, func) {
  if (!iteratee) return []
  if (!func) func = function (item) { return item };
  if (Array.isArray(iteratee)) {
    return iteratee.map(func)
  }
  if (iteratee instanceof Map) {
    const result = [];
    for (const [name, val] of iteratee) {
      result.push(func(val, name));
    }
    return result
  }
  if (iteratee instanceof Set) {
    const result = [];
    let idx = 0;
    iteratee.forEach(item => {
      result.push(func(item, idx++));
    });
    return result
  }
  return Object.keys(iteratee).map(function (key) {
    return func(iteratee[key], key)
  })
}

/**
  A virtual {@link DOMElement} which is used by the {@link Component} API.

  A VirtualElement is just a description of a DOM structure. It represents a
  virtual DOM mixed with Components. This virtual structure needs to be compiled
  to a {@link Component} to actually create a real DOM element,
  which is done by {@link RenderingEngine}
*/
class VirtualElement extends DOMElement {
  constructor (owner) {
    super();

    // set when this gets inserted into another virtual element
    this.parent = null;
    // set when created by RenderingContext
    this._owner = owner;
    // set when ref'd
    this._ref = null;
  }

  getParent () {
    return this.parent
  }

  get childNodes () {
    return this.getChildNodes()
  }

  getChildCount () {
    return this.children.length
  }

  getChildAt (idx) {
    return this.children[idx]
  }

  /*
    Provides the component after this VirtualElement has been rendered.
  */
  getComponent () {
    return this._comp
  }

  /**
    Associates a reference identifier with this element.

    When rendered the corresponding component is stored in the owner using the given key.
    In addition to that, components with a reference are preserved when its parent is rerendered.

    > Attention: only the owner should use this method, as it only
      affects the owner's references

    @param {String} ref id for the compiled Component
  */
  ref (ref) {
    if (!ref) throw new Error('Illegal argument')
    // Attention: only the owner should create a ref()
    // unfortunately, with the current implementation this can not be ensured
    if (this._ref) throw new Error('A VirtualElement can only be referenced once.')
    this._ref = ref;
    if (this._context) {
      const refs = this._context.refs;
      if (refs.has(ref)) {
        throw new Error('An item with reference "' + ref + '" already exists.')
      }
      refs.set(ref, this);
    }
    return this
  }

  isInDocument () {
    return false
  }

  get _isVirtualElement () { return true }
}

/*
  A virtual HTML element.
*/
class VirtualHTMLElement extends VirtualElement {
  constructor (tagName) {
    super();

    this._tagName = tagName;
    this.classNames = null;
    this.attributes = null;
    this.htmlProps = null;
    this.style = null;
    this.eventListeners = null;

    // TODO: this is semantically incorrect. It should be named childNodes
    this.children = [];
  }

  getTagName () {
    return this._tagName
  }

  setTagName (tagName) {
    this._tagName = tagName;
    return this
  }

  hasClass (className) {
    if (this.classNames) {
      return this.classNames.indexOf(className) > -1
    }
    return false
  }

  addClass (className) {
    if (!this.classNames) {
      this.classNames = [];
    }
    this.classNames.push(className);
    return this
  }

  removeClass (className) {
    if (this.classNames) {
      this.classNames = without(this.classNames, className);
    }
    return this
  }

  removeAttribute (name) {
    if (this.attributes) {
      this.attributes.delete(name);
    }
    return this
  }

  getAttribute (name) {
    if (this.attributes) {
      return this.attributes.get(name)
    }
  }

  setAttribute (name, value) {
    if (!this.attributes) {
      this.attributes = new Map();
    }
    this.attributes.set(name, String(value));
    return this
  }

  getAttributes () {
    // we are having separated storages for different
    // kind of attributes which we now pull together
    // in the same way as a native DOM element has it
    // TODO: is this really a good idea?
    // maybe we should also treat the others as attributes
    let entries = [];
    if (this.attributes) {
      entries = Array.from(this.attributes);
    }
    if (this.classNames) {
      entries.push(['class', this.classNames.join(' ')]);
    }
    if (this.style) {
      entries.push(['style', map$1(this.style, function (val, key) {
        return key + ':' + val
      }).join(';')]);
    }
    return new Map(entries)
  }

  getId () {
    return this.getAttribute('id')
  }

  setId (id) {
    this.setAttribute('id', id);
    return this
  }

  setTextContent (text) {
    text = String(text || '');
    this.empty();
    this.appendChild(text);
    return this
  }

  setInnerHTML (html) {
    html = html || '';
    this.empty();
    this._innerHTMLString = html;
    return this
  }

  getInnerHTML () {
    if (!_isDefined(this._innerHTMLString)) {
      throw new Error('Not supported.')
    } else {
      return this._innerHTMLString
    }
  }

  getValue () {
    return this.htmlProp('value')
  }

  setValue (value) {
    this.htmlProp('value', value);
    return this
  }

  getChildNodes () {
    return this.children
  }

  getChildren () {
    return this.children.filter(function (child) {
      return child.getNodeType() !== 'text'
    })
  }

  isTextNode () {
    return false
  }

  isElementNode () {
    return true
  }

  isCommentNode () {
    return false
  }

  isDocumentNode () {
    return false
  }

  append () {
    if (this._innerHTMLString) {
      throw Error('It is not possible to mix $$.html() with $$.append(). You can call $$.empty() to reset this virtual element.')
    }
    this._append(this.children, arguments);
    return this
  }

  appendChild (child) {
    if (this._innerHTMLString) {
      throw Error('It is not possible to mix $$.html() with $$.append(). You can call $$.empty() to reset this virtual element.')
    }
    this._appendChild(this.children, child);
    return this
  }

  insertAt (pos, child) {
    child = this._normalizeChild(child);
    if (!child) {
      throw new Error('Illegal child: ' + child)
    }
    if (!child._isVirtualElement) {
      throw new Error('Illegal argument for $$.insertAt():' + child)
    }
    if (pos < 0 || pos > this.children.length) {
      throw new Error('insertAt(): index out of bounds.')
    }
    this._insertAt(this.children, pos, child);
    return this
  }

  insertBefore (child, before) {
    var pos = this.children.indexOf(before);
    if (pos > -1) {
      this.insertAt(pos, child);
    } else {
      throw new Error('insertBefore(): reference node is not a child of this element.')
    }
    return this
  }

  removeAt (pos) {
    if (pos < 0 || pos >= this.children.length) {
      throw new Error('removeAt(): Index out of bounds.')
    }
    this._removeAt(pos);
    return this
  }

  removeChild (child) {
    if (!child || !child._isVirtualElement) {
      throw new Error('removeChild(): Illegal arguments. Expecting a CheerioDOMElement instance.')
    }
    var idx = this.children.indexOf(child);
    if (idx < 0) {
      throw new Error('removeChild(): element is not a child.')
    }
    this.removeAt(idx);
    return this
  }

  replaceChild (oldChild, newChild) {
    if (!newChild || !oldChild ||
        !newChild._isVirtualElement || !oldChild._isVirtualElement) {
      throw new Error('replaceChild(): Illegal arguments. Expecting BrowserDOMElement instances.')
    }
    var idx = this.children.indexOf(oldChild);
    if (idx < 0) {
      throw new Error('replaceChild(): element is not a child.')
    }
    this.removeAt(idx);
    this.insertAt(idx, newChild);
    return this
  }

  empty () {
    var children = this.children;
    while (children.length) {
      var child = children.pop();
      child.parent = null;
    }
    delete this._innerHTMLString;
    return this
  }

  getProperty (name) {
    if (this.htmlProps) {
      return this.htmlProps.get(name)
    }
  }

  setProperty (name, value) {
    if (!this.htmlProps) {
      this.htmlProps = new Map();
    }
    this.htmlProps.set(name, value);
    return this
  }

  removeProperty (name) {
    if (this.htmlProps) {
      this.htmlProps.delete(name);
    }
    return this
  }

  getStyle (name) {
    if (this.style) {
      return this.style.get(name)
    }
  }

  setStyle (name, value) {
    if (!this.style) {
      this.style = new Map();
    }
    if (DOMElement.pxStyles[name] && isNumber(value)) value = value + 'px';
    this.style.set(name, value);
    return this
  }

  _createEventListener (eventName, handler, options) {
    options.context = options.context || this._owner._comp;
    return super._createEventListener(eventName, handler, options)
  }

  getNodeType () {
    return 'element'
  }

  hasInnerHTML () {
    return Boolean(this._innerHTMLString)
  }

  _normalizeChild (child) {
    if (isNil(child)) ; else if (child._isVirtualElement) {
      return child
    } else if (isString(child) || isBoolean(child) || isNumber(child)) {
      return new VirtualTextNode(String(child))
    } else {
      console.error('Unsupported child type', child);
      throw new Error('Unsupported child type')
    }
  }

  _append (outlet, args) {
    if (args.length === 1 && !isArray(args[0])) {
      this._appendChild(outlet, args[0]);
      return
    }
    var children;
    if (isArray(args[0])) {
      children = args[0];
    } else if (arguments.length > 1) {
      children = Array.prototype.slice.call(args, 0);
    } else {
      return
    }
    children.forEach(this._appendChild.bind(this, outlet));
  }

  _appendChild (outlet, child) {
    child = this._normalizeChild(child);
    // TODO: discuss. Having a bad feeling about this,
    // because it could obscure an implementation error
    if (!child) return
    outlet.push(child);
    this._attach(child);
    return child
  }

  _insertAt (outlet, pos, child) {
    if (!child) return
    outlet.splice(pos, 0, child);
    this._attach(child);
  }

  _removeAt (outlet, pos) {
    var child = outlet[pos];
    outlet.splice(pos, 1);
    this._detach(child);
  }

  _attach (child) {
    child.parent = this;
    if (this._context) {
      if (child._owner !== this._owner && child._isVirtualComponent) {
        this._context.injectedComponents.push(child);
      }
      if (child._owner !== this._owner && child._ref) {
        this._context.foreignRefs[child._ref] = child;
      }
    }
  }

  _detach (child) {
    child.parent = null;
    if (this._context) {
      if (child._isVirtualComponent) {
        deleteFromArray(this._context.injectedComponents, child);
      }
      if (child._owner !== this._owner && child._ref) {
        this._context.foreignRefs.delete(child._ref);
      }
    }
  }

  _copy () {
    if (this.classNames || this.attributes || this.eventListeners || this.htmlProps || this.style) {
      const copy = {};
      if (this.classNames) {
        copy.classNames = this.classNames.slice();
      }
      if (this.attributes) {
        copy.attributes = new Map(this.attributes);
      }
      if (this.eventListeners) {
        copy.eventListeners = this.eventListeners.slice();
      }
      if (this.htmlProps) {
        copy.htmlProps = new Map(this.htmlProps);
      }
      if (this.style) {
        copy.style = new Map(this.style);
      }
      return copy
    }
  }

  _clear () {
    this.classNames = null;
    this.attributes = null;
    this.htmlProps = null;
    this.style = null;
    this.eventListeners = null;
  }

  _merge (other) {
    if (!other) return
    const ARRAY_TYPE_VALS = ['classNames', 'eventListeners'];
    for (const name of ARRAY_TYPE_VALS) {
      const otherVal = other[name];
      if (otherVal) {
        const thisVal = this[name];
        if (!thisVal) {
          this[name] = otherVal.slice();
        } else {
          this[name] = thisVal.concat(otherVal);
        }
      }
    }
    const MAP_TYPE_VALS = ['attributes', 'htmlProps', 'style'];
    for (const name of MAP_TYPE_VALS) {
      const otherVal = other[name];
      if (otherVal) {
        const thisVal = this[name];
        if (!thisVal) {
          this[name] = new Map(otherVal);
        } else {
          this[name] = new Map([...thisVal, ...otherVal]);
        }
      }
    }
  }

  get _isVirtualHTMLElement () { return true }
}

/*
  A virtual element which gets rendered by a custom component.
*/
class VirtualComponent extends VirtualHTMLElement {
  constructor (ComponentClass, props) {
    super();

    props = props || {};

    this.ComponentClass = ComponentClass;
    this.props = props;
    if (!props.children) {
      props.children = [];
    }
    this.children = props.children;
  }

  getComponent () {
    return this._comp
  }

  // Note: for VirtualComponentElement we put children into props
  // so that the render method of ComponentClass can place it.
  getChildren () {
    return this.props.children
  }

  getNodeType () {
    return 'component'
  }

  // TODO: this seems to be not so useful
  // as this is also possible by just using props
  outlet (name) {
    return new Outlet(this, name)
  }

  setInnerHTML () {
    throw new Error('Can not set innerHTML of a Component')
  }

  _attach (child) {
    child._preliminaryParent = this;
  }

  _detach (child) {
    child._preliminaryParent = null;
  }

  get _isVirtualHTMLElement () { return false }

  get _isVirtualComponent () { return true }
}

class Outlet {
  constructor (virtualEl, name) {
    this.virtualEl = virtualEl;
    this.name = name;
    Object.freeze(this);
  }

  _getOutlet () {
    var outlet = this.virtualEl.props[this.name];
    if (!outlet) {
      outlet = [];
      this.virtualEl.props[this.name] = outlet;
    }
    return outlet
  }

  append () {
    var outlet = this._getOutlet();
    this.virtualEl._append(outlet, arguments);
    return this
  }

  empty () {
    var arr = this.virtualEl.props[this.name];
    arr.forEach(function (el) {
      this._detach(el);
    }.bind(this));
    arr.splice(0, arr.length);
    return this
  }
}

class VirtualTextNode extends VirtualElement {
  constructor (text) {
    super();
    this.text = text;
  }

  get _isVirtualTextNode () { return true }
}

VirtualElement.Component = VirtualComponent;
VirtualElement.TextNode = VirtualTextNode;

/**
  Create a virtual DOM representation which is used by Component
  for differential/reactive rendering.

  @param elementType HTML tag name or Component class
  @param [props] a properties object for Component classes
  @return {VirtualElement} a virtual DOM node

  @example

  Create a virtual DOM Element

  ```
  $$('a').attr({href: './foo'}).addClass('se-nav-item')
  ```

  Create a virtual Component

  ```
  $$(HelloMessage, {name: 'John'})
  ```
*/
VirtualElement.createElement = function () {
  var content;
  var _first = arguments[0];
  var _second = arguments[1];
  var type;
  if (isString(_first)) {
    type = 'element';
  } else if (isFunction(_first)) {
    type = 'component';
  } else if (isNil(_first)) {
    throw new Error('$$(null): provided argument was null or undefined.')
  } else {
    throw new Error('Illegal usage of $$()')
  }
  // some props are mapped to built-ins
  var props = {};
  var classNames, ref;
  var eventHandlers = [];
  for (var key in _second) {
    if (!hasOwnProperty(_second, key)) continue
    var val = _second[key];
    switch (key) {
      case 'class':
        classNames = val;
        break
      case 'ref':
        ref = val;
        break
      default:
        props[key] = val;
    }
  }
  if (type === 'element') {
    content = new VirtualHTMLElement(_first);
    // remaining props are attributes
    // TODO: should we make sure that these are only string values?
    content.attr(props);
  } else {
    content = new VirtualComponent(_first, props);
  }
  // HACK: this is set to the current context by RenderingEngine
  // otherwise this will provide rubbish
  content._owner = this.owner;
  if (classNames) {
    content.addClass(classNames);
  }
  if (ref) {
    content.ref(ref);
  }
  eventHandlers.forEach(function (h) {
    if (isFunction(h.handler)) {
      content.on(h.name, h.handler);
    } else if (isPlainObject(h.handler)) {
      var params = h.handler;
      content.on(h.name, params.handler, params.context, params);
    } else {
      throw new Error('Illegal arguments for $$(_,{ on' + h.name + '})')
    }
  });
  // allow a notation similar to React.createElement
  // $$(MyComponent, {}, ...children)
  if (arguments.length > 2) {
    content.append(flattenOften(Array.prototype.slice.call(arguments, 2), 3));
  }
  return content
};

VirtualElement.Context = class VirtualElementContext {
  constructor (owner) {
    this.owner = owner;
    // used to track refs created via `el.ref()`
    this.refs = new Map();
    // used to keep refs that are set by a different owner, when a component is
    // passed via props
    this.foreignRefs = new Map();
    // all VirtualElements created such as `$$('div')`
    this.elements = [];
    // all VirtualComponents created such as `$$(Foo)`
    this.components = [];
    // all VirtualComponents that are appended but not owned, i.e. injected from parent
    this.injectedComponents = [];
    this.$$ = this._createElement.bind(this);
    this.$$.capturing = true;
  }

  _createElement () {
    const vel = VirtualElement.createElement.apply(this, arguments);
    vel._context = this;
    vel._owner = this.owner;
    if (vel._isVirtualComponent) {
      // virtual components need to be captured recursively
      this.components.push(vel);
    }
    this.elements.push(vel);
    return vel
  }
};

const TOP_LEVEL_ELEMENT = Symbol('TOP_LEVEL_ELEMENT');

/**
 * # Rendering Algorithm
 *
 * ## Introduction
 *
 * The challenges of virtual rendering, particularly with the Substance specialities, namely
 * fully initialized component after construction.
 *
 * - Dependency Injection via constructor requires an existing parent.
 *   As a consequence a component tree must be constructed from top
 *   to down.
 *
 * - The earliest time to evaluate `$$(MyComponent)`, is when it has been
 *   attached to an existing component. I.e., to run `MyComponent.render()` an
 *   instance of `MyComponent` is needed, which can only be created with an
 *   existing parent component.
 *
 * - In general, it is *not* possible to have a naturally descending rendering
 *   algorithm, i.e. a simple recursion calling `render()` and creating or
 *   updating Components on the way, preserving a simple stack-trace.
 *   Instead, it requires calling `render()` on one level, then doing comparisons
 *   with the existing tree to be able to reuse components, and then descend into
 *   the sub-tree.
 *
 * - If components are passed down via props, things get even more difficult.
 *   For example, consider a situation where components are passed via props:
 *   ```
 *     render($$) {
 *       return $$('div').append(
 *         $$(Wrapper, {
 *           foo: $$(MyComponent)
 *         })
 *       )
 *     }
 *   ```
 *   At the time when this component gets rendered, `MyComponent` can not be
 *   instantiated, as it is not known what `Wrapper` actually does with it.
 *   While the general approach is working from top-to-down, in this case it has
 *   a bottom-to-up nature, i.e., the child needs to be rendered to know what to
 *   do with the passed component.
 *
 *   Particularly, this is problematic when the passed component has a reference:
 *   ```
 *     render($$) {
 *       return $$('div').append(
 *         $$(Wrapper, {
 *           foo: $$(MyComponent).ref('foo')
 *         })
 *       )
 *     }
 *   ```
 *   As nothing is known at the time of descending about the content of `Wrapper`
 *   the rendering algorithm can not tell that it ought to be preserved. For now,
 *   the correct way to deal with this situation is to use a reference for the
 *   wrapper as well:
 *   ```
 *     render($$) {
 *       return $$('div').append(
 *         $$(Wrapper, {
 *           foo: $$(MyComponent).ref('foo')
 *         }).ref('wrapper')
 *       )
 *     }
 *   ```
 *
 * ## Algorithm
 *
 * For a given Component `comp`:
 *
 * 1. Capturing a virtual DOM
 *   1.1. Create a virtual DOM element by calling `comp.render()`
 *   1.2. Map virtual elements to existing elements
 *   1.3. Apply 1.1. and 1.2. recursively for every virtual Component
 * 2. Update `comp.el` given a virtual DOM element
 *
 * Notes:
 * - 1.2. is necessary to preserve components and capture DOM updates using the
 *   correct instances
 * - 2. can be seen as an independent task, updating one DOM given a second one.
 *
 * ## Implementation
 *
 * > TODO: flesh this out
 *
 * - Rendering happens in two stages: capture and render/update.
 *   In the capturing stage a VirtualComponent tree is created by calling
 *   `Component.render()` from top to down recursively. In the rendering stage
 *   DOM elements are created and updated.
 * - Refs: the programmer can use ref(id) to register a reference to a child
 *   component. Referenced components are always reused when rerendering, i.e.
 *   not disposed. For other elements, there is no guarantee that the component
 *   and its DOM element is reused. The RenderingEngine may do so if possible,
 *   e.g. if the structure does not change.
 *
 * ## TODO
 *
 * - reuse unmapped elements that are compatible during rendering
 * - rethink 'Forwarding Components' regarding parent-child relationship.
 *   ATM, there is no extra model for that hierarchy than the DOM, only
 *   `comp.parent` reflects the relationship correctly
 *
 * These ideas could improve the implementation:
 * - remove outlets: outlets are just another way to change props.
 */
class RenderingEngine {
  constructor (options = {}) {
    this.componentFactory = options.componentFactory;
    if (!this.componentFactory) throw new Error("'componentFactory' is mandatory")
    this.elementFactory = options.elementFactory || DefaultDOMElement.createDocument('html');
    if (!this.elementFactory) throw new Error("'elementFactory' is mandatory")
  }

  /**
   * @param {string | Class<Component>} type a HTML element name, or Component class
   * @param {object} props
   * @param  {...any} children
   */
  static createVirtualElement (type, props, ...children) {
    const renderingContext = _getRenderingContext();
    const createElement = renderingContext.$$;
    const _props = {};
    let _class = null;
    const _attributes = {};
    const _htmlProps = {};
    const _eventListeners = [];
    let _ref = null;
    if (props) {
      const keys = Object.keys(props);
      for (const key of keys) {
        if (!hasOwnProperty(props, key)) continue
        const val = props[key];
        // ATTENTION: assuming that all event handlers start with 'on'
        const m = /^on([A-Za-z]+)$/.exec(key);
        if (m) {
          // ATTENTION: IMO all native events are lower case
          _eventListeners.push([m[1].toLowerCase(), val]);
        } else if (key === 'ref') {
          _ref = val;
        } else if (isString(type)) {
          switch (key) {
            case 'class':
            case 'className': {
              _class = val;
              break
            }
            case 'style': {
              if (!isString(val)) {
                throw new Error('HTML attribute "style" must be a CSS string.')
              }
              _attributes.style = val;
              break
            }
            // ATTENTION: this list is utterly incomplete and IMO even incorrect
            // TODO: Would need a complete list of 'reflected' properties, i.e. properties that are identical to attributes
            // vs those who are only initialized with the attribute value. This should be solved in Substance generally (DOMElement, VirtualElement, and RenderingEngine)
            // For now, this just represents 'non-reflected' properties that we have needed so far
            // - value: needed for all types of input elements
            // - checked: input fields of type 'checkbox'
            // - selected: options of input fields of type 'select'
            case 'value':
            case 'checked':
            case 'selected': {
              // attribute is used as 'default' value
              _attributes[key] = val;
              // and property as instance value
              _htmlProps[key] = val;
              break
            }
            default: {
              _attributes[key] = val;
            }
          }
        // no maginc HTML attribute mapping for Components, only plain properties
        } else {
          _props[key] = val;
        }
      }
    }
    const el = createElement(type, _props);
    if (_ref) {
      el.ref(_ref);
    }
    if (_class) {
      el.addClass(_class);
    }
    el.attr(_attributes);
    el.htmlProp(_htmlProps);
    for (const [eventName, handler] of _eventListeners) {
      el.on(eventName, handler);
    }
    if (children.length > 0) {
      el.append(flatten(children));
    }
    return el
  }

  _render (comp, oldProps, oldState, options = {}) {
    let consoleGroup = null;
    if (substanceGlobals.VERBOSE_RENDERING) {
      if (!comp.el) {
        consoleGroup = `RenderingEngine: initial render of ${getClassName(comp)}`;
      } else {
        if (options.adopt) {
          consoleGroup = `RenderingEngine: adopting DOM with ${getClassName(comp)}`;
        } else {
          consoleGroup = `RenderingEngine: update of ${getClassName(comp)}`;
        }
      }
      console.group(consoleGroup);
      console.time('rendering (total)');
    }
    let vel = _createWrappingVirtualComponent(comp);
    const state = this._createState();
    if (oldProps) {
      state.set(OLDPROPS, vel, oldProps);
    }
    if (oldState) {
      state.set(OLDSTATE, vel, oldState);
    }
    try {
      this._state = state;
      if (substanceGlobals.VERBOSE_RENDERING) {
        console.time('capturing');
      }
      let captured = false;
      // capture: this calls the render() method of components, creating a virtual DOM
      try {
        _capture(state, vel, TOP_LEVEL_ELEMENT);
        captured = true;
      } finally {
        if (substanceGlobals.VERBOSE_RENDERING) {
          console.timeEnd('capturing');
        }
      }
      if (captured) {
        if (options.adopt) {
          if (substanceGlobals.VERBOSE_RENDERING) {
            console.time('adopting');
          }
          try {
            // NOTE: if root is forwarding then use the forwarded child
            // instead. The DOM element will be propagated upwards.
            vel = _getForwardedEl(vel);
            _adopt(state, vel, comp.el);
          } finally {
            if (substanceGlobals.VERBOSE_RENDERING) {
              console.timeEnd('adopting');
            }
          }
        } else {
          if (substanceGlobals.VERBOSE_RENDERING) {
            console.time('updating');
          }
          try {
            _update(state, vel);
            _triggerDidUpdate(state, vel);
          } finally {
            if (substanceGlobals.VERBOSE_RENDERING) {
              console.timeEnd('updating');
            }
          }
        }
      }
    } finally {
      if (substanceGlobals.VERBOSE_RENDERING) {
        console.timeEnd('rendering (total)');
        console.groupEnd(consoleGroup);
      }
      state.dispose();
      this._state = null;
    }
  }

  // this is used together with the incremental Component API
  // TODO: we could try to generalize this to allow partial rerenderings
  // e.g. a component has a method to rerender just one element, which is then
  // applied to update an element
  _renderChild (comp, vel) {
    // HACK: to make this work with the rest of the implementation
    // we ingest a fake parent
    const state = this._createState();
    vel.parent = { _comp: comp, _isFake: true };
    try {
      this._state = state;
      _capture(state, vel);
      _update(state, vel);
      return vel._comp
    } finally {
      state.dispose();
    }
  }

  _createState () {
    return new RenderingState(this.componentFactory, this.elementFactory)
  }

  static createContext (comp) {
    const vel = _createWrappingVirtualComponent(comp);
    return new VirtualElement.Context(vel)
  }
}

function _getRenderingContext () {
  let renderingContext = substanceGlobals.__rendering_context__;
  if (!renderingContext) {
    renderingContext = new VirtualElement.Context();
  }
  return renderingContext
}

function _setRenderingContext (renderingContext) {
  substanceGlobals.__rendering_context__ = renderingContext;
}

// calling comp.render() and capturing recursively
function _capture (state, vel, mode) {
  if (state.is(CAPTURED, vel)) {
    return vel
  }
  // a captured VirtualElement has a component instance attached
  let comp = vel._comp;
  if (!comp) {
    comp = _create(state, vel);
    state.set(NEW, vel);
  }
  if (vel._isVirtualComponent) {
    let needRerender;
    // NOTE: forceCapture is used for the first entrance
    // from this.render(comp) where we want to fource capturing
    // as it has already been cleared that a rerender is necessary
    if (mode === TOP_LEVEL_ELEMENT) {
      needRerender = true;
      // top-level comp and virtual component are linked per se
      _assert(vel._comp === comp, 'top-level element and component should be linked already');
      state.set(MAPPED, vel);
      state.set(MAPPED, comp);
      state.set(LINKED, vel);
      state.set(LINKED, comp);
      const compData = _getInternalComponentData(comp);
      vel.elementProps = compData.elementProps;
    } else {
      // NOTE: don't ask shouldRerender if no element is there yet
      needRerender = !comp.el || comp.shouldRerender(vel.props, comp.state);
      // Note: in case of VirtualComponents there are typically two actors setting element properties:
      // the component instance itself, and the owner, such as in
      // `$$(Foo).addClass('se-foo')`
      // To be able to retain the element properties set by the parent, we have to bring them out of the way
      // before capturing the component
      vel.elementProps = vel._copy();
      vel._clear();
      state.set(OLDPROPS, vel, comp.props);
      state.set(OLDSTATE, vel, comp.state);
      // updates prop triggering willReceiveProps
      comp._setProps(vel.props);
      if (!state.is(NEW, vel)) {
        state.set(UPDATED, vel);
      }
    }
    if (needRerender) {
      const context = new VirtualElement.Context(vel);
      let content;
      try {
        _setRenderingContext(context);
        content = comp.render(context.$$);
      } finally {
        _setRenderingContext(null);
      }
      if (!content) {
        throw new Error('Component.render() returned nil.')
      } else if (content._isVirtualComponent) {
        // allowing for forwarding components
        // content needs to have a parent for creating components
        vel._forwardedEl = content;
        vel._isForwarding = true;
        content._isForwarded = true;
        content.parent = vel;
        vel.children = [content];
      } else if (content._isVirtualHTMLElement) {
        // merge the content into the VirtualComponent instance
        vel.tagName = content.tagName;
        vel._merge(content);
        if (content.hasInnerHTML()) {
          vel._innerHTMLString = content._innerHTMLString;
          vel.children = [];
        } else {
          vel.children = content.children;
          // adopting the children
          vel.children.forEach(child => {
            child.parent = vel;
          });
        }
      } else {
        throw new Error('render() must return a plain element or a Component')
      }
      // retain the rendering context
      vel._context = content._context;

      // augmenting the element properties with those given by the owner
      // such as in $$(Foo, { child: $$(Bar).addClass('') })
      if (vel.elementProps) {
        vel._merge(vel.elementProps);
        // augment a forwarded virtual component with the accumlated element properties
        // (works also for injected, forwarding components
        if (vel._isForwarding) {
          vel._forwardedEl._merge(vel);
        }
      }

      // TODO: document what this is used for
      if (!state.is(NEW, vel) && comp.isMounted()) {
        state.set(UPDATED, vel);
      }

      // ATTENTION: before capturing we need to link VirtualComponents with
      // existing Components so that `render()` can be called on the
      // correct instances.
      _forEachComponent(state, comp, vel, _linkComponent);

      // ATTENTION: without DEBUG_RENDERING enabled the content is captured
      // outside of the `render()` call stack i.e. `render()` has finished
      // already and provided a virtual element. Children component are
      // rendered as part of this recursion, i.e. in the stack trace there
      // will be `RenderingEngine._capture()` only
      if (vel._forwardedEl) {
        _capture(state, vel._forwardedEl);
      } else {
        for (const child of vel.children) {
          _capture(state, child);
        }
      }
      _forEachComponent(state, comp, vel, _propagateLinking);
    } else {
      // SKIPPED are those components who have returned `shouldRerender() = false`
      state.set(SKIPPED, vel);
    }
  } else if (vel._isVirtualHTMLElement) {
    for (const child of vel.children) {
      _capture(state, child);
    }
  }

  state.set(CAPTURED, vel);
  return vel
}

// called to initialize a captured component, i.e. creating a Component instance
// from a VirtualElement
function _create (state, vel) {
  let comp = vel._comp;
  _assert(!comp, 'Component instance should not exist when this method is used.');
  let parent = vel.parent._comp;
  // making sure the parent components have been instantiated
  if (!parent) {
    parent = _create(state, vel.parent);
  }
  // TODO: probably we should do something with forwarded/forwarding components here?
  if (vel._isVirtualComponent) {
    _assert(parent, 'A Component should have a parent.');
    comp = state.componentFactory.createComponent(vel.ComponentClass, parent, vel.props);
    // HACK: making sure that we have the right props
    // TODO: instead of HACK add an assertion, and make otherwise sure that vel.props is set correctly
    vel.props = comp.props;
    if (vel._forwardedEl) {
      const forwardedEl = vel._forwardedEl;
      const forwardedComp = state.componentFactory.createComponent(forwardedEl.ComponentClass, comp, forwardedEl.props);
      // HACK same as before
      forwardedEl.props = forwardedComp.props;
      comp._forwardedComp = forwardedComp;
    }
  } else if (vel._isVirtualHTMLElement) {
    comp = state.componentFactory.createElementComponent(parent, vel);
  } else if (vel._isVirtualTextNode) {
    comp = state.componentFactory.createTextNodeComponent(parent, vel);
  }
  if (vel._ref) {
    comp._ref = vel._ref;
  }
  if (vel._owner) {
    comp._owner = vel._owner._comp;
  }
  vel._comp = comp;
  return comp
}

/*
  Prepares a new virtual component by comparing it with the old version.

  It sets the _comp references in the new version where its ancestors
  can be mapped to corresponding virtual components in the old version.
*/
function _forEachComponent (state, comp, vc, hook) {
  _assert(vc._isVirtualComponent, 'this method is intended for VirtualComponents only');
  if (!vc.__components__) {
    const context = vc._context;
    _assert(context, 'there should be a capturing context on the VirtualComponent');
    // refs are those ref'd using $$().ref()
    const newRefs = context.refs;
    // foreignRefs are refs of those components which are passed via props
    const newForeignRefs = context.foreignRefs;
    // all other components which are not ref'd stored via a derived key based on trace
    if (!context.internalRefs) {
      context.internalRefs = _extractInternalRefs(context, vc);
    }
    const newInternalRefs = context.internalRefs;
    const entries = [];
    const compData = _getInternalComponentData(comp);
    const oldRefs = compData.refs;
    const oldForeignRefs = compData.foreignRefs;
    // TODO: make sure that this is always initialized properly
    const oldInternalRefs = compData.internalRefs || new Map();
    const _addEntries = (_newRefs, _oldRefs) => {
      for (const [ref, vc] of _newRefs) {
        const oldVc = _oldRefs.get(ref);
        let comp;
        if (oldVc) {
          comp = oldVc._comp;
        }
        entries.push({ vc, comp });
      }
    };
    if (newRefs.size > 0) _addEntries(newRefs, oldRefs);
    if (newForeignRefs.size > 0) _addEntries(newForeignRefs, oldForeignRefs);
    if (newInternalRefs.size > 0) _addEntries(newInternalRefs, oldInternalRefs);
    vc.__components__ = entries;
  }
  if (vc.__components__.length > 0) {
    for (const entry of vc.__components__) {
      hook(state, entry.comp, entry.vc);
    }
  }
}

function _linkComponent (state, comp, vc) {
  // NOTE: comp is undefined if there was no corresponding ref in the previous rendering
  if (!comp) {
    _reject(state, comp, vc);
    return
  }
  if (_isMapped(state, comp, vc)) return
  if (_isLinked(state, comp, vc)) return
  if (_isOfSameType(comp, vc)) {
    _link(state, comp, vc);
  } else {
    _reject(state, comp, vc);
  }
}

function _link (state, comp, vc) {
  vc._comp = comp;
  state.set(MAPPED, vc);
  state.set(MAPPED, comp);
  state.set(LINKED, vc);
  state.set(LINKED, comp);
}

function _reject (state, comp, vc) {
  vc._comp = null;
  state.set(MAPPED, vc);
  if (comp) state.set(MAPPED, comp);
}

function _isMapped (state, comp, vc) {
  const vcIsMapped = state.is(MAPPED, vc);
  const compIsMapped = state.is(MAPPED, comp);
  if (vcIsMapped || compIsMapped) {
    return true
  }
  return false
}

function _isLinked (state, comp, vc) {
  const compIsLinked = state.is(LINKED, comp);
  const vcIsLinked = state.is(LINKED, vc);
  if (vc._comp === comp) {
    if (!vcIsLinked) {
      console.error('FIXME: comp is linked, but not virtual component');
      state.set(LINKED, vc);
    }
    if (!compIsLinked) {
      console.error('FIXME: virtual comp is linked, but not component');
      state.set(LINKED, vc);
    }
    return true
  }
  return false
}

/*
  This tries to map the virtual component to existing component instances
  by looking at the old and new refs, making sure that the element type is
  compatible.
*/
function _propagateLinking (state, comp, vel, stopIfMapped) {
  // NOTE: comp is undefined if there was no corresponding ref in the previous rendering
  // or when bubbling up to the root component
  if (!comp) {
    return false
  }
  // stopping condition
  if (stopIfMapped && _isMapped(state, comp, vel)) {
    return _isLinked(state, comp, vel)
  }
  // try to link VirtualHTMLElements and VirtualTextElements
  // allowing to retain DOM elements
  if (!vel._isVirtualComponent) {
    if (!_isOfSameType(comp, vel)) {
      _reject(state, comp, vel);
      // stop propagation here
      return false
    } else {
      _link(state, comp, vel);
    }
  }

  // Now we try to map all ancestors. If not possible, then we assume that the component has been relocated
  let canLinkParent = false;
  let parent = comp.getParent();
  if (vel.parent) {
    canLinkParent = _propagateLinking(state, parent, vel.parent, true);
  // to be able to support implicit retaining of elements
  // we need to propagate mapping through the 'preliminary' parent chain
  // i.e. not taking the real parents as rendered, but the Components into which
  // we have passed children (via vel.append() or vel.outlet().append())
  } else if (vel._preliminaryParent) {
    while (parent && parent._isElementComponent) {
      parent = parent.getParent();
    }
    canLinkParent = _propagateLinking(state, parent, vel._preliminaryParent, true);
  }
  // VirtualComponent that have parents that could not be mapped must have been
  // relocated, i.e. attached to a different parent
  // TODO: discuss if we really want to allow this.
  // Relocation is an edge case, in most cases not desired, and thus if happened
  // more likely to be a problem.
  if (vel._isVirtualComponent && !canLinkParent) {
    if (substanceGlobals.VERBOSE_RENDERING) {
      console.info('Component has been relocated: ' + getClassName(comp));
    }
    state.set(RELOCATED, vel);
    state.set(RELOCATED, comp);
  }
  return canLinkParent
}

function _isOfSameType (comp, vc) {
  if (vc._isVirtualComponent) {
    const ComponentClass = _getComponentClass(vc);
    return (comp._isComponent && comp.constructor === ComponentClass)
  } else {
    return (
      (comp._isElementComponent && vc._isVirtualHTMLElement) ||
      (comp._isTextNodeComponent && vc._isVirtualTextNode)
    )
  }
}

function _getComponentClass (vc) {
  const ComponentClass = vc.ComponentClass;
  if (ComponentClass._isFunctionComponent) {
    return ComponentClass._ComponentClass
  }
  return ComponentClass
}

// Update a DOM element by applying changes derived from a given virtual element
function _update (state, vel) {
  // NOTE: this method might look a bit monstrous because of the rather complex
  // branching structure. However, we want to avoid extra recursion or separation
  // into functions for sake of shorter stack-traces when debugging

  if (state.is(SKIPPED, vel)) return
  // console.log('... rendering', vel._ref)

  const comp = vel._comp;
  // TODO: find out if this is still needed
  if (!comp) {
    _capture(state, vel);
  }
  _assert(comp && comp._isComponent, 'A captured VirtualElement must have a component instance attached.');

  // special handling of forwarding elements which don't have their own element
  // but are delegating to their child
  if (vel._isForwarding) {
    _update(state, vel._forwardedEl);
  } else {
    // render the element
    if (!comp.el) {
      comp.el = _createDOMElement(state, vel);
    } else {
      const el = comp.el;
      _assert(el, "Component's element should exist at this point.");
      _updateDOMElement(el, vel);
    }

    // structural updates are necessary only for non-forwarding Components and HTML elements without innerHTML
    if ((vel._isVirtualComponent || vel._isVirtualHTMLElement) && !vel.hasInnerHTML()) {
      const newChildren = vel.children;
      const oldChildren = _getChildren(state, comp);

      // TODO: it might be easier to understand to separate DOM analysis, i.e.
      // what to do with the DOM, from the actual DOM manipulation.
      // The former could be described as a set of DOM operations, which would then
      // interpreted by the latter
      let pos1 = 0; let pos2 = 0;
      while (pos1 < oldChildren.length || pos2 < newChildren.length) {
        let oldComp;
        // skip detached components
        // Note: components get detached when preserved nodes
        // are found in a swapped order. Then the only way is
        // to detach one of them from the DOM, and reinsert it later at the new
        // position
        do {
          oldComp = oldChildren[pos1++];
        } while (oldComp && (state.is(DETACHED, oldComp)))

        const newVel = newChildren[pos2++];
        // remove remaining old ones if no new one is left
        if (oldComp && !newVel) {
          while (oldComp) {
            _removeChild(state, comp, oldComp);
            oldComp = oldChildren[pos1++];
          }
          break
        }

        // reuse TextNodes to avoid unnecesary DOM manipulations
        if (oldComp && oldComp.el.isTextNode() &&
            newVel && newVel._isVirtualTextNode &&
            oldComp.el.textContent === newVel.text) {
          continue
        }

        // ATTENTION: here we are linking two HTML elements opportunistically on the fly
        // Note, that !state.is(MAPPED) means that both elements do not contain
        // any refs or components, and are thus save to be reused
        // TODO: we should find out if this is really something we want to do
        // or stick to primitive rendering for sake of performance
        if (oldComp && oldComp._isElementComponent &&
            newVel._isVirtualHTMLElement &&
            !state.is(MAPPED, oldComp) && !state.is(MAPPED, newVel) &&
            oldComp.tagName === newVel.tagName) {
          // linking
          newVel._comp = oldComp;
          state.set(LINKED, newVel);
          state.set(LINKED, oldComp);
          _update(state, newVel);
          continue
        }

        // update virtual component recursively
        if (!state.is(RENDERED, newVel)) {
          // HACK: fixing wrong parent links
          // TODO: identify when this happens and find a better solution
          // Up to now I found out:
          // - see Component.test@'Elements with different refs have different component instances'
          // -> in this case I think the elements do not get mapped because there are no (matching) Components
          // -> which leads to pre-created comps during capture phase
          if (newVel._comp && newVel._comp.parent !== comp) {
            if (substanceGlobals.VERBOSE_RENDERING) {
              console.warn('Found captured child component with wrong parent link. Fixing up.');
            }
            newVel._comp.parent = comp;
          }
          _update(state, newVel);
        }

        const newComp = newVel._comp;
        // nothing more to do if components are equal, i.e. component and virtual component have been linked during capturing
        if (newComp === oldComp) {
          continue
        }
        _assert(newComp, 'Component instance should now be available.');

        // update the parent for relocated components
        // ATTENTION: relocating a component does not update its context
        if (state.is(RELOCATED, newComp)) {
          newComp._setParent(comp);
        }
        _assert(comp === newComp.parent, 'Link to parent component should be correct.');

        // append remaining new ones if no old one is left
        if (newVel && !oldComp) {
          _appendChild(state, comp, newComp);
          continue
        }

        // Differential update
        if (state.is(LINKED, newVel)) {
          if (state.is(LINKED, oldComp)) {
            // the order of elements with ref has changed
            state.set(DETACHED, oldComp);
            _removeChild(state, comp, oldComp);
            pos2--;
          // the old one could not be mapped, thus can be removed
          } else {
            _removeChild(state, comp, oldComp);
            pos2--;
          }
        } else if (state.is(LINKED, oldComp)) {
          _insertChildBefore(state, comp, newComp, oldComp);
          pos1--;
        } else {
          // both elements are not mapped
          // TODO: we could try to reuse components if they are of same type
          // However, this needs a more involved mapping strategy, and/or a change
          // in the order of this iteration. At this point it is already too late
          // because the recursive update has already been done, not reusing the existing elements
          _replaceChild(state, comp, oldComp, newComp);
        }
      }
    }
  }

  if (vel._isVirtualComponent) {
    _storeInternalData(comp, vel);

    // using the element of the forwarded component as element for this component
    if (vel._forwardedEl) {
      const forwardedComp = vel._forwardedEl._comp;
      // TODO: is this really the correct time to call didMount? shouldn't this
      // be called when processed by the parent?
      // TODO: this will not work with multiple forwarded components
      if (!comp.el) {
        comp.el = forwardedComp.el;
      }

      // Dealing with situations where the forwarded element/component has been replaced
      // e.g. switching between editor and reader in the same forwarding component.
      // Only the actual parent of the forwarded component should do this, not any
      // other forwarding component in the same forwarding chain.
      // TODO: this fix-up seems strange. IMO we should change
      // the way how forwarding components are implemented
      // leading to a more explicit solution which also should work better together
      // with the rest of the update implementation
      if (!vel._forwardedEl._isForwarding) {
        const oldForwardedComp = comp.el._comp;
        if (oldForwardedComp !== forwardedComp) {
          oldForwardedComp.triggerDispose();
          comp.el.parentNode.replaceChild(comp.el, forwardedComp.el);
          comp.el = forwardedComp.el;
          forwardedComp.triggerDidMount();
        }
      }
    }
  }

  state.set(RENDERED, vel);
  state.set(RENDERED, comp);
}

// remove all elements from the DOM which are not linked to a component
// or which we know have been relocated
// ATTENTION: removing the elements of relocated components
// in advance, then the algorithm later becomes easier only considering
// add and remove.
function _getChildren (state, comp) {
  const _childNodes = comp.el.getChildNodes();
  const children = _childNodes.map(child => {
    let childComp = child._comp;
    // NOTE: don't know why, but sometimes it happens that there appear elements that are not rendered via Component.js
    if (!childComp) {
      comp.el.removeChild(child);
      return null
    }
    // EXPERIMENTAL: trying to get forwarding components right.
    // the problem is that on the DOMElement level, forwarding components are not
    // 'visible', as they do not have an own element.
    // Here we are taking the owner of an element when it isForwarded
    // bubbling up the parent hierarchy.
    if (childComp._isForwarded()) {
      childComp = _findForwardingComponent(comp, childComp);
    }
    // remove orphaned nodes and relocated components
    if (!childComp || state.is(RELOCATED, childComp)) {
      comp.el.removeChild(child);
      return null
    } else {
      return childComp
    }
  }).filter(Boolean);
  return children
}

function _adopt (state, vel, el) {
  const comp = vel._comp;
  if ((vel._isVirtualComponent || vel._isVirtualHTMLElement) && !el.isElementNode()) {
    throw new Error('Provided DOM element is not compatible.')
  }
  comp.el = el;
  el._comp = comp;
  _updateDOMElement(el, vel);
  _propagateForwardedEl(vel, el);

  if ((vel._isVirtualComponent || vel._isVirtualHTMLElement)) {
    const existingChildNodes = el.childNodes.slice();
    const virtualChildNodes = vel.children;
    let pos1 = 0; let pos2 = 0;
    while (pos1 < existingChildNodes.length || pos2 < virtualChildNodes.length) {
      let child1 = existingChildNodes[pos1];
      let child2 = virtualChildNodes[pos2];
      // remove all remaining DOM nodes
      if (!child2) {
        while (child1) {
          child1.remove();
          pos1++;
          child1 = existingChildNodes[pos1];
        }
        break
      }
      if (!child1) {
        while (child2) {
          el.appendChild(_createEl(state, child2));
          if (child2._isVirtualComponent) {
            _storeInternalData(child2._comp, child2);
          }
          pos2++;
          child2 = virtualChildNodes[pos2];
        }
        break
      }
      // continue with the forwarded element
      child2 = _getForwardedEl(child2);

      // remove incompatible DOM elements
      if (
        (child1.isElementNode() && (child2._isVirtualHTMLElement || child2._isVirtualComponent)) ||
        (child1.isTextNode() && child2._isVirtualTextNode)
      ) {
        _adopt(state, child2, child1);
        pos1++;
        pos2++;
      } else {
        child1.remove();
        pos1++;
        continue
      }
    }

    if (vel._isVirtualComponent) {
      _storeInternalData(comp, vel);
    }
  }
}

function _createEl (state, vel) {
  const el = _createDOMElement(state, vel);
  vel._comp.el = el;
  el._comp = vel._comp;
  _propagateForwardedEl(vel, el);

  if ((vel._isVirtualComponent || vel._isVirtualHTMLElement)) {
    vel.children.forEach(vc => {
      vc = _getForwardedEl(vc);
      el.appendChild(_createEl(state, vc));
    });
  }
  return el
}

function _getForwardedEl (vel) {
  // Note: if the root component is forwarding
  // we have to use the forwarded element instead
  // _propagateForwardedEl() will latern propagate the element up-tree
  while (vel._isForwarding) {
    vel = vel._forwardedEl;
  }
  return vel
}

function _propagateForwardedEl (vel, el) {
  if (vel._isForwarded) {
    let parent = vel.parent;
    while (parent && parent._isForwarding) {
      parent._comp.el = el;
      _storeInternalData(parent._comp, parent);
      parent = parent.parent;
    }
  }
}

function _getInternalComponentData (comp) {
  if (!comp.__internal__) {
    comp.__internal__ = new InternalComponentData();
  }
  return comp.__internal__
}

function _storeInternalData (comp, vc) {
  const context = vc._context;
  const compData = _getInternalComponentData(comp);
  compData.elementProps = vc.elementProps;
  compData.refs = context.refs;
  compData.foreignRefs = context.foreignRefs;
  compData.internalRefs = context.internalRefs;
  // creating a plain object with refs to real component instances
  comp.refs = Array.from(context.refs).reduce((refs, [key, vc]) => {
    // ATTENTION: in case that a referenced component has not been used,
    // i.e. actually appended to an element, the virtual component will not be rendered
    // thus does not have component instance attached
    const comp = vc._comp;
    if (comp) {
      refs[key] = vc._comp;
    } else {
      console.warn(`Warning: component with reference '${key}' has not been used`);
    }
    return refs
  }, {});
}

function _extractInternalRefs (context, root) {
  const idCounts = new Map();
  const refs = new Map();
  for (const vc of context.components) {
    // TODO: also skip those components which are not appended to the current comp
    if (vc._ref) continue
    let ref = _getVirtualComponentTrace(vc, root);
    // disambiguate generated refs by appending '@<count>'
    if (idCounts.has(ref)) {
      const count = idCounts.get(ref) + 1;
      idCounts.set(ref, count);
      ref = ref + '@' + count;
    } else {
      idCounts.set(ref, 1);
    }
    refs.set(ref, vc);
  }
  return refs
}

function _getVirtualComponentTrace (vc, root) {
  const frags = [getClassName(vc.ComponentClass)];
  if (!vc._isForwarded) {
    let parent = vc.getParent();
    while (parent) {
      if (parent === root) break
      // ATTENTION: incremental render uses a fake parent
      if (parent._isFake) break
      // ATTENTION if the vc has been appended then its ancestors are all virtual HTML elements
      _assert(parent._isVirtualHTMLElement, 'parent should be VirtualHTMLElement');
      frags.unshift(parent.tagName);
      parent = parent.parent;
    }
  }
  return frags.join('/')
}

function _triggerDidUpdate (state, vel) {
  if (vel._isVirtualComponent) {
    if (!state.is(SKIPPED, vel)) {
      vel.children.forEach(_triggerDidUpdate.bind(null, state));
    }
    if (state.is(UPDATED, vel)) {
      vel._comp.didUpdate(state.get(OLDPROPS, vel), state.get(OLDSTATE, vel));
    }
  } else if (vel._isVirtualHTMLElement) {
    vel.children.forEach(_triggerDidUpdate.bind(null, state));
  }
}

function _appendChild (state, parent, child) {
  parent.el.appendChild(child.el);
  _triggerDidMount(state, parent, child);
}

function _replaceChild (state, parent, oldChild, newChild) {
  parent.el.replaceChild(oldChild.el, newChild.el);
  if (!state.is(DETACHED, oldChild)) {
    oldChild.triggerDispose();
  }
  _triggerDidMount(state, parent, newChild);
}

function _insertChildBefore (state, parent, child, before) {
  parent.el.insertBefore(child.el, before.el);
  _triggerDidMount(state, parent, child);
}

function _removeChild (state, parent, child) {
  parent.el.removeChild(child.el);
  if (!state.is(DETACHED, child)) {
    child.triggerDispose();
  }
}

function _triggerDidMount (state, parent, child) {
  if (!state.is(DETACHED, child) &&
      parent.isMounted() && !child.isMounted()) {
    child.triggerDidMount(true);
  }
}

function _createDOMElement (state, vel) {
  let el;
  if (vel._isVirtualTextNode) {
    el = state.elementFactory.createTextNode(vel.text);
  } else {
    el = state.elementFactory.createElement(vel.tagName);
  }
  if (vel._comp) {
    el._comp = vel._comp;
  }
  _updateDOMElement(el, vel);
  return el
}

function _updateDOMElement (el, vel) {
  // special handling for text nodes
  if (vel._isVirtualTextNode) {
    if (el.textContent !== vel.text) {
      el.setTextContent(vel.text);
    }
    return
  }
  const tagName = el.getTagName();
  if (vel.tagName.toLowerCase() !== tagName) {
    el.setTagName(vel.tagName);
  }
  _updateHash({
    oldHash: el.getAttributes(),
    newHash: vel.getAttributes(),
    update: function (key, val) {
      el.setAttribute(key, val);
    },
    remove: function (key) {
      el.removeAttribute(key);
    }
  });
  _updateHash({
    oldHash: el.htmlProps,
    newHash: vel.htmlProps,
    update: function (key, val) {
      el.setProperty(key, val);
    },
    remove: function (key) {
      el.removeProperty(key);
    }
  });
  _updateListeners({
    el,
    oldListeners: el.getEventListeners(),
    newListeners: vel.getEventListeners()
  });

  // special treatment of HTML elements having custom innerHTML
  if (vel.hasInnerHTML()) {
    if (!el._hasInnerHTML) {
      el.empty();
      el.setInnerHTML(vel.getInnerHTML());
    } else {
      const oldInnerHTML = el.getInnerHTML();
      const newInnerHTML = vel.getInnerHTML();
      if (oldInnerHTML !== newInnerHTML) {
        el.setInnerHTML(newInnerHTML);
      }
    }
    el._hasInnerHTML = true;
  }
}

function _hashGet (hash, key) {
  if (isFunction(hash.get)) {
    return hash.get(key)
  } else {
    return hash[key]
  }
}

function _updateHash ({ newHash, oldHash, update, remove }) {
  if (!newHash && !oldHash) return
  // TODO: this could be improved with a simpler impl that removes all old
  if (!newHash) {
    newHash = new Map();
  }
  // TODO: this could be improved with a simpler impl that adds all new
  if (!oldHash) {
    oldHash = new Map();
  }
  const updatedKeys = {};
  // FIXME: this is not working as expected in browser
  // i.e. _hashGet does not take the 'AttrbutesMap' thing into account
  // and provides 'undefined' for the most cases
  for (const key of newHash.keys()) {
    const oldVal = _hashGet(oldHash, key);
    const newVal = _hashGet(newHash, key);
    updatedKeys[key] = true;
    if (oldVal !== newVal) {
      update(key, newVal);
    }
  }
  // TODO: try to consolidate this.
  // we have a horrible mixture of Objects and Maps here
  // want to move to the Map based impl
  if (isFunction(oldHash.keys)) {
    const keys = Array.from(oldHash.keys());
    keys.forEach((key) => {
      if (!updatedKeys[key]) {
        remove(key);
      }
    });
  } else {
    for (const key in oldHash) {
      if (hasOwnProperty(oldHash, key) && !updatedKeys[key]) {
        remove(key);
      }
    }
  }
}

function _updateListeners (args) {
  const el = args.el;
  // NOTE: considering the low number of listeners
  // it is quicker to just remove all
  // and add again instead of computing the minimal update
  const newListeners = args.newListeners || [];
  el.removeAllEventListeners();
  for (let i = 0; i < newListeners.length; i++) {
    el.addEventListener(newListeners[i]);
  }
}

function _findForwardingComponent (comp, forwarded) {
  let current = forwarded.getParent();
  while (current) {
    const parent = current.getParent();
    if (parent === comp) {
      return current
    }
    current = parent;
  }
}

function _createWrappingVirtualComponent (comp) {
  const vel = new VirtualElement.Component(comp.constructor);
  vel._comp = comp;
  return vel
}

const CAPTURED = Symbol('CAPTURED');
const DETACHED = Symbol('DETACHED');
const LINKED = Symbol('LINKED');
const MAPPED = Symbol('MAPPED');
const NEW = Symbol('NEW');
const OLDPROPS = Symbol('OLDPROPS');
const OLDSTATE = Symbol('OLDSTATE');
// 'relocated' means a node with ref
// has been attached to a new parent node
const RELOCATED = Symbol('RELOCATED');
const RENDERED = Symbol('RENDERED');
const SKIPPED = Symbol('SKIPPED');
const UPDATED = Symbol('UPDATED');

class RenderingState {
  constructor (componentFactory, elementFactory) {
    this.componentFactory = componentFactory;
    this.elementFactory = elementFactory;
    this._states = new Map();
    this.contexts = [];
  }

  dispose () {
    this.contexts = [];
  }

  set (key, obj, val = true) {
    let info = this._states.get(obj);
    if (!info) {
      info = new Map();
      this._states.set(obj, info);
    }
    info.set(key, val);
  }

  get (key, obj) {
    const info = this._states.get(obj);
    if (info) {
      return info.get(key)
    }
  }

  is (key, obj) {
    return Boolean(this.get(key, obj))
  }

  pushContext (context) {
    this.contexts.push(context);
  }

  popContext () {
    return this.contexts.pop()
  }

  getCurrentContext () {
    return this.contexts[this.contexts.length - 1]
  }
}

function _assert (cond, msg) {
  if (!cond) {
    if (substanceGlobals.ASSERTS) {
      throw new Error('Assertion failed: ' + msg)
    }
  }
}

class InternalComponentData {
  constructor () {
    this.refs = new Map();
    this.foreignRefs = new Map();
    this.internalRefs = new Map();
    this.elementProps = null;
  }
}

// exposing internal API for testing
RenderingEngine._INTERNAL_API = {
  _capture,
  _wrap: _createWrappingVirtualComponent,
  _update,
  CAPTURED,
  DETACHED,
  LINKED,
  MAPPED,
  NEW,
  RELOCATED,
  RENDERED,
  SKIPPED,
  TOP_LEVEL_ELEMENT,
  UPDATED
};

function extend (...args) {
  return Object.assign(...args)
}

/**
  Event support.
*/
class EventEmitter {
  /**
    Emit an event.

    @param {String} event
    @param ...arguments
    @return true if a listener was notified, false otherwise.
   */
  emit (event) {
    if (event in this.__events__) {
      // console.log("Emitting event %s (%d listeners) on", event, this.__events__[event].length, this)
      // Clone the list of bindings so that handlers can remove or add handlers during the call.
      var bindings = this.__events__[event].slice();
      var args = Array.prototype.slice.call(arguments, 1);
      for (var i = 0, len = bindings.length; i < len; i++) {
        var binding = bindings[i];
        // console.log("- triggering %s on %s", event, binding.context.constructor.name)
        binding.method.apply(binding.context, args);
      }
      return true
    }
    return false
  }

  /**
    Subscribe a listener to an event.

    Optionally, a `priority` can be provided to control the order
    of all bindings. The default priority is 0. All listeners with the
    same priority remain in order of registration.
    A lower priority will make the listener be called later, a higher
    priority earlier.

    @param {String} event
    @param {Function} method
    @param {Object} context
   */
  on (event, method, context) {
    // TODO: we could add options like 'once'
    _on.call(this, event, method, context);
  }

  /**
    Unsubscribe a listener from an event.

    @param {String} event
    @param {Function} method
    @param {Object} context
   */
  off (event, method, context) { // eslint-disable-line no-unused-vars
    if (arguments.length === 1 && isObject(arguments[0])) {
      _disconnect.call(this, arguments[0]);
    } else {
      _off.apply(this, arguments);
    }
  }

  _debugEvents () {
    /* eslint-disable no-console */
    console.log('### EventEmitter: ', this);
    forEach(this.__events__, (handlers, name) => {
      console.log('- %s listeners for %s: ', handlers.length, name, handlers);
    });
    /* eslint-enable no-console */
  }

  get __events__ () {
    if (!this.___events___) {
      this.___events___ = {};
    }
    return this.___events___
  }
}

/*
  Internal implementation for registering a listener.

  @param {String} event
  @param {Function} method
  @param {Object} context
 */
function _on (event, method, context) {
  /* eslint-disable no-invalid-this */
  var bindings;
  validateMethod(method, context);
  if (hasOwnProperty(this.__events__, event)) {
    bindings = this.__events__[event];
  } else {
    // Auto-initialize bindings list
    bindings = this.__events__[event] = [];
  }
  // Add binding
  bindings.push({
    method: method,
    context: context || null
  });
  return this
  /* eslint-enable no-invalid-this */
}

/*
  Remove a listener.

  @param {String} event
  @param {Function} method
  @param {Object} context
 */
function _off (event, method, context) {
  /* eslint-disable no-invalid-this */
  if (arguments.length === 0) {
    this.___events___ = {};
    return this
  }
  if (arguments.length === 1) {
    delete this.__events__[event];
    return this
  }
  validateMethod(method, context);
  if (!(event in this.__events__) || !this.__events__[event].length) {
    // No matching bindings
    return this
  }
  // Default to null context
  if (arguments.length < 3) {
    context = null;
  }
  // Remove matching handlers
  const bindings = this.__events__[event];
  for (let i = bindings.length - 1; i >= 0; i--) {
    const b = bindings[i];
    if (b.method === method && b.context === context) {
      bindings.splice(i, 1);
    }
  }
  // Cleanup if now empty
  if (bindings.length === 0) {
    delete this.__events__[event];
  }
  return this
  /* eslint-enable no-invalid-this */
}

// removes a listener from all events
function _disconnect (context) {
  /* eslint-disable no-invalid-this */
  // Remove all connections to the context
  forEach(this.__events__, (bindings, event) => {
    for (let i = bindings.length - 1; i >= 0; i--) {
      // bindings[i] may have been removed by the previous steps
      // so check it still exists
      if (bindings[i] && bindings[i].context === context) {
        _off.call(this, event, bindings[i].method, context);
      }
    }
  });
  return this
  /* eslint-enable no-invalid-this */
}

function validateMethod (method, context) {
  // Validate method and context
  if (typeof method === 'string') {
    // Validate method
    if (context === undefined || context === null) {
      throw new Error('Method name "' + method + '" has no context.')
    }
    if (!(method in context)) {
      // Technically the method does not need to exist yet: it could be
      // added before call time. But this probably signals a typo.
      throw new Error('Method not found: "' + method + '"')
    }
    if (typeof context[method] !== 'function') {
      // Technically the property could be replaced by a function before
      // call time. But this probably signals a typo.
      throw new Error('Property "' + method + '" is not a function')
    }
  } else if (typeof method !== 'function') {
    throw new Error('Invalid callback. Function or method name expected.')
  }
}

const COMPONENT_FACTORY = {
  createComponent (ComponentClass, parent, props) {
    if (!ComponentClass.prototpe || !ComponentClass.prototype._isComponent) {
      ComponentClass = Component.createFunctionComponent(ComponentClass);
    }
    return new ComponentClass(parent, props)
  },
  createElementComponent (parent, virtualElement) {
    return new ElementComponent(parent, virtualElement)
  },
  createTextNodeComponent (parent, virtualElement) {
    return new TextNodeComponent(parent, virtualElement)
  }
};
/**
  A light-weight component implementation inspired by
  [React](https://facebook.github.io/react/) and [Ember](http://emberjs.com/).
  In contrast to the large frameworks it does much less things automagically in
  favour of synchronous rendering and a minimalistic life-cycle. It also
  provides *up-tree* communication and *dependency injection*.

  ### Why synchronous rendering?

  Synchronous rendering, while it may *seem* less performant, is necessary
  because substance must render the model, after it has changed before the next
  change is triggered by the user.

  Asynchronous rendering as it exists in React means that the UI will
  eventually *catch* up to changes in the model. This is not acceptable in
  substance because substance plays with contenteditable and thus, cursor
  positions, etc are maintained in the browser's DOM. If we went the async way,
  the cursor in the DOM would be briefly inconsistent with the cursor in the
  model. In this brief window, changes triggered by the user would be impossible
  to apply.

  ### Concepts:

  - `props` are provided by a parent component.  An initial set of properties is provided
  via constructor. After that, the parent component can call `setProps` or `extendProps`
  to update these properties which triggers rerendering if the properties change.

  - `state` is a set of flags and values which are used to control how the component
  gets rendered given the current props. Using `setState` the component can change
  its internal state, which leads to a rerendering if the state changes.
  Prefer using `extendState` rather than `setState`.

    Normally, a component maintains its own state. It isn't recommended that a
  parent pass in or update state. If you find the need for this, you should be
  looking at `props`.

    State would be useful in situations where the component itself controls some
  aspect of rendering. Eg. whether a dropdown is open or not could be a state
  within the dropdown component itself since no other component needs to know
  it.

  - A child component with a `ref` id will be reused on rerender. All others will be
  wiped and rerender from scratch. If you want to preserve a grand-child (or lower), then
  make sure that all anchestors have a ref id. After rendering the child will be
  accessible via `this.refs[ref]`.

  - A component can send actions via `send` which are bubbled up through all parent
  components until one handles it. A component declares that it can handle an
  action by calling the `handleActions` method on itself in the constructor or
  the `didUpdate` lifecycle hook.

  ### Lifecycle hooks

  The {@link RenderingEngine} triggers a set of hooks for you to define behavior
  in various stages of the rendering cycle. The names are pretty self
  explanatory. If in doubt, please check out the method documentation below.

  1. {@link Component#didMount}
  2. {@link Component#didUpdate}
  3. {@link Component#dispose}
  4. {@link Component#willReceiveProps}
  5. {@link Component#willUpdateState}

  @implements EventEmitter

  @example

  Define a component:

  ```
  class HelloMessage extends Component {
    render() {
      return $$('div').append(
        'Hello ',
        this.props.name
      )
    }
  }
  ```

  And mount it to a DOM Element:

  ```
  HelloMessage.mount({name: 'John'}, document.body)
  ```
*/
class Component extends EventEmitter {
  /**
    Construcutor is only used internally.

    @param {Component} parent The parent component
    @param {Object} props     Properties against which this class must
                              be rendered the first time.
  */
  constructor (parent, props = {}, options = {}) {
    super();

    // TODO: it turned out that the signature is sub-optimal
    // w.r.t. `parent`. Creating a root component allowing for manual dependency injection
    // we could change to `new Component(props, options)`
    // with options `parent` and `context`
    // Also, the parent-child relation could be inconsistent with the actual elements, which should be checked.

    this.parent = (parent && parent._isComponent) ? parent : null;

    // EXPERIMENTAL: used for attaching to existing/pre-rendered element
    this.el = options.el;

    // context from parent (dependency injection) or if given via options
    // the latter is a rather EXPERIMENTAL feature only used TODO where?
    let context;
    if (isFunction(this.defineContext)) {
      context = this.defineContext(props, parent);
    } else {
      context = options.context || this._getContext();
    }
    this.context = context || {};
    // Object.freeze(this.context)

    // used for rerendering and can be used by components for incremental rendering
    // Note: usually it is inherited from the parent. In case of root components
    // it can be provided via context or options
    this.renderingEngine = (parent && parent.renderingEngine) || options.renderingEngine || new RenderingEngine({
      componentFactory: COMPONENT_FACTORY
    });

    // HACK: to allow that ElementComponent and TextComponent can derive from Component
    // we need to skip the initialization of the rest
    if (this._SKIP_COMPONENT_INIT) return

    this.__id__ = uuid();

    // store for ref'd child components
    this.refs = {};
    // HACK: a temporary solution to handle refs owned by an ancestor
    // is to store them here as well, so that we can map virtual components
    // efficiently
    this.__foreignRefs__ = {};

    // action handlers added via `handleAction()` are stored here
    this._actionHandlers = {};
    this.handleActions(this.getActionHandlers());

    // setting props without triggering willReceiveProps
    this.props = props;
    // Object.freeze(this.props)

    // initializing state
    this.state = this.getInitialState() || {};
    // Object.freeze(this.state)
  }

  getId () {
    return this.__id__
  }

  setId () {
    throw new Error("'id' is readonly")
  }

  getActionHandlers () {
    return {}
  }

  dir () {
    console.dirxml(this.getNativeElement());
  }

  /**
    Provides the context which is delivered to every child component. Override
    if you want to provide your own child context. Child context is available to
    all components rendered from within this component's render method as
    `this.context`.

    @example

    ```
    class A extends Component {
    ...
      getChildContext() {
        // Optional, but useful to merge super's context
        return Object.assign({}, super.getChildContext(), {foo: 'bar'})
      }

      render($$) {
        return $$(B)
      }
    }

    class B extends Component {
      render($$) {
        // this.context.foo is available here
      }
    }
    ```
    Component

    @return {Object} the child context
  */
  getChildContext () {
    return {}
  }

  /**
    Override this within your component to provide the initial state for the
    component. This method is internally called by the
    {@link RenderingEngine} and the state defined here is made available to
    the {@link Component#render} method as this.state.

    @return {Object} the initial state
  */
  getInitialState () {
    return {}
  }

  /**
    Provides the parent of this component.

    @return {Component} the parent component or null if this component does not have a parent.
  */
  getParent () {
    return this.parent
  }

  /**
    Get the top-most Component. This the component mounted using
    @return {Component} The root component
  */
  getRoot () {
    let comp = this;
    let parent = comp;
    while (parent) {
      comp = parent;
      parent = comp.getParent();
    }
    return comp
  }

  getElement () {
    return this.el
  }

  getNativeElement () {
    return this.el.getNativeElement()
  }

  /**
    Short hand for using labelProvider API

    @example

    ```
    render($$) {
      let el = $$('div').addClass('sc-my-component')
      el.append(this.getLabel('first-name'))
      return el
    }
    ```
  */
  getLabel (name, ...args) {
    const labelProvider = this.getLabelProvider();
    if (!labelProvider) throw new Error('Missing labelProvider.')
    return labelProvider.getLabel(name, ...args)
  }

  getLabelProvider () {
    return this.context.labelProvider
  }

  /**
    Get a component class for the component name provided. Use this within the
    render method to render children nodes.

    @example

    ```
    render($$) {
      let el = $$('div').addClass('sc-my-component')
      let caption = this.props.node.getCaption() // some method that returns a node
      let CaptionClass = this.getComponent(caption.type)
      el.append($$(CaptionClass, {node: caption}))
      return el
    }
    ```

    @param  {String} componentName The component's registration name
    @param  {Boolean} maybe if `true` then does not throw when no Component is found
    TODO: this paramater should really be called 'strict' even if this
    is a breaking change

    @return {Class}                The ComponentClass
  */
  getComponent (componentName, maybe) {
    const componentRegistry = this.getComponentRegistry();
    if (!componentRegistry) throw new Error('Missing componentRegistry.')
    const ComponentClass = componentRegistry.get(componentName);
    if (!maybe && !ComponentClass) {
      throw new Error('No Component registered with name ' + componentName)
    }
    return ComponentClass
  }

  getComponentRegistry () {
    return this.context.componentRegistry
  }

  /**
    Render the component.

    ATTENTION: this does not create a DOM presentation but
    a virtual representation which is compiled into a DOM element later.

    Every Component should override this method.

    @param {Function} $$ method to create components
    @return {VirtualElement} VirtualElement created using {@param $$}
  */
  render ($$) {
    /* istanbul ignore next */
    return $$('div')
  }

  /**
    Mount a component to the DOM.

    @example

    ```
    let app = Texture.mount({
      configurator: configurator,
      documentId: 'elife-15278'
    }, document.body)
    ```
  */
  mount (el, options = {}) {
    if (!el) {
      throw new Error('Element is required.')
    }
    el = DefaultDOMElement.wrap(el);
    if (options.adopt || options.inplace) {
      this.el = el;
    } else {
      // Makes sure a new element is created for the component
      this.el = null;
    }
    this.renderingEngine = Component.createRenderingEngine(el.getOwnerDocument());
    this._render(this.props, this.state, options);
    if (!options.adopt && !options.inplace) {
      el.appendChild(this.el);
    }
    if (el.isInDocument()) {
      this.triggerDidMount();
    }
    return this
  }

  /**
    Determines if Component should be rendered again using `Component#rerender`
    after changing props. For comparisons, you can use `this.props` and
    `newProps`.

    The default implementation simply returns true.

    @param {Object} newProps The new props being applied to this component.
    @param {Object} newState The new state being applied
    @return a boolean indicating whether rerender() should be run.
  */
  shouldRerender(newProps, newState) { // eslint-disable-line
    return true
  }

  /**
    Rerenders the component.

    Call this to manually trigger a rerender.
  */
  rerender () {
    this._rerender(this.props, this.state);
  }

  _rerender (oldProps, oldState) {
    this._render(oldProps, oldState);
    // when this component is not mounted still trigger didUpdate()
    if (!this.isMounted()) {
      this.didUpdate(oldProps, oldState);
    }
  }

  _render (oldProps, oldState, options = {}) {
    if (this.__isRendering__) {
      throw new Error('Component is rendering already.')
    }
    this.__isRendering__ = true;
    try {
      this.renderingEngine._render(this, oldProps, oldState, options);
    } finally {
      delete this.__isRendering__;
    }
  }

  /**
    Triggers didMount handlers recursively.

    Gets called when using `component.mount(el)` on an element being
    in the DOM already. Typically this is done for a root component.

    If this is not possible because you want to do things differently, make sure
    you call 'component.triggerDidMount()' on root components.

    @param isMounted an optional param for optimization, it's used mainly internally
    @private
    @example

    ```
    let frag = document.createDocumentFragment()
    let comp = MyComponent.mount(frag)
    ...
    $('body').append(frag)
    comp.triggerDidMount()
    ```
  */
  triggerDidMount (options = {}) {
    // don't trigger didMount if that has been done already
    // Note: that this is ATM accepted for the sake of simplicity of
    // forwarding components implementation
    // TODO: consider avoiding this, and turn this into a visible warning
    if (this.__isMounted__) {
      if (substanceGlobals.VERBOSE_RENDERING) {
        console.warn('Calling triggerDidMount() on an already mounted component.');
      }
      return
    }

    // Following react's life-cycle, 'didMount' is triggered 'bottom-up'
    // i.e. children first.
    if (!options.noDescent) {
      if (this._isForwarding()) {
        this._getForwardedComponent().triggerDidMount({ noAscent: true });
      } else {
        const children = this.getChildren();
        for (const child of children) {
          child.triggerDidMount();
        }
      }
    }

    // ATTENTION: it is important to have this before calling didMount()
    // so that in case of a state change or such during didMount() the children will get triggered.
    this.__isMounted__ = true;
    this.didMount();

    // ATTENTION: forwarding components are 'invisible' with respect to the
    // DOM elements, i.e. not covered by the recursion done here using this.getChildren()
    // so we trigger explicitly
    if (this._isForwarded() && !options.noAscent) {
      this.getParent().triggerDidMount({ noDescent: true });
    }
  }

  /**
   * Triggers dispose handlers recursively.
   */
  triggerDispose (options = {}) {
    // ATTENTION: for forwarding components this is a bit tricky
    // because forwarding components do not 'exist' in the DOM
    // and we do not have a link to the forwarded component
    // TODO: maybe we could try to store a link to the forwarded component
    // but that would be redundant with the DOM

    // For now we apply the following algorithm:
    // if this is a forwarded component, bubble up until options.root
    // passing options.noDescent to cover all forwarding components
    // otherwise descend into children or the forwarded component
    const _descend = () => {
      const children = this.getChildren();
      for (const child of children) {
        child.triggerDispose({ root: this });
      }
    };
    const _dispose = () => {
      if (substanceGlobals.VERBOSE_RENDERING) {
        if (!this._isElementComponent && !this._isTextNodeComponent) {
          console.info('Disposing component of type', getClassName(this));
        }
      }
      this.dispose();
      this.__isMounted__ = false;
    };

    if (this._isForwarded()) {
      // Forwarded components call dispose on children first
      // then dispose and bubble up to the root, without descending again
      _descend();
      _dispose();
      if (options.root) {
        let parent = this.getParent();
        while (parent !== options.root) {
          parent.triggerDispose({ noDescent: true, root: options.root });
          parent = parent.getParent();
        }
      }
    } else if (this._isForwarding()) {
      // Forwarding components call dispose on the forwarded component
      // first, unless this is called during a bubble-up
      if (!options.noDescent) {
        const forwardedComp = this.el._comp;
        forwardedComp.triggerDispose({ root: this });
      }
      _dispose();
    } else {
      // regular components call dispose on children first
      _descend();
      _dispose();
    }
  }

  /**
    Called when the element is inserted into the DOM. Typically, you can use
    this to set up subscriptions to changes in the document or in a node of
    your interest.

    Remember to unsubscribe from all changes in the `Component#dispose`
    method otherwise listeners you have attached may be called without a context.

    Make sure that you call `component.mount(el)` using an element
    which is already in the DOM.

    ```javascript
    let component = new MyComponent()
    component.mount(window.document.body)
    ```
  */
  didMount () {}

  /**
    Hook which is called after state or props have been updated and the implied
    rerender is completed.
  */
  didUpdate () {}

  /**
    @return {boolean} indicating if this component has been mounted
   */
  isMounted () {
    return Boolean(this.__isMounted__)
  }

  /**
   * A hook which is called when the component is unmounted, i.e. removed from DOM,
   * hence disposed. See `Component#didMount` for example usage.
   *
   * Remember to unsubscribe all change listeners here.
   */
  dispose () {}

  // EXPERIMENTAL
  // TODO: rethink this. We need this for triggerDidMount() and triggerDispose()
  // in case of forwarded / forwarding components
  // however this implicit el._comp comparison is not very good,
  // because it does not reflect the forwarding semantically.
  // We need something more explicit.
  _isForwarding () {
    if (this.el && this.el._comp) {
      return this.el._comp !== this
    } else {
      return false
    }
  }

  _isForwarded () {
    const parent = this.getParent();
    return (parent && parent._isForwarding())
  }

  _getForwardedComponent () {
    if (this.el) {
      return this.el._comp
    }
  }

  /*
    Attention: this is used when a preserved component is relocated.
    E.g., rendered with a new parent.
  */
  _setParent (newParent) {
    this.parent = newParent;
    this.context = this._getContext() || {};
    Object.freeze(this.context);
  }

  /**
    Send an action request to the parent component, bubbling up the component
    hierarchy until an action handler is found.

    @param action the name of the action
    @param ... arbitrary number of arguments
    @returns {Boolean} true if the action was handled, false otherwise
    @example
  */
  send (action) {
    // We start looking for handlers at the parent level
    let comp = this;
    while (comp) {
      if (comp._doesHandleAction(action)) {
        const args = Array.prototype.slice.call(arguments, 1);
        const res = comp._handleAction(action, args);
        return Promise.resolve(res)
      }
      comp = comp.getParent();
    }
    console.warn('Action', action, 'was not handled.');
    return Promise.resolve(false)
  }

  _doesHandleAction (action) {
    return this._actionHandlers && this._actionHandlers[action]
  }

  _handleAction (action, args) {
    const actionHandler = this._actionHandlers[action];
    return actionHandler(...args)
  }

  /**
    Define action handlers. Call this during construction/initialization of a component.
    @param {Object} actionHandler  An object where the keys define the handled
        actions and the values define the handler to be invoked.

    These handlers are automatically removed once the Component is disposed, so
    there is no need to unsubscribe these handlers in the  `Component#dispose`
    hook.

    @example

    ```
    class MyComponent extends Component {
      constructor(...args) {
        super(...args)
        this.handleActions({
         'openPrompt': this.openPrompt,
         'closePrompt': this.closePrompt
        })
      }
    }
    ```
  */
  handleActions (actionHandlers) {
    forEach(actionHandlers, (method, actionName) => {
      this.handleAction(actionName, method);
    });
    return this
  }

  /**
    Define an action handler. Call this during construction/initialization of a component.

    @param {String} action name
    @param {Functon} a function of this component.
  */
  handleAction (name, handler) {
    if (!name || !handler || !isFunction(handler)) {
      throw new Error('Illegal arguments.')
    }
    handler = handler.bind(this);
    this._actionHandlers[name] = handler;
  }

  /**
    Get the current component state

    @return {Object} the current state
  */
  getState () {
    return this.state
  }

  /**
    Sets the state of this component, potentially leading to a rerender. It is
    better practice to use `Component#extendState`. That way, the code
    which updates state only updates part relevant to it.

    Eg. If you have a Component that has a dropdown open state flag and another
    enabled/disabled state flag for a node in the dropdown, you want to isolate
    the pieces of your code making the two changes. The part of your code
    opening and closing the dropdown should not also automatically change or
    remove the enabled flag.

    Note: Usually this is used by the component itself.
    @param {object} newState an object with a partial update.
  */
  setState (newState) {
    const oldProps = this.props;
    const oldState = this.state;
    // Note: while setting props it is allowed to call this.setState()
    // which will not lead to an extra rerender
    const needRerender = !this.__isSettingProps__ &&
      this.shouldRerender(this.getProps(), newState);
    // triggering this to provide a possibility to look at old before it is changed
    this.willUpdateState(newState);
    this.state = newState || {};
    Object.freeze(this.state);
    if (needRerender) {
      this._rerender(oldProps, oldState);
    } else if (!this.__isSettingProps__) {
      this.didUpdate(oldProps, oldState);
    }
  }

  /**
    This is similar to `setState()` but extends the existing state instead of
    replacing it.

    @param {object} newState an object with a partial update.
  */
  extendState (newState) {
    newState = extend({}, this.state, newState);
    this.setState(newState);
  }

  /**
    Called before state is changed.
  */
  willUpdateState(newState) { // eslint-disable-line
  }

  /**
    Get the current properties

    @return {Object} the current state
  */
  getProps () {
    return this.props
  }

  /**
    Sets the properties of this component, potentially leading to a rerender.

    @param {object} an object with properties
  */
  setProps (newProps) {
    const oldProps = this.props;
    const oldState = this.state;
    const needRerender = this.shouldRerender(newProps, this.state);
    this._setProps(newProps);
    if (needRerender) {
      this._rerender(oldProps, oldState);
    } else {
      this.didUpdate(oldProps, oldState);
    }
  }

  _setProps (newProps) {
    newProps = newProps || {};
    // set a flag so that this.setState() can omit triggering render
    this.__isSettingProps__ = true;
    try {
      this.willReceiveProps(newProps);
      this.props = newProps || {};
      Object.freeze(newProps);
    } finally {
      delete this.__isSettingProps__;
    }
  }

  /**
    Extends the properties of the component, without necessarily leading to a
    rerender.

    @param {object} an object with properties
  */
  extendProps (updatedProps) {
    const newProps = extend({}, this.props, updatedProps);
    this.setProps(newProps);
  }

  /**
    Hook which is called before properties are updated. Use this to dispose objects which will be replaced when properties change.

    For example you can use this to derive state from props.
    @param {object} newProps
  */
  willReceiveProps(newProps) { // eslint-disable-line
  }

  getTextContent () {
    if (this.el) {
      return this.el.textContent
    }
  }

  get textContent () {
    return this.getTextContent()
  }

  getInnerHTML () {
    if (this.el) {
      return this.el.getInnerHTML()
    }
  }

  get innerHTML () {
    return this.getInnerHTML()
  }

  getOuterHTML () {
    if (this.el) {
      return this.el.getOuterHTML()
    }
  }

  get outerHTML () {
    return this.getOuterHTML()
  }

  getAttribute (name) {
    if (this.el) {
      return this.el.getAttribute(name)
    }
  }

  setAttribute (name, val) {
    if (this.el) {
      this.el.setAttribute(name, val);
    }
    return this
  }

  getProperty (name) {
    if (this.el) {
      return this.el.getProperty(name)
    }
  }

  setProperty (name, val) {
    if (this.el) {
      this.el.setProperty(name, val);
    }
    return this
  }

  get tagName () {
    if (this.el) {
      return this.el.tagName
    }
  }

  hasClass (name) {
    if (this.el) {
      return this.el.hasClass(name)
    }
  }

  addClass (name) {
    if (this.el) {
      this.el.addClass(name);
    }
    return this
  }

  removeClass (name) {
    if (this.el) {
      this.el.removeClass(name);
    }
    return this
  }

  getStyle (name) {
    if (this.el) {
      return this.el.getStyle(name)
    }
  }

  setStyle (name, val) {
    if (this.el) {
      return this.el.setStyle(name, val)
    }
    return this
  }

  getValue () {
    if (this.el) {
      return this.el.getValue()
    }
  }

  setValue (val) {
    if (this.el) {
      this.el.setValue(val);
    }
    return this
  }

  getChildCount () {
    if (!this.el) return 0
    return this.el.getChildCount()
  }

  get childNodes () {
    return this.getChildNodes()
  }

  getChildNodes () {
    if (!this.el) return []
    let childNodes = this.el.getChildNodes();
    childNodes = childNodes.map(_unwrapComp).filter(Boolean);
    return childNodes
  }

  getChildren () {
    if (!this.el) return []
    let children = this.el.getChildren();
    children = children.map(_unwrapComp).filter(Boolean);
    return children
  }

  getChildAt (pos) {
    const child = this.el.getChildAt(pos);
    if (child) {
      return _unwrapCompStrict(child)
    }
  }

  find (cssSelector) {
    const el = this.el.find(cssSelector);
    return _unwrapComp(el)
  }

  findAll (cssSelector) {
    const els = this.el.findAll(cssSelector);
    return els.map(_unwrapComp).filter(Boolean)
  }

  appendChild (child) {
    this.insertAt(this.getChildCount(), child);
  }

  insertAt (pos, childEl) {
    if (isString(childEl)) {
      childEl = new VirtualElement.TextNode(childEl);
    }
    if (!childEl._isVirtualElement) {
      throw new Error('Invalid argument: "child" must be a VirtualElement.')
    }
    const child = this.renderingEngine._renderChild(this, childEl);
    this.el.insertAt(pos, child.el);
    _mountChild(this, child);
  }

  removeAt (pos) {
    const childEl = this.el.getChildAt(pos);
    if (childEl) {
      const child = _unwrapCompStrict(childEl);
      _disposeChild(child);
      this.el.removeAt(pos);
    }
  }

  removeChild (child) {
    if (!child || !child._isComponent) {
      throw new Error('removeChild(): Illegal arguments. Expecting a Component instance.')
    }
    // TODO: remove ref from owner
    _disposeChild(child);
    this.el.removeChild(child.el);
  }

  replaceChild (oldChild, newVirtualChild) {
    if (!oldChild || !oldChild._isComponent) {
      throw new Error('replaceChild(): oldChild must be a child component.')
    }
    if (!newVirtualChild || !newVirtualChild._isVirtualElement || newVirtualChild._owner._comp !== this) {
      throw new Error('replaceChild(): newVirtualChild must be a VirtualElement instance created with a rendering context for this component.')
    }
    const newChild = this.renderingEngine._renderChild(this, newVirtualChild);
    // Attention: Node.replaceChild has weird semantics
    _disposeChild(oldChild);
    this.el.replaceChild(oldChild.el, newChild.el);
    if (this.isMounted()) {
      newChild.triggerDidMount();
    }
  }

  // ATTENTION: we had problems here, that using
  // component.el.empty() instead of component.empty()
  // did cause the children not to dispose(), which is maybe
  // impossible to achieve.
  // TODO: Thus we may consider to rename it, or take
  // other measure to warn the the user about this problem
  empty () {
    this._clear();
    return this
  }

  _clear () {
    const el = this.el;
    if (el) {
      this.getChildNodes().forEach(function (child) {
        _disposeChild(child);
      });
      el.empty();
    }
    this.refs = {};
    this.__foreignRefs__ = {};
  }

  remove () {
    _disposeChild(this);
    this.el.remove();
  }

  addEventListener () {
    throw new Error('Not supported.')
  }

  removeEventListener () {
    throw new Error('Not supported.')
  }

  insertBefore () {
    throw new Error('Not supported.')
  }

  click () {
    if (this.el) {
      // Note: returning the result of DOMElement.click() which allows to detect if the click() had errors
      // In the Browser a click runs in kind of a sandbox, not throwing on the callee side.
      return this.el.click()
    }
    return false
  }

  getComponentPath () {
    const path = [];
    let comp = this;
    while (comp) {
      path.unshift(comp);
      comp = comp.getParent();
    }
    return path
  }

  _getContext () {
    let context = {};
    const parent = this.getParent();
    if (parent) {
      context = extend(context, parent.context);
      if (parent.getChildContext) {
        return extend(context, parent.getChildContext())
      }
    }
    return context
  }

  get _isComponent () { return true }

  // Delegators

  attr () {
    return DOMElement.prototype.attr.apply(this, arguments)
  }

  htmlProp () {
    return DOMElement.prototype.htmlProp.apply(this, arguments)
  }

  val () {
    return DOMElement.prototype.val.apply(this, arguments)
  }

  css () {
    return DOMElement.prototype.css.apply(this, arguments)
  }

  text () {
    return DOMElement.prototype.text.apply(this, arguments)
  }

  append () {
    return DOMElement.prototype.append.apply(this, arguments)
  }

  static unwrap () {
    return _unwrapComp.apply(this, arguments)
  }

  static render (props) {
    props = props || {};
    const ComponentClass = this;
    const comp = new ComponentClass(null, props);
    comp._render();
    return comp
  }

  static mount (props, el, options = {}) {
    if (arguments.length === 1) {
      el = props;
      props = {};
    }
    if (!el) throw new Error("'el' is required.")
    if (isString(el)) {
      const selector = el;
      if (platform.inBrowser) {
        el = window.document.querySelector(selector);
      } else {
        throw new Error('This selector is not supported on server side.')
      }
    }
    el = DefaultDOMElement.wrap(el);
    const ComponentClass = this;
    const comp = new ComponentClass(null, props, options);
    comp.mount(el, options);
    return comp
  }

  static getComponentForDOMElement (el) {
    return _unwrapComp(el)
  }

  static unwrapDOMElement (el) {
    console.warn('DEPRECATED: Use Component.getComponentForDOMElement');
    return Component.getComponentForDOMElement(el)
  }

  static getComponentFromNativeElement (nativeEl) {
    // while it sounds strange to wrap a native element
    // first, it makes sense after all, as DefaultDOMElement.wrap()
    // provides the DOMElement instance of a previously wrapped native element.
    return _unwrapComp(DefaultDOMElement.wrap(nativeEl))
  }

  static createRenderingEngine (elementFactory) {
    return new RenderingEngine({
      componentFactory: COMPONENT_FACTORY,
      elementFactory
    })
  }

  /**
   * Turns a given function into a component.
   *
   * Similar to react's concept of a Function Component,
   * but mainly just for convenience.
   * The given function is wrapped into an Anonymous Component class,
   * which is just a regular component.
   * However, it is not possible to access the component instance
   * as the function is not bound to the component.
   *
   * @param {function} func
   */
  static createFunctionComponent (func) {
    // using a cached class so that we can check of equality
    let ComponentClass = func._ComponentClass;
    if (!ComponentClass) {
      // if the given argument is actually a Class Component then just return that
      if (func.prototype && func.prototype._isComponent) {
        return func
      }
      ComponentClass = class FunctionComponent extends Component {
        render ($$) {
          return func(this.props, $$)
        }
      };
      ComponentClass.displayName = func.name || uuid('FunctionComponent@');
      // caching the generated class so we can later check for equality
      func._ComponentClass = ComponentClass;
      func._isFunctionComponent = true;
    }
    return ComponentClass
  }

  // TODO: try to get rid of this. If realy used extract into extra files
  static get Element () { return ElementComponent }
  static get TextNode () { return TextNodeComponent }
}

// NOTE: this is used for incremental updates only
function _disposeChild (child) {
  child.triggerDispose();
  if (child._owner && child._ref) {
    console.assert(child._owner.refs[child._ref] === child, "Owner's ref should point to this child instance.");
    delete child._owner.refs[child._ref];
  }
}

// NOTE: this is used for incremental updates only
function _mountChild (parent, child) {
  if (parent.isMounted()) {
    child.triggerDidMount();
  }
  if (child._owner && child._ref) {
    child._owner.refs[child._ref] = child;
  }
}

// NOTE: we keep a reference to the component in all DOMElement instances
function _unwrapComp (el) {
  if (el) {
    if (!el._isDOMElement) el = DefaultDOMElement.unwrap(el);
    if (el) return el._comp
  }
}

function _unwrapCompStrict (el) {
  const comp = _unwrapComp(el);
  if (!comp) throw new Error('Expecting a back-link to the component instance.')
  return comp
}

class ElementComponent extends Component {
  get _isElementComponent () { return true }
  get _SKIP_COMPONENT_INIT () { return true }
}

class TextNodeComponent extends Component {
  setTextContent (text) {
    if (!this.el) {
      throw new Error('Component must be rendered first.')
    }
    if (this.el.textContent !== text) {
      this.el.textContent = text;
    }
  }

  getChildNodes () {
    return []
  }

  getChildren () {
    return []
  }

  get _isTextNodeComponent () { return true }
  get _SKIP_COMPONENT_INIT () { return true }
}

function _isTextNodeEmpty$1 (el) {
  return Boolean(/^\s*$/.exec(el.textContent))
}

function prettyPrintXML (xml) {
  let dom;
  if (isString(xml)) {
    dom = DefaultDOMElement.parseXML(xml);
  } else {
    dom = xml;
  }
  const result = [];
  // Note: the browser treats XML instructions in a surprising way:
  // parsing `<?xml version="1.0" encoding="UTF-8"?><dummy/>` results in only one element
  // i.e. the instruction is swallowed and stored in a way that it is created during serialization.
  // Interestingly, this is not the case for the DOCTYPE declaration.
  // ATTENTION: we have assimilated the MemoryDOM implementation, so that we get the same result.
  if (dom.isDocumentNode()) {
    const childNodes = dom.getChildNodes();
    const xml = dom.empty().serialize();
    if (/<\?\s*xml/.exec(xml)) {
      result.push(xml);
    }
    childNodes.forEach(el => {
      _prettyPrint(result, el, 0);
    });
  } else {
    _prettyPrint(result, dom, 0);
  }
  return result.join('\n')
}

function _prettyPrint (result, el, level) {
  const indent = new Array(level * 2).fill(' ').join('');
  if (el.isElementNode()) {
    const isMixed = _isMixed$1(el);
    const containsCDATA = _containsCDATA(el);
    if (isMixed || containsCDATA) {
      result.push(indent + el.outerHTML);
    } else {
      const children = el.children;
      const tagName = el.tagName;
      const tagStr = [`<${tagName}`];
      el.getAttributes().forEach((val, name) => {
        tagStr.push(`${name}="${val}"`);
      });
      if (children.length > 0) {
        result.push(indent + tagStr.join(' ') + '>');
        el.children.forEach((child) => {
          _prettyPrint(result, child, level + 1);
        });
        result.push(indent + `</${tagName}>`);
      } else {
        result.push(indent + tagStr.join(' ') + ' />');
      }
    }
  } else if (level === 0 && el.isTextNode()) ; else {
    result.push(indent + el.outerHTML);
  }
}

function _isMixed$1 (el) {
  const childNodes = el.childNodes;
  for (let i = 0; i < childNodes.length; i++) {
    const child = childNodes[i];
    if (child.isTextNode() && !_isTextNodeEmpty$1(child)) {
      return true
    }
  }
}

function _containsCDATA (el) {
  const childNodes = el.childNodes;
  for (let i = 0; i < childNodes.length; i++) {
    const child = childNodes[i];
    if (child.getNodeType() === 'cdata') {
      return true
    }
  }
}

// expose the static factory for virtual elements
// used in render methods
const $$ = RenderingEngine.createVirtualElement;

function getKeyForPath (path) {
  if (path._key === undefined) {
    Object.defineProperty(path, '_key', {
      value: path.join('.'),
      writable: false,
      enumerable: false
    });
  }
  return path._key
}

function cloneDeep (val) {
  return cloneDeepWith(val, value => {
    if (platform.inBrowser && value instanceof window.File) {
      return value
    }
  })
}

function createCountingIdGenerator () {
  var counters = {};
  return function uuid (prefix) {
    if (!hasOwnProperty(counters, prefix)) {
      counters[prefix] = 1;
    }
    var result = [prefix, '-', counters[prefix]++].join('');
    return result
  }
}

/*
  Escape XML Entities

  HACK: this is just a cheap implementation to escape XML entities
*/
function encodeXMLEntities (str) {
  return String(str)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
}

// just as a reference to detect name collisions
// with native Object properties
const PLAINOBJ = {};

/*
 * Simple registry implementation.
 */
class DeprecatedRegistry {
  constructor (entries, validator) {
    this.entries = {};
    this.names = [];
    this.validator = validator;

    if (entries) {
      forEach(entries, function (entry, name) {
        this.add(name, entry);
      }.bind(this));
    }
  }

  /**
   * Check if an entry is registered for a given name.
   *
   * @param {String} name
   * @method contains
   * @memberof module:Basics.Registry.prototype
   */
  contains (name) {
    return hasOwnProperty(this.entries, name)
  }

  /**
   * Add an entry to the registry.
   *
   * @param {String} name
   * @param {Object} entry
   * @method add
   * @memberof module:Basics.Registry.prototype
   */
  add (name, entry) {
    if (this.validator) {
      this.validator(entry);
    }
    if (PLAINOBJ[name]) {
      throw new Error('Illegal key: "' + name + '" is a property of Object which is thus not allowed as a key.')
    }
    if (this.contains(name)) {
      this.remove(name);
    }
    this.entries[name] = entry;
    this.names.push(name);
  }

  /**
   * Remove an entry from the registry.
   *
   * @param {String} name
   * @method remove
   * @memberof module:Basics.Registry.prototype
   */
  remove (name) {
    const pos = this.names.indexOf(name);
    if (pos >= 0) {
      this.names.splice(pos, 1);
    }
    delete this.entries[name];
  }

  /**
   * @method clear
   * @memberof module:Basics.Registry.prototype
   */
  clear () {
    this.names = [];
    this.entries = {};
  }

  /**
   * Get the entry registered for a given name.
   *
   * @param {String} name
   * @return The registered entry
   * @method get
   * @memberof module:Basics.Registry.prototype
   */
  get (name, strict) {
    const result = this.entries[name];
    if (strict && !result) {
      throw new Error('No entry registered for name ' + name)
    }
    return result
  }

  /*
    Iterate all registered entries in the order they were registered.

    @param {Function} callback with signature function(entry, name)
   */
  forEach (callback) {
    for (let i = 0; i < this.names.length; i++) {
      const name = this.names[i];
      const _continue = callback(this.entries[name], name);
      if (_continue === false) {
        break
      }
    }
  }

  map (callback) {
    const result = [];
    this.forEach((entry, name) => {
      result.push(callback(entry, name));
    });
    return result
  }

  filter (callback) {
    const result = [];
    this.forEach(function (entry, name) {
      if (callback(entry, name)) {
        result.push(entry);
      }
    });
    return result
  }

  values () {
    return this.filter(() => { return true })
  }

  get _isRegistry () { return true }
}

function filter (iteratee, fn) {
  if (!iteratee) return []
  if (iteratee.constructor.prototype.filter && isFunction(iteratee.constructor.prototype.filter)) {
    return iteratee.filter(fn)
  }
  const result = [];
  forEach(iteratee, (val, key) => {
    if (fn(val, key)) {
      result.push(val);
    }
  });
  return result
}

function isArrayEqual (arr1, arr2) {
  if (arr1 === arr2) return true
  if (!isArray(arr1) || !isArray(arr2)) return false
  if (arr1.length !== arr2.length) return false
  const L = arr1.length;
  for (var i = 0; i < L; i++) {
    if (arr1[i] !== arr2[i]) return false
  }
  return true
}

function isEqual (a, b) {
  if (a === b) return true
  if (!a || !b) return false
  if (!a.constructor || !b.constructor) return false
  if (isArray(a) && isArray(b)) {
    if (a.length !== b.length) return false
    for (let i = 0; i < a.length; i++) {
      if (!isEqual(a[i], b[i])) return false
    }
    return true
  }
  if (isPlainObject(a) && isPlainObject(b)) {
    const akeys = Object.keys(a).sort();
    const bkeys = Object.keys(b).sort();
    if (!isEqual(akeys, bkeys)) return false
    for (let i = 0; i < akeys.length; i++) {
      const key = akeys[i];
      if (!isEqual(a[key], b[key])) return false
    }
    return true
  }
  // at last try loose equality check
  return a == b // eslint-disable-line
}

/* eslint-disable strict */
const keys$1 = {
  UNDEFINED: 0,
  BACKSPACE: 8,
  DELETE: 46,
  INSERT: 45,
  LEFT: 37,
  RIGHT: 39,
  UP: 38,
  DOWN: 40,
  ENTER: 13,
  RETURN: 13,
  END: 35,
  HOME: 36,
  TAB: 9,
  PAGEUP: 33,
  PAGEDOWN: 34,
  ESCAPE: 27,
  ESC: 27,
  SHIFT: 16,
  SPACE: 32,
  PLUS: 171,
  VOLUMEUP: 183,
  VOLUMEDOWN: 182,
  VOLUMEMUTE: 181,
  PRINTSCREEN: 44
};

// Handle F1 to F24 keys
for (let i = 1; i <= 24; i++) {
  keys$1['F' + i] = 111 + i;
}

/**
 * Parses a key-combo such as 'CommandOrControl+Enter' and turns it into a
 * record equivalent to a DOM KeyboardEvent.
 *
 * @param {string} combo a key-combo such as 'CommandOrControl+Enter'
 */
function parseKeyCombo (combo) {
  const frags = combo.split('+');
  const keyEvent = {
    keyCode: -1
  };
  for (var i = 0; i < frags.length; i++) {
    const frag = frags[i].toUpperCase();
    switch (frag) {
      case 'ALT': {
        keyEvent.altKey = true;
        break
      }
      case 'ALTGR': {
        keyEvent.altKey = true;
        keyEvent.code = 'AltRight';
        break
      }
      case 'CMD': {
        keyEvent.metaKey = true;
        break
      }
      case 'CTRL': {
        keyEvent.ctrlKey = true;
        break
      }
      case 'COMMANDORCONTROL': {
        if (platform.isMac) {
          keyEvent.metaKey = true;
        } else {
          keyEvent.ctrlKey = true;
        }
        break
      }
      case 'MEDIANEXTTRACK': {
        keyEvent.code = 'MediaTrackNext';
        break
      }
      case 'MEDIAPLAYPAUSE': {
        keyEvent.code = 'MediaPlayPause';
        break
      }
      case 'MEDIAPREVIOUSTRACK': {
        keyEvent.code = 'MediaPreviousTrack';
        break
      }
      case 'MEDIASTOP': {
        keyEvent.code = 'MediaStop';
        break
      }
      case 'SHIFT': {
        keyEvent.shiftKey = true;
        break
      }
      case 'SUPER': {
        keyEvent.metaKey = true;
        break
      }
      default:
        if (frag.length === 1) {
          keyEvent.keyCode = frag.charCodeAt(0);
        } else if (hasOwnProperty(keys$1, frag)) {
          keyEvent.keyCode = keys$1[frag];
        } else {
          throw new Error('Unsupported keyboard command: ' + combo)
        }
    }
  }
  return keyEvent
}

/**
 * Generates a normalized key from a records similar to a DOM KeyboardEvent.
 *
 * @param {object} event
 * @param {boolean} onlyModifiers
 */
function parseKeyEvent (event, onlyModifiers) {
  const frags = [];
  if (event.altKey) {
    if (event.code === 'AltRight') {
      frags.push('ALTGR');
    } else {
      frags.push('ALT');
    }
  }
  if (event.ctrlKey) frags.push('CTRL');
  if (event.metaKey) frags.push('META');
  if (event.shiftKey) frags.push('SHIFT');
  if (!onlyModifiers) {
    frags.push(event.keyCode);
  }
  return frags.join('+')
}

/*
  An object that can be access via path API.

  @example

  var obj = new PathObject({a: "aVal", b: {b1: 'b1Val', b2: 'b2Val'}})
*/

class PathObject {
  /*
    @param {object} [root] An object to operate on
  */
  constructor (root) {
    if (root) {
      this.__root__ = root;
    }
  }

  contains (id) {
    return Boolean(this.getRoot()[id])
  }

  getRoot () {
    if (this.__root__) {
      return this.__root__
    } else {
      return this
    }
  }

  /**
    Get value at path

    @return {object} The value stored for a given path

    @example

    obj.get(['b', 'b1'])
    => b1Val
  */
  get (path) {
    if (!path) {
      return undefined
    }
    if (isString(path)) {
      const id = path;
      return this.getRoot()[id]
    }
    if (arguments.length > 1) {
      path = Array.prototype.slice(arguments, 0);
    }
    if (!isArray(path)) {
      throw new Error('Illegal argument for PathObject.get()')
    }
    return get(this.getRoot(), path)
  }

  set (path, value) {
    if (!path) {
      throw new Error('Illegal argument: PathObject.set(>path<, value) - path is mandatory.')
    }
    if (isString(path)) {
      const id = path;
      this.getRoot()[id] = value;
    } else {
      setWith(this.getRoot(), path, value);
    }
  }

  delete (path) {
    if (isString(path)) {
      const id = path;
      delete this.getRoot()[id];
    } else if (path.length === 1) {
      delete this.getRoot()[path[0]];
    } else {
      var success = unset(this.getRoot(), path);
      if (!success) {
        throw new Error('Could not delete property at path' + path)
      }
    }
  }

  clear () {
    var root = this.getRoot();
    for (var key in root) {
      if (hasOwnProperty(root, key)) {
        delete root[key];
      }
    }
  }
}

PathObject.prototype._isPathObject = true;

function renderListNode (listNode, $$) {
  const items = listNode.getItems();
  const stack = [$$(_getTagName(1))];
  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    // ATTENTION: levels are one-based, i.e. start counting with 1 instead of 0
    const level = item.getLevel();
    if (level < stack.length) {
      for (let j = stack.length; j > level; j--) {
        stack.pop();
      }
    } else if (level > stack.length) {
      for (let j = stack.length; j < level; j++) {
        const list = stack[j - 1];
        const childCount = list.getChildCount();
        let item;
        if (childCount === 0) {
          item = $$('li');
          list.append(item);
        } else {
          item = list.getChildAt(childCount - 1);
        }
        const sublist = $$(_getTagName(j + 1));
        item.append(sublist);
        stack.push(sublist);
      }
    }
    console.assert(level === stack.length, 'item.level should now be the same as stack.length');
    // appending to the current level
    last(stack).append(
      $$(item)
    );
  }
  for (let j = stack.length; j > 1; j--) {
    stack.pop();
  }

  return stack[0]

  function _getTagName (level) {
    const listType = listNode.getListType(level);
    return listType === 'order' ? 'ol' : 'ul'
  }
}

function startsWith (str, prefix) {
  if (!isString(str)) return false
  if (str.startsWith) return str.startsWith(prefix)
  if (!isString(prefix)) prefix = String(prefix);
  return str.slice(0, prefix.length) === prefix
}

class TreeNode {}

/*
 * A tree-structure for indexes.
 */
class TreeIndex {
  /**
   * Get value at path.
   *
   * @return {object} The value stored for a given path
   *
   * @example
   *
   * obj.get(['b', 'b1']);
   * => b1Val
   */
  get (path) {
    if (arguments.length > 1) {
      path = Array.prototype.slice(arguments, 0);
    }
    path = _pathify(path);
    return get(this, path)
  }

  getAll (path) {
    if (arguments.length > 1) {
      path = Array.prototype.slice(arguments, 0);
    }
    path = _pathify(path);
    if (!isArray(path)) {
      throw new Error('Illegal argument for TreeIndex.get()')
    }
    const node = get(this, path);
    return this._collectValues(node)
  }

  set (path, value) {
    path = _pathify(path);
    setWith(this, path, value, function (val) {
      if (!val) return new TreeNode()
    });
  }

  delete (path) {
    path = _pathify(path);
    if (path.length === 1) {
      delete this[path[0]];
    } else {
      const key = path[path.length - 1];
      path = path.slice(0, -1);
      const parent = get(this, path);
      if (parent) {
        delete parent[key];
      }
    }
  }

  clear () {
    const root = this;
    for (const key in root) {
      if (hasOwnProperty(root, key)) {
        delete root[key];
      }
    }
  }

  traverse (fn) {
    this._traverse(this, [], fn);
  }

  forEach (...args) {
    this.traverse(...args);
  }

  _traverse (root, path, fn) {
    let id;
    for (id in root) {
      if (!hasOwnProperty(root, id)) continue
      const child = root[id];
      const childPath = path.concat([id]);
      if (child instanceof TreeNode) {
        this._traverse(child, childPath, fn);
      } else {
        fn(child, childPath);
      }
    }
  }

  _collectValues (root) {
    // TODO: don't know if this is the best solution
    // We use this only for indexes, e.g., to get all annotation on one node
    const vals = {};
    this._traverse(root, [], function (val, path) {
      const key = path[path.length - 1];
      vals[key] = val;
    });
    return vals
  }
}

function _pathify (path) {
  if (isString(path)) {
    return [path]
  } else {
    return path
  }
}

class TreeIndexArrays extends TreeIndex {
  contains (path) {
    const val = super.get(path);
    return Boolean(val)
  }

  get (path) {
    let val = super.get(path);
    if (val instanceof TreeNode) {
      val = val.__values__ || [];
    }
    return val
  }

  set (path, arr) {
    const val = super.get(path);
    val.__values__ = arr;
  }

  add (path, value) {
    path = _pathify(path);
    if (!isArray(path)) {
      throw new Error('Illegal arguments.')
    }
    let arr;

    // We are using setWith, as it allows us to create nodes on the way down
    // setWith can be controlled via a hook called for each key in the path
    // If val is not defined, a new node must be created and returned.
    // If val is defined, then we must return undefined to keep the original tree node
    // __dummy__ is necessary as setWith is used to set a value, but we want
    // to append to the array
    setWith(this, path.concat(['__values__', '__dummy__']), undefined, function (val, key) {
      if (key === '__values__') {
        if (!val) val = [];
        arr = val;
      } else if (!val) {
        val = new TreeNode();
      }
      return val
    });
    delete arr.__dummy__;
    arr.push(value);
  }

  remove (path, value) {
    const arr = get(this, path);
    if (arr instanceof TreeNode) {
      if (arguments.length === 1) {
        delete arr.__values__;
      } else {
        deleteFromArray(arr.__values__, value);
      }
    }
  }

  _collectValues (root) {
    let vals = [];
    this._traverse(root, [], function (val) {
      vals.push(val);
    });
    vals = Array.prototype.concat.apply([], vals);
    return vals
  }
}

TreeIndex.Arrays = TreeIndexArrays;

function getDOMRangeFromEvent (evt) {
  let range;
  const x = evt.clientX;
  const y = evt.clientY;
  // Try the simple IE way first
  if (document.body.createTextRange) {
    range = document.body.createTextRange();
    range.moveToPoint(x, y);
  } else if (!isNil(document.createRange)) {
    // Try Mozilla's rangeOffset and rangeParent properties,
    // which are exactly what we want
    if (!isNil(evt.rangeParent)) {
      range = document.createRange();
      range.setStart(evt.rangeParent, evt.rangeOffset);
      range.collapse(true);
    // Try the standards-based way next
    } else if (document.caretPositionFromPoint) {
      const pos = document.caretPositionFromPoint(x, y);
      range = document.createRange();
      range.setStart(pos.offsetNode, pos.offset);
      range.collapse(true);
    // Try the standards-based way next
    } else if (document.caretRangeFromPoint) {
      range = document.caretRangeFromPoint(x, y);
    }
  }
  return range
}

function getRelativeRect (parentRect, childRect) {
  var left = childRect.left - parentRect.left;
  var top = childRect.top - parentRect.top;
  return {
    left: left,
    top: top,
    right: parentRect.width - left - childRect.width,
    bottom: parentRect.height - top - childRect.height,
    width: childRect.width,
    height: childRect.height
  }
}

/*
  Get selection rectangle relative to panel content element
*/
function getSelectionRect (parentRect) {
  if (platform.inBrowser) {
    const wsel = window.getSelection();
    if (wsel.rangeCount === 0) return
    const wrange = wsel.getRangeAt(0);
    const contentRect = parentRect;
    let selectionRect = wrange.getBoundingClientRect();

    if (selectionRect.top === 0 && selectionRect.bottom === 0) {
      const fixed = _fixCorruptDOMSelection(wsel);
      if (fixed) selectionRect = fixed;
    }
    return getRelativeRect(contentRect, selectionRect)
  }
}

/*
  If this gets called too without having rendered the DOM selection properly
  it often does not have a valid bounding rectangle.
  If you see this called you probably should fix your application implementation.
  Very likely you did not call Surface.rerenderDOMSelection() before trying to
  use the DOM selection, e.g. for positioning an overlay.
*/
function _fixCorruptDOMSelection (wsel, wrange) {
  const anchorNode = wsel.anchorNode;
  if (!anchorNode || !anchorNode.getBoundingClientRect) return
  const rect = anchorNode.getBoundingClientRect();
  return {
    left: rect.left,
    top: rect.top,
    width: 0,
    height: rect.height,
    right: rect.width,
    bottom: rect.bottom
  }
}

/**
  Get the value of a querystring parameter
  @param  {String} param The field to get the value of
  @param  {String} url   The URL to get the value from (optional)
  @return {String}       The param value
 */
function getQueryStringParam (param, url) {
  if (typeof window === 'undefined') return null
  const href = url || window.location.href;
  const reg = new RegExp('[?&]' + param + '=([^&#]*)', 'i');
  const string = reg.exec(href);
  return string ? decodeURIComponent(string[1]) : null
}

const IMPL = Symbol('__AppStateImpl__');

class AbstractAppState {
  constructor (...args) {
    this[IMPL] = new AppStateImpl();
    // console.log('Created AppState', this.getId())

    this._initialize(...args);
    this._reset();
  }

  _initialize () {
    // nothing to initialize on this level
  }

  dispose () {}

  isDirty (name) {
    return this._getImpl().isDirty(name)
  }

  _get (name) {
    return this._getImpl().get(name)
  }

  _set (name, value) {
    const impl = this._getImpl();
    const oldVal = impl.get(name);
    let hasChanged;
    if (isObject(value)) {
      hasChanged = true;
    } else {
      hasChanged = oldVal !== value;
    }
    if (hasChanged) {
      impl.set(name, value);
      impl.setDirty(name);
    }
  }

  getUpdate (name) {
    return this._getImpl().getUpdate(name)
  }

  addObserver (deps, handler, observer, options = {}) { // eslint-disable-line no-unused-vars
    throw new Error('This method is abstract.')
  }

  removeObserver (observer) { // eslint-disable-line no-unused-vars
    throw new Error('This method is abstract.')
  }

  off (observer) {
    this.removeObserver(observer);
  }

  propagateUpdates () {
    throw new Error('This method is abstract.')
  }

  _getImpl () {
    return this[IMPL]
  }

  _addProperty (name, initialValue) {
    const impl = this._getImpl();
    if (impl.has(name)) {
      throw new Error(`State variable '${name}' is already declared.`)
    }
    impl.set(name, initialValue);
    // TODO: don't know if that will be working with mangling
    // IMO the code using the prop will be mangled
    // but not this definition
    Object.defineProperty(this, name, {
      configurable: false,
      enumerable: false,
      get: () => { return this._get(name) },
      set: (value) => { this._set(name, value); }
    });
  }

  // TODO: we should not need this on the long run
  // for now we use it to allow some hackz
  _setDirty (name) {
    this._getImpl().setDirty(name);
  }

  _setUpdate (name, update) {
    const impl = this._getImpl();
    impl.setUpdate(name, update);
    impl.setDirty(name);
  }

  _reset () {
    this._getImpl().reset();
  }
}

class AppStateImpl {
  constructor () {
    this.id = uuid();
    this.values = new Map();
    this.dirty = new Set();
    this.updates = new Map();
  }

  get (name) {
    return this.values.get(name)
  }

  set (name, newValue) {
    this.values.set(name, newValue);
  }

  has (name) {
    return this.values.has(name)
  }

  setDirty (name) {
    this.dirty.add(name);
  }

  isDirty (name) {
    return this.dirty.has(name)
  }

  getUpdate (name) {
    return this.updates.get(name)
  }

  setUpdate (name, update) {
    this.updates.set(name, update);
  }

  reset () {
    this.dirty.clear();
    this.updates.clear();
  }
}

class Conflict extends Error {
  constructor (a, b) {
    super('Conflict: ' + JSON.stringify(a) + ' vs ' + JSON.stringify(b));
    this.a = a;
    this.b = b;
  }
}

const INSERT = 'insert';
const DELETE = 'delete';

class TextOperation {
  constructor (data) {
    if (!data || data.type === undefined || data.pos === undefined || data.str === undefined) {
      throw new Error('Illegal argument: insufficient data.')
    }
    // 'insert' or 'delete'
    this.type = data.type;
    // the position where to apply the operation
    this.pos = data.pos;
    // the string to delete or insert
    this.str = data.str;
    // sanity checks
    if (!this.isInsert() && !this.isDelete()) {
      throw new Error('Illegal type.')
    }
    if (!isString(this.str)) {
      throw new Error('Illegal argument: expecting string.')
    }
    if (!isNumber(this.pos) || this.pos < 0) {
      throw new Error('Illegal argument: expecting positive number as pos.')
    }
  }

  apply (str) {
    if (this.isEmpty()) return str
    if (this.type === INSERT) {
      if (str.length < this.pos) {
        throw new Error('Provided string is too short.')
      }
      if (str.splice) {
        return str.splice(this.pos, 0, this.str)
      } else {
        return str.slice(0, this.pos).concat(this.str).concat(str.slice(this.pos))
      }
    } else /* if (this.type === DELETE) */ {
      if (str.length < this.pos + this.str.length) {
        throw new Error('Provided string is too short.')
      }
      if (str.splice) {
        return str.splice(this.pos, this.str.length)
      } else {
        return str.slice(0, this.pos).concat(str.slice(this.pos + this.str.length))
      }
    }
  }

  clone () {
    return new TextOperation(this)
  }

  isNOP () {
    return this.type === 'NOP' || this.str.length === 0
  }

  isInsert () {
    return this.type === INSERT
  }

  isDelete () {
    return this.type === DELETE
  }

  getLength () {
    return this.str.length
  }

  invert () {
    var data = {
      type: this.isInsert() ? DELETE : INSERT,
      pos: this.pos,
      str: this.str
    };
    return new TextOperation(data)
  }

  hasConflict (other) {
    return _hasConflict(this, other)
  }

  isEmpty () {
    return this.str.length === 0
  }

  toJSON () {
    return {
      type: this.type,
      pos: this.pos,
      str: this.str
    }
  }

  toString () {
    return ['(', (this.isInsert() ? INSERT : DELETE), ',', this.pos, ",'", this.str, "')"].join('')
  }

  // TODO: do we need this anymore?
  get _isOperation () { return true }
  get _isTextOperation () { return true }

  static transform (a, b, options) {
    return transform(a, b, options)
  }

  static hasConflict (a, b) {
    return _hasConflict(a, b)
  }

  // Factories

  static Insert (pos, str) {
    return new TextOperation({ type: INSERT, pos: pos, str: str })
  }

  static Delete (pos, str) {
    return new TextOperation({ type: DELETE, pos: pos, str: str })
  }

  static fromJSON (data) {
    return new TextOperation(data)
  }

  // Symbols
  // TODO: probably just export the symbols
  static get INSERT () { return INSERT }
  static get DELETE () { return DELETE }
}

function _hasConflict (a, b) {
  // Insert vs Insert:
  //
  // Insertions are conflicting iff their insert position is the same.
  if (a.type === INSERT && b.type === INSERT) return (a.pos === b.pos)
  // Delete vs Delete:
  //
  // Deletions are conflicting if their ranges overlap.
  if (a.type === DELETE && b.type === DELETE) {
    // to have no conflict, either `a` should be after `b` or `b` after `a`, otherwise.
    return !(a.pos >= b.pos + b.str.length || b.pos >= a.pos + a.str.length)
  }
  // Delete vs Insert:
  //
  // A deletion and an insertion are conflicting if the insert position is within the deleted range.
  var del, ins;
  if (a.type === DELETE) {
    del = a; ins = b;
  } else {
    del = b; ins = a;
  }
  return (ins.pos >= del.pos && ins.pos < del.pos + del.str.length)
}

// Transforms two Insertions
// --------

function transformInsertInsert (a, b) {
  if (a.pos === b.pos) {
    b.pos += a.str.length;
  } else if (a.pos < b.pos) {
    b.pos += a.str.length;
  } else {
    a.pos += b.str.length;
  }
}

// Transform two Deletions
// --------
//

function transformDeleteDelete (a, b, first) {
  // reduce to a normalized case
  if (a.pos > b.pos) {
    return transformDeleteDelete(b, a)
  }
  if (a.pos === b.pos && a.str.length > b.str.length) {
    return transformDeleteDelete(b, a)
  }
  // take out overlapping parts
  if (b.pos < a.pos + a.str.length) {
    var s = b.pos - a.pos;
    var s1 = a.str.length - s;
    var s2 = s + b.str.length;
    a.str = a.str.slice(0, s) + a.str.slice(s2);
    b.str = b.str.slice(s1);
    b.pos -= s;
  } else {
    b.pos -= a.str.length;
  }
}

// Transform Insert and Deletion
// --------
//

function transformInsertDelete (a, b) {
  if (a.type === DELETE) {
    return transformInsertDelete(b, a)
  }
  // we can assume, that a is an insertion and b is a deletion
  // a is before b
  if (a.pos <= b.pos) {
    b.pos += a.str.length;
  // a is after b
  } else if (a.pos >= b.pos + b.str.length) {
    a.pos -= b.str.length;
  // Note: this is a conflict case the user should be noticed about
  // If applied still, the deletion takes precedence
  // a.pos > b.pos && <= b.pos + b.length
  } else {
    var s = a.pos - b.pos;
    b.str = b.str.slice(0, s) + a.str + b.str.slice(s);
    a.str = '';
  }
}

function transform (a, b, options) {
  options = options || {};
  if (options['no-conflict'] && _hasConflict(a, b)) {
    throw new Conflict(a, b)
  }
  if (a.type === INSERT && b.type === INSERT) {
    transformInsertInsert(a, b);
  } else if (a.type === DELETE && b.type === DELETE) {
    transformDeleteDelete(a, b);
  } else {
    transformInsertDelete(a, b);
  }
  return [a, b]
}

const NOP = 'NOP';
const DELETE$1 = 'delete';
const INSERT$1 = 'insert';

class ArrayOperation {
  constructor (data) {
    if (!data || !data.type) {
      throw new Error('Illegal argument: insufficient data.')
    }
    this.type = data.type;
    if (this.type === NOP) return

    if (this.type !== INSERT$1 && this.type !== DELETE$1) {
      throw new Error('Illegal type.')
    }
    // the position where to apply the operation
    this.pos = data.pos;
    // the value to insert or delete
    this.val = data.val;
    if (!isNumber(this.pos) || this.pos < 0) {
      throw new Error('Illegal argument: expecting positive number as pos.')
    }
  }

  apply (array) {
    if (this.type === NOP) {
      return array
    }
    if (this.type === INSERT$1) {
      if (array.length < this.pos) {
        throw new Error('Provided array is too small.')
      }
      array.splice(this.pos, 0, this.val);
      return array
    // Delete
    } else /* if (this.type === DELETE) */ {
      if (array.length < this.pos) {
        throw new Error('Provided array is too small.')
      }
      if (!isEqual(array[this.pos], this.val)) {
        throw Error('Unexpected value at position ' + this.pos + '. Expected ' + this.val + ', found ' + array[this.pos])
      }
      array.splice(this.pos, 1);
      return array
    }
  }

  clone () {
    var data = {
      type: this.type,
      pos: this.pos,
      val: cloneDeep(this.val)
    };
    return new ArrayOperation(data)
  }

  invert () {
    var data = this.toJSON();
    if (this.type === NOP) data.type = NOP;
    else if (this.type === INSERT$1) data.type = DELETE$1;
    else /* if (this.type === DELETE) */ data.type = INSERT$1;
    return new ArrayOperation(data)
  }

  hasConflict (other) {
    return ArrayOperation.hasConflict(this, other)
  }

  toJSON () {
    var result = {
      type: this.type
    };
    if (this.type === NOP) return result
    result.pos = this.pos;
    result.val = cloneDeep(this.val);
    return result
  }

  isInsert () {
    return this.type === INSERT$1
  }

  isDelete () {
    return this.type === DELETE$1
  }

  getOffset () {
    return this.pos
  }

  getValue () {
    return this.val
  }

  isNOP () {
    return this.type === NOP
  }

  toString () {
    return ['(', (this.isInsert() ? INSERT$1 : DELETE$1), ',', this.getOffset(), ",'", this.getValue(), "')"].join('')
  }

  // TODO: find out if we really need this anymore

  get _isOperation () { return true }

  get _isArrayOperation () { return true }

  static transform (a, b, options) {
    return transform$1(a, b, options)
  }

  static hasConflict (a, b) {
    return hasConflict(a, b)
  }

  // Factories
  static Insert (pos, val) {
    return new ArrayOperation({ type: INSERT$1, pos: pos, val: val })
  }

  static Delete (pos, val) {
    return new ArrayOperation({ type: DELETE$1, pos: pos, val: val })
  }

  static Nop () {
    return new ArrayOperation({ type: NOP })
  }

  static fromJSON (data) {
    return new ArrayOperation(data)
  }

  // Symbols
  static get NOP () { return NOP }

  static get DELETE () { return DELETE$1 }

  static get INSERT () { return INSERT$1 }
}

function hasConflict (a, b) {
  if (a.type === NOP || b.type === NOP) return false
  if (a.type === INSERT$1 && b.type === INSERT$1) {
    return a.pos === b.pos
  } else {
    return false
  }
}

function transformInsertInsert$1 (a, b) {
  if (a.pos === b.pos) {
    b.pos += 1;
  // a before b
  } else if (a.pos < b.pos) {
    b.pos += 1;
  // a after b
  } else {
    a.pos += 1;
  }
}

function transformDeleteDelete$1 (a, b, options = {}) {
  // turn the second of two concurrent deletes into a NOP
  if (a.pos === b.pos) {
    // ATTENTION: don't update for rebase. If we find a delete on the same
    // index it better be for the same value
    if (a.val !== b.val) {
      console.error('FIXME: transforming array delete-delete at the same position but with different values.');
    }
    if (!options.rebase) {
      b.type = NOP;
      a.type = NOP;
    }
  } else if (a.pos < b.pos) {
    b.pos -= 1;
  } else {
    a.pos -= 1;
  }
}

function transformInsertDelete$1 (a, b, options = {}) {
  // reduce to a normalized case
  if (a.type === DELETE$1) {
    ([a, b] = [b, a]);
  }
  // HACK: trying to get rebasing working
  // TODO: we need a different strategy for this
  // the OT approach is not what need in case of 'rebasing' a list of changes
  // e.g. used in for the undo history, but also for merging changes from different sources
  if (options.rebase) {
    if (a.pos < b.pos) {
      b.pos += 1;
    } else if (a.pos > b.pos) {
      a.pos -= 1;
    }
  } else {
    if (a.pos <= b.pos) {
      b.pos += 1;
    } else {
      a.pos -= 1;
    }
  }
}

var transform$1 = function (a, b, options = {}) {
  // enable conflicts when you want to notify the user of potential problems
  // Note that even in these cases, there is a defined result.
  if (options['no-conflict'] && hasConflict(a, b)) {
    throw new Conflict(a, b)
  }
  if (a.type === NOP || b.type === NOP) ; else if (a.type === INSERT$1 && b.type === INSERT$1) {
    transformInsertInsert$1(a, b);
  } else if (a.type === DELETE$1 && b.type === DELETE$1) {
    transformDeleteDelete$1(a, b, options);
  } else {
    transformInsertDelete$1(a, b, options);
  }
  return [a, b]
};

const SHIFT = 'shift';

class CoordinateOperation {
  constructor (data) {
    if (!data || data.type === undefined) {
      throw new Error('Illegal argument: insufficient data.')
    }
    // 'shift'
    this.type = data.type;
    // the position where to apply the operation
    this.val = data.val;
    // sanity checks
    if (!this.isShift()) {
      throw new Error('Illegal type.')
    }
    if (!isNumber(this.val)) {
      throw new Error('Illegal argument: expecting number as shift value.')
    }
  }

  apply (coor) {
    coor.offset = coor.offset + this.val;
    return coor
  }

  isShift () {
    return this.type === SHIFT
  }

  isNOP () {
    switch (this.type) {
      case SHIFT: {
        return this.val === 0
      }
      default:
        return false
    }
  }

  clone () {
    return new CoordinateOperation(this)
  }

  invert () {
    let data;
    switch (this.type) {
      case SHIFT:
        data = {
          type: SHIFT,
          val: -this.val
        };
        break
      default:
        throw new Error('Invalid type.')
    }
    return new CoordinateOperation(data)
  }

  hasConflict () {
    // TODO: support conflict detection?
    return false
  }

  toJSON () {
    return {
      type: this.type,
      val: this.val
    }
  }

  toString () {
    return ['(', (this.type), ',', this.val, "')"].join('')
  }

  // TODO: do we need this anymore?
  get _isOperation () { return true }

  get _isCoordinateOperation () { return true }

  static transform (a, b, options) {
    return transform$2(a, b, options)
  }

  static fromJSON (data) {
    return new CoordinateOperation(data)
  }

  static Shift (val) {
    return new CoordinateOperation({
      type: SHIFT,
      val: val
    })
  }

  static get SHIFT () { return SHIFT }
}

function transformShiftShift (a, b, options) {
  if (options.rebase) ; else {
    a.val += b.val;
    b.val += a.val;
  }
}

function transform$2 (a, b, options = {}) {
  if (a.type === SHIFT && b.type === SHIFT) {
    transformShiftShift(a, b, options);
  } else {
    throw new Error('Illegal type')
  }
  return [a, b]
}

const NOP$1 = 'NOP';
const CREATE = 'create';
const DELETE$2 = 'delete';
const UPDATE = 'update';
const SET = 'set';

class ObjectOperation {
  constructor (data) {
    /* istanbul ignore next */
    if (!data) {
      throw new Error('Data of ObjectOperation is missing.')
    }
    /* istanbul ignore next */
    if (!data.type) {
      throw new Error('Invalid data: type is mandatory.')
    }
    this.type = data.type;
    if (data.type === NOP$1) {
      return
    }
    this.path = data.path;
    if (!data.path) {
      throw new Error('Invalid data: path is mandatory.')
    }
    if (this.type === CREATE || this.type === DELETE$2) {
      if (!data.val) {
        throw new Error('Invalid data: value is missing.')
      }
      this.val = data.val;
    } else if (this.type === UPDATE) {
      if (data.diff) {
        this.diff = data.diff;
        if (data.diff._isTextOperation) {
          this.propertyType = 'string';
        } else if (data.diff._isArrayOperation) {
          this.propertyType = 'array';
        } else if (data.diff._isCoordinateOperation) {
          this.propertyType = 'coordinate';
        } else {
          throw new Error('Invalid data: unsupported operation type for incremental update.')
        }
      } else {
        throw new Error('Invalid data: diff is mandatory for update operation.')
      }
    } else if (this.type === SET) {
      this.val = data.val;
      this.original = data.original;
    } else {
      throw new Error('Invalid type: ' + data.type)
    }
  }

  apply (obj) {
    if (this.type === NOP$1) return obj
    var adapter;
    if (obj._isPathObject) {
      adapter = obj;
    } else {
      adapter = new PathObject(obj);
    }
    if (this.type === CREATE) {
      adapter.set(this.path, cloneDeep(this.val));
      return obj
    }
    if (this.type === DELETE$2) {
      adapter.delete(this.path, 'strict');
    } else if (this.type === UPDATE) {
      var diff = this.diff;
      switch (this.propertyType) {
        case 'array': {
          const arr = adapter.get(this.path);
          diff.apply(arr);
          break
        }
        case 'string': {
          let str = adapter.get(this.path);
          if (isNil(str)) str = '';
          str = diff.apply(str);
          adapter.set(this.path, str);
          break
        }
        case 'coordinate': {
          const coor = adapter.get(this.path);
          if (!coor) throw new Error('No coordinate with path ' + this.path)
          diff.apply(coor);
          break
        }
        default:
          throw new Error('Unsupported property type for incremental update: ' + this.propertyType)
      }
    } else if (this.type === SET) {
      // clone here as the operations value must not be changed
      adapter.set(this.path, cloneDeep(this.val));
    } else {
      throw new Error('Invalid type.')
    }
    return obj
  }

  clone () {
    var data = {
      type: this.type,
      path: this.path
    };
    if (this.val) {
      data.val = cloneDeep(this.val);
    }
    if (this.diff) {
      data.diff = this.diff.clone();
    }
    return new ObjectOperation(data)
  }

  isNOP () {
    if (this.type === NOP$1) return true
    else if (this.type === UPDATE) return this.diff.isNOP()
  }

  isCreate () {
    return this.type === CREATE
  }

  isDelete () {
    return this.type === DELETE$2
  }

  isUpdate (propertyType) {
    if (propertyType) {
      return (this.type === UPDATE && this.propertyType === propertyType)
    } else {
      return this.type === UPDATE
    }
  }

  isSet () {
    return this.type === SET
  }

  invert () {
    if (this.type === NOP$1) {
      return new ObjectOperation({ type: NOP$1 })
    }
    var result = new ObjectOperation(this);
    if (this.type === CREATE) {
      result.type = DELETE$2;
    } else if (this.type === DELETE$2) {
      result.type = CREATE;
    } else if (this.type === UPDATE) {
      result.diff = this.diff.clone().invert();
    } else /* if (this.type === SET) */ {
      result.val = this.original;
      result.original = this.val;
    }
    return result
  }

  hasConflict (other) {
    return ObjectOperation.hasConflict(this, other)
  }

  toJSON () {
    if (this.type === NOP$1) {
      return { type: NOP$1 }
    }
    var data = {
      type: this.type,
      path: this.path
    };
    if (this.type === CREATE || this.type === DELETE$2) {
      data.val = this.val;
    } else if (this.type === UPDATE) {
      if (this.diff._isTextOperation) {
        data.propertyType = 'string';
      } else if (this.diff._isArrayOperation) {
        data.propertyType = 'array';
      } else if (this.diff._isCoordinateOperation) {
        data.propertyType = 'coordinate';
      } else {
        throw new Error('Invalid property type.')
      }
      data.diff = this.diff.toJSON();
    } else /* if (this.type === SET) */ {
      data.val = this.val;
      data.original = this.original;
    }
    return data
  }

  getType () {
    return this.type
  }

  getPath () {
    return this.path
  }

  getValue () {
    return this.val
  }

  getOldValue () {
    return this.original
  }

  getValueOp () {
    return this.diff
  }

  /* istanbul ignore next */
  toString () {
    switch (this.type) {
      case CREATE:
        return ['(+,', JSON.stringify(this.path), JSON.stringify(this.val), ')'].join('')
      case DELETE$2:
        return ['(-,', JSON.stringify(this.path), JSON.stringify(this.val), ')'].join('')
      case UPDATE:
        return ['(>>,', JSON.stringify(this.path), this.propertyType, this.diff.toString(), ')'].join('')
      case SET:
        return ['(=,', JSON.stringify(this.path), this.val, this.original, ')'].join('')
      case NOP$1:
        return 'NOP'
      default:
        throw new Error('Invalid type')
    }
  }

  static transform (a, b, options) {
    return transform$3(a, b, options)
  }

  static hasConflict (a, b) {
    return hasConflict$1(a, b)
  }

  // Factories

  static Create (idOrPath, val) {
    var path;
    if (isString(idOrPath)) {
      path = [idOrPath];
    } else {
      path = idOrPath;
    }
    return new ObjectOperation({ type: CREATE, path: path, val: val })
  }

  static Delete (idOrPath, val) {
    var path;
    if (isString(idOrPath)) {
      path = [idOrPath];
    } else {
      path = idOrPath;
    }
    return new ObjectOperation({ type: DELETE$2, path: path, val: val })
  }

  static Update (path, op) {
    return new ObjectOperation({
      type: UPDATE,
      path: path,
      diff: op
    })
  }

  static Set (path, oldVal, newVal) {
    return new ObjectOperation({
      type: SET,
      path: path,
      val: cloneDeep(newVal),
      original: cloneDeep(oldVal)
    })
  }

  static fromJSON (data) {
    data = cloneDeep(data);
    if (data.type === 'update') {
      data.diff = _deserializeDiffOp(data.propertyType, data.diff);
    }
    const op = new ObjectOperation(data);
    return op
  }

  // Symbols
  // TODO: we should probably just export these symbols
  static get NOP () { return NOP$1 }
  static get CREATE () { return CREATE }
  static get DELETE () { return DELETE$2 }
  static get UPDATE () { return UPDATE }
  static get SET () { return SET }

  // TODO: do we need this anymore?
  get _isOperation () { return true }
  get _isObjectOperation () { return true }
}

/* Low level implementation */

function hasConflict$1 (a, b) {
  if (a.type === NOP$1 || b.type === NOP$1) return false
  return isEqual(a.path, b.path)
}

function transformDeleteDelete$2 (a, b, options = {}) {
  // no destructive transformation for rebase
  if (!options.rebase) {
    // both operations have the same effect.
    // the transformed operations are turned into NOPs
    a.type = NOP$1;
    b.type = NOP$1;
  }
}

function transformCreateCreate (a, b, options = {}) {
  if (!options.rebase) {
    throw new Error('Can not transform two concurring creates of the same property')
  }
}

function transformDeleteCreate (a, b, options = {}) {
  if (!options.rebase) {
    throw new Error('Illegal state: can not create and delete a value at the same time.')
  }
}

function _transformDeleteUpdate (a, b, flipped, options = {}) {
  // no destructive transformation for rebase
  if (!options.rebase) {
    if (a.type !== DELETE$2) {
      return _transformDeleteUpdate(b, a, true, options)
    }
    const op = _deserializeDiffOp(b.propertyType, b.diff);
    // (DELETE, UPDATE) is transformed into (DELETE, CREATE)
    if (!flipped) {
      a.type = NOP$1;
      b.type = CREATE;
      b.val = op.apply(a.val);
    // (UPDATE, DELETE): the delete is updated to delete the updated value
    } else {
      a.val = op.apply(a.val);
      b.type = NOP$1;
    }
  }
}

function transformDeleteUpdate (a, b, options = {}) {
  return _transformDeleteUpdate(a, b, false, options)
}

function transformCreateUpdate () {
  // it is not possible to reasonably transform this.
  throw new Error('Can not transform a concurring create and update of the same property')
}

function transformUpdateUpdate (a, b, options = {}) {
  // Note: this is a conflict the user should know about
  const opA = _deserializeDiffOp(a.propertyType, a.diff);
  const opB = _deserializeDiffOp(b.propertyType, b.diff);
  let t;
  switch (b.propertyType) {
    case 'string':
      t = TextOperation.transform(opA, opB, options);
      break
    case 'array':
      t = ArrayOperation.transform(opA, opB, options);
      break
    case 'coordinate':
      t = CoordinateOperation.transform(opA, opB, options);
      break
    default:
      throw new Error('Unsupported property type for incremental update')
  }
  a.diff = t[0];
  b.diff = t[1];
}

function _deserializeDiffOp (propertyType, diff) {
  if (diff._isOperation) return diff
  switch (propertyType) {
    case 'string':
      return TextOperation.fromJSON(diff)
    case 'array':
      return ArrayOperation.fromJSON(diff)
    case 'coordinate':
      return CoordinateOperation.fromJSON(diff)
    default:
      throw new Error('Unsupported property type for incremental update.')
  }
}

function transformCreateSet (a, b, options = {}) {
  if (!options.rebase) {
    throw new Error('Illegal state: can not create and set a value at the same time.')
  }
}

function _transformDeleteSet (a, b, flipped, options = {}) {
  if (a.type !== DELETE$2) return _transformDeleteSet(b, a, true, options)
  // no destructive transformation for rebase
  if (!options.rebase) {
    if (!flipped) {
      a.type = NOP$1;
      b.type = CREATE;
      b.original = undefined;
    } else {
      a.val = b.val;
      b.type = NOP$1;
    }
  }
}

function transformDeleteSet (a, b, options = {}) {
  return _transformDeleteSet(a, b, false, options)
}

function transformUpdateSet (a, b, options = {}) {
  if (!options.rebase) {
    throw new Error('Unresolvable conflict: update + set.')
  }
}

function transformSetSet (a, b, options = {}) {
  // no destructive transformation for rebase
  if (!options.rebase) {
    a.type = NOP$1;
    b.original = a.val;
  }
}

const _NOP = 0;
const _CREATE = 1;
const _DELETE = 2;
const _UPDATE = 4;
const _SET = 8;

const CODE = (() => {
  const c = {};
  c[NOP$1] = _NOP;
  c[CREATE] = _CREATE;
  c[DELETE$2] = _DELETE;
  c[UPDATE] = _UPDATE;
  c[SET] = _SET;
  return c
})();

const __transform__ = (() => {
  /* eslint-disable no-multi-spaces */
  const t = {};
  t[_DELETE | _DELETE] = transformDeleteDelete$2;
  t[_DELETE | _CREATE] = transformDeleteCreate;
  t[_DELETE | _UPDATE] = transformDeleteUpdate;
  t[_CREATE | _CREATE] = transformCreateCreate;
  t[_CREATE | _UPDATE] = transformCreateUpdate;
  t[_UPDATE | _UPDATE] = transformUpdateUpdate;
  t[_CREATE | _SET] = transformCreateSet;
  t[_DELETE | _SET] = transformDeleteSet;
  t[_UPDATE | _SET] = transformUpdateSet;
  t[_SET    | _SET] = transformSetSet;
  /* eslint-enable no-multi-spaces */
  return t
})();

function transform$3 (a, b, options = {}) {
  if (options['no-conflict'] && hasConflict$1(a, b)) {
    throw new Conflict(a, b)
  }
  if (a.isNOP() || b.isNOP()) {
    return [a, b]
  }
  var sameProp = isEqual(a.path, b.path);
  // without conflict: a' = a, b' = b
  if (sameProp) {
    __transform__[CODE[a.type] | CODE[b.type]](a, b, options);
  }
  return [a, b]
}

/*
  Transforms change A with B, as if A was done before B.
  A' and B' can be used to update two clients to get to the
  same document content.

     / A - B' \
  v_n          v_n+1
     \ B - A' /
*/
function transformDocumentChange (A, B, options = {}) {
  _transformBatch(A, B, options);
}

function transformSelection (sel, a, options) {
  const newSel = sel.clone();
  const hasChanged = _transformSelectionInplace(newSel, a, options);
  if (hasChanged) {
    return newSel
  } else {
    return sel
  }
}

function _transformSingle (a, b, options = {}) {
  // For OT no options needed
  // For doc.rebase() we use immutableLeft = true
  const immutableLeft = options.immutableLeft;
  const immutableRight = options.immutableRight;
  for (let i = 0; i < a.ops.length; i++) {
    for (let j = 0; j < b.ops.length; j++) {
      let opA = a.ops[i];
      let opB = b.ops[j];
      if (immutableLeft) {
        opA = opA.clone();
      }
      if (immutableRight) {
        opB = opB.clone();
      }
      // ATTENTION: order of arguments is important.
      // First argument is the dominant one, i.e. it is treated as if it was applied before
      ObjectOperation.transform(opA, opB, options);
    }
  }
  if (!immutableLeft) {
    if (a.before) {
      _transformSelectionInplace(a.before.selection, b, options);
    }
    if (a.after) {
      _transformSelectionInplace(a.after.selection, b, options);
    }
  }
  if (!immutableRight) {
    if (b.before) {
      _transformSelectionInplace(b.before.selection, a, options);
    }
    if (b.after) {
      _transformSelectionInplace(b.after.selection, a, options);
    }
  }
}

function _transformBatch (A, B, options = {}) {
  if (!isArray(A)) {
    A = [A];
  }
  if (!isArray(B)) {
    B = [B];
  }
  for (let i = 0; i < A.length; i++) {
    const a = A[i];
    for (let j = 0; j < B.length; j++) {
      const b = B[j];
      _transformSingle(a, b, options);
    }
  }
}

function _transformSelectionInplace (sel, a, options = {}) {
  if (!sel || (!sel.isPropertySelection() && !sel.isContainerSelection())) {
    return false
  }
  const ops = a.ops;
  let hasChanged = false;
  const isCollapsed = sel.isCollapsed();
  for (let i = 0; i < ops.length; i++) {
    const op = ops[i];
    hasChanged |= _transformCoordinateInplace(sel.start, op);
    if (!isCollapsed) {
      hasChanged |= _transformCoordinateInplace(sel.end, op);
    } else {
      if (sel.isContainerSelection()) {
        sel.end.path = sel.start.path;
      }
      sel.end.offset = sel.start.offset;
    }
  }
  return hasChanged
}

function _transformCoordinateInplace (coor, op, options) {
  if (!isEqual(op.path, coor.path)) return false
  let hasChanged = false;
  if (op.type === 'update' && op.propertyType === 'string') {
    const diff = op.diff;
    let newOffset;
    if (diff.isInsert() && diff.pos <= coor.offset) {
      newOffset = coor.offset + diff.str.length;
      // console.log('Transforming coordinate after inserting %s chars:', diff.str.length, coor.toString(), '->', newOffset)
      coor.offset = newOffset;
      hasChanged = true;
    } else if (diff.isDelete() && diff.pos <= coor.offset) {
      newOffset = Math.max(diff.pos, coor.offset - diff.str.length);
      // console.log('Transforming coordinate after deleting %s chars:', diff.str.length, coor.toString(), '->', newOffset)
      coor.offset = newOffset;
      hasChanged = true;
    }
  }
  return hasChanged
}

/**
  A document selection. Refers to a Substance document model, not to the DOM.
*/
class Selection {
  constructor () {
    // Internal stuff
    var _internal = {};
    Object.defineProperty(this, '_internal', {
      enumerable: false,
      value: _internal
    });
    // set when attached to document
    _internal.doc = null;
  }

  clone () {
    var newSel = this._clone();
    if (this._internal.doc) {
      newSel.attach(this._internal.doc);
    }
    return newSel
  }

  /**
    @returns {Document} The attached document instance
  */
  getDocument () {
    var doc = this._internal.doc;
    if (!doc) {
      throw new Error('Selection is not attached to a document.')
    }
    return doc
  }

  isAttached () {
    return Boolean(this._internal.doc)
  }

  /**
    Attach document to the selection.

    @internal
    @param {Document} doc document to attach
    @returns {this}
  */
  attach (doc) {
    this._internal.doc = doc;
    return this
  }

  /**
    @returns {Boolean} true when selection is null.
  */
  isNull () { return false }

  /**
    @returns {Boolean} true for property selections
  */
  isPropertySelection () { return false }

  /**
    @returns {Boolean} true if selection is a {@link model/ContainerSelection}
  */
  isContainerSelection () { return false }

  /**
    @returns {Boolean} true if selection is a {@link model/NodeSelection}
  */
  isNodeSelection () { return false }

  isCustomSelection () { return false }

  /**
    @returns {Boolean} true when selection is collapsed
  */
  isCollapsed () { return true }

  /**
    @returns {Boolean} true if startOffset < endOffset
  */
  isReverse () { return false }

  getType () {
    throw new Error('Selection.getType() is abstract.')
  }

  get type () {
    return this.getType()
  }

  getNodeId () {
    return null
  }

  /**
    @returns {Boolean} true if selection equals `other` selection
  */
  equals (other) {
    if (this === other) {
      return true
    } else if (!other) {
      return false
    } else if (this.isNull() !== other.isNull()) {
      return false
    } else if (this.getType() !== other.getType()) {
      return false
    } else {
      // Note: returning true here, so that sub-classes
      // can call this as a predicate in their expression
      return true
    }
  }

  /**
    @returns {String} This selection as human readable string.
  */
  toString () {
    return 'null'
  }

  /**
    Convert container selection to JSON.

    @abstract
    @returns {Object}
  */
  toJSON () {
    throw new Error('This method is abstract.')
  }

  createWith (update) {
    const SelectionClass = this.constructor;
    const data = this.toJSON();
    Object.assign(data, update);
    return SelectionClass.fromJSON(data)
  }

  // for duck-typed instanceof
  get _isSelection () { return true }

  static get nullSelection () { return NULL_SELECTION }
}

/*
  Class to represent null selections.

  @internal
*/
class NullSelection extends Selection {
  isNull () {
    return true
  }

  getType () {
    return 'null'
  }

  toJSON () {
    return null
  }

  clone () {
    return this
  }
}

/**
  We use a singleton to represent NullSelections.

  @type {model/Selection}
*/
const NULL_SELECTION = Object.freeze(new NullSelection());

const ANY = '@any';
const STAGES = ['update', 'pre-render', 'render', 'post-render', 'pre-position', 'position', 'finalize'];
const DEFAULT_STAGE = 'update';
const STAGE_IDX = STAGES.reduce((m, s, idx) => {
  m[s] = idx;
  return m
}, {});

class AppState extends AbstractAppState {
  _initialize (initialState = {}) {
    super._initialize();

    const impl = this._getImpl();
    impl.slots = new Map();
    impl.schedule = null;
    impl.isFlowing = false;

    const names = Object.keys(initialState);
    names.forEach(name => {
      const initialValue = initialState[name];
      this._addProperty(name, initialValue);
    });
  }

  getId () {
    return this._getImpl().id
  }

  addObserver (deps, handler, observer, options = {}) {
    if (isNil(handler)) throw new Error('Provided handler function is nil')
    if (!isFunction(handler)) throw new Error('Provided handler is not a function')
    handler = handler.bind(observer);

    const impl = this._getImpl();
    const ID = impl.id;
    if (!options.stage) options.stage = DEFAULT_STAGE;
    const stage = options.stage;
    const slotId = this._getSlotId(stage, deps.slice());
    let slot = impl.slots.get(slotId);
    if (!slot) {
      slot = this._createSlot(slotId, stage, deps);
      impl.slots.set(slotId, slot);
    }
    if (!observer[ID]) observer[ID] = new Map();
    // console.log('Adding observer', slot, deps, stage, options)
    slot.addObserver(observer, {
      stage,
      deps,
      handler,
      options
    });
  }

  removeObserver (observer) {
    const impl = this._getImpl();
    const ID = impl.id;
    const entries = observer[ID] || [];
    entries.forEach(e => {
      e.slot.removeObserver(observer);
    });
    delete observer[ID];
  }

  propagateUpdates () {
    const impl = this._getImpl();
    // console.log('AppState.propagatUpdates()', impl.id)
    if (impl.isFlowing) throw new Error('Already updating.')
    impl.isFlowing = true;
    try {
      const schedule = this._getSchedule();
      for (const slot of schedule) {
        if (slot.needsUpdate()) {
          slot.notifyObservers();
        }
      }
      this._reset();
    } finally {
      impl.isFlowing = false;
    }
  }

  _getSlotId (stage, deps) {
    deps.sort();
    return `@${stage}:${deps.join(',')}`
  }

  _createSlot (id, stage, deps) {
    const impl = this._getImpl();
    impl.schedule = null;
    return new Slot(this, id, stage, deps)
  }

  // order slots by stage
  _getSchedule () {
    const impl = this._getImpl();
    let schedule = impl.schedule;
    if (!schedule) {
      schedule = [];
      impl.slots.forEach(s => schedule.push(s));
      schedule.sort((a, b) => STAGE_IDX[a.stage] - STAGE_IDX[b.stage]);
      impl.schedule = schedule;
    }
    return schedule
  }

  _isUpdating () {
    return this._getImpl().isFlowing
  }

  _reset () {
    super._reset();
    this._setDirty(ANY);
  }
}

class Slot {
  constructor (appState, id, stage, deps) {
    this._id = appState._getImpl().id;
    this.id = id;
    this.appState = appState;
    this.stage = stage;
    this.deps = deps;

    this.observers = new Set();
  }

  addObserver (observer, spec) {
    observer[this._id].set(this.id, {
      slot: this,
      spec
    });
    this.observers.add(observer);
  }

  removeObserver (observer) {
    this._deleteEntry(observer);
    this.observers.delete(observer);
  }

  needsUpdate () {
    const state = this.appState;
    for (const dep of this.deps) {
      if (state.isDirty(dep)) return true
    }
    return false
  }

  notifyObservers () {
    const observers = this._getObservers();
    for (const o of observers) {
      const entry = this._getEntryForObserver(o);
      // observer might have been disposed in the meantime
      if (!entry) continue
      this._notifyObserver(entry);
    }
  }

  _getObservers () {
    return this.observers
  }

  _getEntryForObserver (observer) {
    const map = observer[this._id];
    if (map) {
      return map.get(this.id)
    }
  }

  _deleteEntry (observer) {
    const map = observer[this._id];
    if (map) {
      map.delete(this.id);
    }
  }

  _notifyObserver (entry) {
    entry.spec.handler();
  }
}

/**
  @internal
*/
class Coordinate {
  /**
   @param {Array} path the address of a property, such as ['text_1', 'content']
   @param {int} offset the position in the property
  */
  constructor (path, offset) {
    // HACK: to allow this class be inherited but without calling this ctor
    if (arguments[0] === 'SKIP') return
    if (arguments.length === 1) {
      const data = arguments[0];
      this.path = data.path;
      this.offset = data.offset;
    } else {
      this.path = path;
      this.offset = offset;
    }
    if (!isArray(this.path)) {
      throw new Error('Invalid arguments: path should be an array.')
    }
    if (!isNumber(this.offset) || this.offset < 0) {
      throw new Error('Invalid arguments: offset must be a positive number.')
    }
  }

  equals (other) {
    return (other === this ||
      (isArrayEqual(other.path, this.path) && other.offset === this.offset))
  }

  withCharPos (offset) {
    return new Coordinate(this.path, offset)
  }

  getNodeId () {
    return this.path[0]
  }

  getPath () {
    return this.path
  }

  getOffset () {
    return this.offset
  }

  toJSON () {
    return {
      path: this.path.slice(),
      offset: this.offset
    }
  }

  clone () {
    return new Coordinate(this.toJSON())
  }

  toString () {
    return '(' + this.path.join('.') + ', ' + this.offset + ')'
  }

  isPropertyCoordinate () {
    return this.path.length > 1
  }

  isNodeCoordinate () {
    return this.path.length === 1
  }

  hasSamePath (other) {
    return isArrayEqual(this.path, other.path)
  }

  isEqual (other) {
    if (!other) return false
    return this.offset === other.offset && this.hasSamePath(other)
  }

  // TODO: do we need this anymore?
  get _isCoordinate () { return true }
}

/**
 * A selection which is bound to a property. Implements {@link model/Selection}.
 *
 * @example
 *
 * ```js
 * var propSel = doc.createSelection({
 *   type: 'property',
 *   path: ['p1', 'content'],
 *   startOffset: 3,
 *   endOffset: 6
 * })
 */
class PropertySelection extends Selection {
  /**
   * @param {array} path
   * @param {int} startOffset
   * @param {int} endOffset
   * @param {bool} reverse
   * @param {string} [containerPath]
   * @param {string} [surfaceId]
   */
  constructor (path, startOffset, endOffset, reverse, containerPath, surfaceId) {
    super();

    if (arguments.length === 1) {
      const data = arguments[0];
      path = data.path;
      startOffset = data.startOffset;
      endOffset = data.endOffset;
      reverse = data.reverse;
      containerPath = data.containerPath;
      surfaceId = data.surfaceId;
    }

    if (!path || !isNumber(startOffset)) {
      throw new Error('Invalid arguments: `path` and `startOffset` are mandatory')
    }

    this.start = new Coordinate(path, startOffset);
    this.end = new Coordinate(path, isNumber(endOffset) ? endOffset : startOffset);

    /**
      Selection direction.
      @type {Boolean}
    */
    this.reverse = Boolean(reverse);

    this.containerPath = containerPath;

    /**
      Identifier of the surface this selection should be active in.
      @type {String}
    */
    this.surfaceId = surfaceId;
  }

  get path () {
    return this.start.path
  }

  get startOffset () {
    return this.start.offset
  }

  get endOffset () {
    return this.end.offset
  }

  /**
    Convert container selection to JSON.

    @returns {Object}
  */
  toJSON () {
    return {
      type: 'property',
      path: this.start.path,
      startOffset: this.start.offset,
      endOffset: this.end.offset,
      reverse: this.reverse,
      containerPath: this.containerPath,
      surfaceId: this.surfaceId
    }
  }

  isPropertySelection () {
    return true
  }

  getType () {
    return 'property'
  }

  isNull () {
    return false
  }

  isCollapsed () {
    return this.start.offset === this.end.offset
  }

  isReverse () {
    return this.reverse
  }

  equals (other) {
    return (
      Selection.prototype.equals.call(this, other) &&
      (this.start.equals(other.start) && this.end.equals(other.end))
    )
  }

  toString () {
    /* istanbul ignore next */
    return [
      'PropertySelection(', JSON.stringify(this.path), ', ',
      this.start.offset, ' -> ', this.end.offset,
      (this.reverse ? ', reverse' : ''),
      (this.surfaceId ? (', ' + this.surfaceId) : ''),
      ')'
    ].join('')
  }

  /**
    Collapse a selection to chosen direction.

    @param {String} direction either left of right
    @returns {PropertySelection}
  */
  collapse (direction) {
    var offset;
    if (direction === 'left') {
      offset = this.start.offset;
    } else {
      offset = this.end.offset;
    }
    return this.createWithNewRange(offset, offset)
  }

  // Helper Methods
  // ----------------------

  /**
   * Get path of a selection, e.g. target property where selected data is stored.
   *
   * @returns {String[]} path
   */
  getPath () {
    return this.start.path
  }

  getNodeId () {
    return this.start.path[0]
  }

  getPropertyName () {
    return this.start.path[1]
  }

  /**
   * Checks if this selection is inside another one.
   *
   * @param {Selection} other
   * @param {Boolean} [strict] true if should check that it is strictly inside the other
   * @returns {Boolean}
   */
  isInsideOf (other, strict) {
    if (other.isNull()) return false
    if (other.isContainerSelection()) {
      return other.contains(this, strict)
    }
    if (strict) {
      return (isArrayEqual(this.path, other.path) &&
        this.start.offset > other.start.offset &&
        this.end.offset < other.end.offset)
    } else {
      return (isArrayEqual(this.path, other.path) &&
        this.start.offset >= other.start.offset &&
        this.end.offset <= other.end.offset)
    }
  }

  /**
   * Checks if this selection contains another one.
   *
   * @param {Selection} other
   * @param {Boolean} [strict] true if should check that it is strictly contains the other
   * @returns {Boolean}
   */
  contains (other, strict) {
    if (other.isNull()) return false
    return other.isInsideOf(this, strict)
  }

  /**
   * Checks if this selection overlaps another one.
   *
   * @param {Selection} other
   * @param {Boolean} [strict] true if should check that it is strictly overlaps the other
   * @returns {Boolean}
   */
  overlaps (other, strict) {
    if (other.isNull()) return false
    if (other.isContainerSelection()) {
      // console.log('PropertySelection.overlaps: delegating to ContainerSelection.overlaps...')
      return other.overlaps(this)
    }
    if (!isArrayEqual(this.path, other.path)) return false
    if (strict) {
      return (!(this.start.offset >= other.end.offset || this.end.offset <= other.start.offset))
    } else {
      return (!(this.start.offset > other.end.offset || this.end.offset < other.start.offset))
    }
  }

  /**
   * Checks if this selection has the right boundary in common with another one.
   *
   * @param {Selection} other
   * @returns {Boolean}
   */
  isRightAlignedWith (other) {
    if (other.isNull()) return false
    if (other.isContainerSelection()) {
      // console.log('PropertySelection.isRightAlignedWith: delegating to ContainerSelection.isRightAlignedWith...')
      return other.isRightAlignedWith(this)
    }
    return (isArrayEqual(this.path, other.path) &&
      this.end.offset === other.end.offset)
  }

  /**
   * Checks if this selection has the left boundary in common with another one.
   *
   * @param {Selection} other
   * @returns {Boolean}
   */
  isLeftAlignedWith (other) {
    if (other.isNull()) return false
    if (other.isContainerSelection()) {
      // console.log('PropertySelection.isLeftAlignedWith: delegating to ContainerSelection.isLeftAlignedWith...')
      return other.isLeftAlignedWith(this)
    }
    return (isArrayEqual(this.path, other.path) &&
      this.start.offset === other.start.offset)
  }

  /**
   * Expands selection to include another selection.
   *
   * @param {Selection} other
   * @returns {Selection} a new selection
   */
  expand (other) {
    if (other.isNull()) return this

    // if the other is a ContainerSelection
    // we delegate to that implementation as it is more complex
    // and can deal with PropertySelections, too
    if (other.isContainerSelection()) {
      return other.expand(this)
    }
    if (!isArrayEqual(this.path, other.path)) {
      throw new Error('Can not expand PropertySelection to a different property.')
    }
    var newStartOffset = Math.min(this.start.offset, other.start.offset);
    var newEndOffset = Math.max(this.end.offset, other.end.offset);
    return this.createWithNewRange(newStartOffset, newEndOffset)
  }

  /**
   * Creates a new selection by truncating this one by another selection.
   *
   * @param {Selection} other
   * @returns {Selection} a new selection
   */
  truncateWith (other) {
    if (other.isNull()) return this
    if (other.isInsideOf(this, 'strict')) {
      // the other selection should overlap only on one side
      throw new Error('Can not truncate with a contained selections')
    }
    if (!this.overlaps(other)) {
      return this
    }
    let otherStartOffset, otherEndOffset;
    if (other.isPropertySelection()) {
      otherStartOffset = other.start.offset;
      otherEndOffset = other.end.offset;
    } else if (other.isContainerSelection()) {
      // either the startPath or the endPath must be the same
      if (isArrayEqual(other.start.path, this.start.path)) {
        otherStartOffset = other.start.offset;
      } else {
        otherStartOffset = this.start.offset;
      }
      if (isArrayEqual(other.end.path, this.start.path)) {
        otherEndOffset = other.end.offset;
      } else {
        otherEndOffset = this.end.offset;
      }
    } else {
      return this
    }

    let newStartOffset;
    let newEndOffset;
    if (this.start.offset > otherStartOffset && this.end.offset > otherEndOffset) {
      newStartOffset = otherEndOffset;
      newEndOffset = this.end.offset;
    } else if (this.start.offset < otherStartOffset && this.end.offset < otherEndOffset) {
      newStartOffset = this.start.offset;
      newEndOffset = otherStartOffset;
    } else if (this.start.offset === otherStartOffset) {
      if (this.end.offset <= otherEndOffset) {
        return Selection.nullSelection
      } else {
        newStartOffset = otherEndOffset;
        newEndOffset = this.end.offset;
      }
    } else if (this.end.offset === otherEndOffset) {
      if (this.start.offset >= otherStartOffset) {
        return Selection.nullSelection
      } else {
        newStartOffset = this.start.offset;
        newEndOffset = otherStartOffset;
      }
    } else if (other.contains(this)) {
      return Selection.nullSelection
    } else {
      // FIXME: if this happens, we have a bug somewhere above
      throw new Error('Illegal state.')
    }
    return this.createWithNewRange(newStartOffset, newEndOffset)
  }

  /**
   * Creates a new selection with given range and same path.
   *
   * @param {Number} startOffset
   * @param {Number} endOffset
   * @returns {Selection} a new selection
   */
  createWithNewRange (startOffset, endOffset) {
    var sel = new PropertySelection(this.path, startOffset, endOffset, false, this.containerPath, this.surfaceId);
    var doc = this._internal.doc;
    if (doc) {
      sel.attach(doc);
    }
    return sel
  }

  _clone () {
    return new PropertySelection(this.start.path, this.start.offset, this.end.offset, this.reverse, this.containerPath, this.surfaceId)
  }

  static fromJSON (json) {
    return new PropertySelection(json)
  }
}

function compareCoordinates (doc, containerPath, coor1, coor2) {
  // First compare coordinates via their xpath if they have differing paths
  if (!coor1.hasSamePath(coor2)) {
    const address1 = _getContainerAddress(doc, containerPath, coor1);
    const address2 = _getContainerAddress(doc, containerPath, coor2);
    const L = Math.min(address1.length, address2.length);
    for (let level = 0; level < L; level++) {
      const p1 = address1[level];
      const p2 = address2[level];
      if (p1 < p2) return -1
      if (p1 > p2) return 1
    }
    if (address1.length === address2.length) {
      return Math.sign(coor1.offset - coor2.offset)
    } else {
      // TODO: how should we compare these?
      console.error('FIXME: unexpected case in compareCoordinates()');
      return 0
    }
  } else {
    return Math.sign(coor1.offset - coor2.offset)
  }
}

function _getContainerAddress (doc, containerPath, coor) {
  const containerId = containerPath[0];
  const nodeId = coor.path[0];
  const node = doc.get(nodeId);
  let xpath = node.getXpath();
  const address = [];
  while (xpath) {
    if (xpath.id === containerId) return address
    address.unshift(xpath.pos || 0);
    xpath = xpath.prev;
  }
}

function isCoordinateBefore (doc, containerPath, coor1, coor2, strict) {
  const cmp = compareCoordinates(doc, containerPath, coor1, coor2);
  if (strict) {
    return cmp < 0
  } else {
    return cmp <= 0
  }
}

/**
 * A selection spanning multiple nodes.
 *
 *
 * @example
 *
 * ```js
 * let containerSel = doc.createSelection({
 *   type: 'container',
 *   containerPath: 'body',
 *   startPath: ['p1', 'content'],
 *   startOffset: 5,
 *   endPath: ['p3', 'content'],
 *   endOffset: 4,
 * })
 * ```
 */
class ContainerSelection extends Selection {
  constructor (containerPath, startPath, startOffset, endPath, endOffset, reverse, surfaceId) {
    super();

    if (arguments.length === 1) {
      const data = arguments[0];
      containerPath = data.containerPath;
      startPath = data.startPath;
      startOffset = data.startOffset;
      endPath = data.endPath;
      endOffset = data.endOffset;
      reverse = data.reverse;
      surfaceId = data.surfaceId;
    }

    /**
      @type {String}
    */
    this.containerPath = containerPath;
    if (!this.containerPath) throw new Error('Invalid arguments: `containerPath` is mandatory')

    this.start = new Coordinate(startPath, startOffset);
    this.end = new Coordinate(isNil(endPath) ? startPath : endPath, isNil(endOffset) ? startOffset : endOffset);

    this.reverse = Boolean(reverse);

    this.surfaceId = surfaceId;
  }

  /* istanbul ignore start */

  get startPath () {
    console.warn('DEPRECATED: use sel.start.path instead.');
    return this.start.path
  }

  get startOffset () {
    console.warn('DEPRECATED: use sel.start.offset instead.');
    return this.start.offset
  }

  get endPath () {
    console.warn('DEPRECATED: use sel.end.path instead.');
    return this.end.path
  }

  get endOffset () {
    console.warn('DEPRECATED: use sel.end.offset instead.');
    return this.end.offset
  }

  /* istanbul ignore end */

  toJSON () {
    return {
      type: 'container',
      containerPath: this.containerPath,
      startPath: this.start.path,
      startOffset: this.start.offset,
      endPath: this.end.path,
      endOffset: this.end.offset,
      reverse: this.reverse,
      surfaceId: this.surfaceId
    }
  }

  isContainerSelection () {
    return true
  }

  getType () {
    return 'container'
  }

  isNull () {
    return false
  }

  isCollapsed () {
    return this.start.equals(this.end)
  }

  isReverse () {
    return this.reverse
  }

  equals (other) {
    return (
      Selection.prototype.equals.call(this, other) &&
      isArrayEqual(this.containerPath, other.containerPath) &&
      (this.start.equals(other.start) && this.end.equals(other.end))
    )
  }

  toString () {
    /* istanbul ignore next */
    return [
      'ContainerSelection(',
      this.containerPath, ', ',
      JSON.stringify(this.start.path), ', ', this.start.offset,
      ' -> ',
      JSON.stringify(this.end.path), ', ', this.end.offset,
      (this.reverse ? ', reverse' : ''),
      (this.surfaceId ? (', ' + this.surfaceId) : ''),
      ')'
    ].join('')
  }

  isInsideOf (other, strict) {
    // Note: this gets called from PropertySelection.contains()
    // because this implementation can deal with mixed selection types.
    if (other.isNull()) return false
    return (
      this._isCoordinateBefore(other.start, this.start, strict) &&
      this._isCoordinateBefore(this.end, other.end, strict)
    )
  }

  contains (other, strict) {
    // Note: this gets called from PropertySelection.isInsideOf()
    // because this implementation can deal with mixed selection types.
    if (other.isNull()) return false
    return (
      this._isCoordinateBefore(this.start, other.start, strict) &&
      this._isCoordinateBefore(other.end, this.end, strict)
    )
  }

  containsNode (nodeId) {
    const containerPath = this.containerPath;
    const doc = this.getDocument();
    const nodeCoor = new Coordinate([nodeId], 0);
    const cmpStart = compareCoordinates(doc, containerPath, nodeCoor, this.start);
    const cmpEnd = compareCoordinates(doc, containerPath, nodeCoor, this.end);
    // HACK: trying to get this working
    // the coor created is always ([nodeId], 0)
    // The node is considered inside the selection if this coor >= start and coor < end
    return cmpStart >= 0 && cmpEnd < 0
  }

  overlaps (other) {
    // it overlaps if they are not disjunct
    return (
      !this._isCoordinateBefore(this.end, other.start, false) ||
      this._isCoordinateBefore(other.end, this.start, false)
    )
  }

  isLeftAlignedWith (other) {
    return this.start.isEqual(other.start)
  }

  isRightAlignedWith (other) {
    return this.end.isEqual(other.end)
  }

  /**
   * Collapse a selection to chosen direction.
   *
   * @param {String} direction either left of right
   * @returns {PropertySelection}
   */
  collapse (direction) {
    let coor;
    if (direction === 'left') {
      coor = this.start;
    } else {
      coor = this.end;
    }
    return _createNewSelection(this, coor, coor)
  }

  expand (other) {
    let start;
    let end;

    if (this.start.isEqual(other.start)) {
      start = new Coordinate(this.start.path, Math.min(this.start.offset, other.start.offset));
    } else if (this._isCoordinateBefore(other.start, this.start, false)) {
      start = new Coordinate(other.start.path, other.start.offset);
    } else {
      start = this.start;
    }
    if (this.end.isEqual(other.end)) {
      end = new Coordinate(this.end.path, Math.max(this.end.offset, other.end.offset));
    } else if (this._isCoordinateBefore(this.end, other.end, false)) {
      end = new Coordinate(other.end.path, other.end.offset);
    } else {
      end = this.end;
    }

    return _createNewSelection(this, start, end)
  }

  truncateWith (other) {
    if (other.isInsideOf(this, 'strict')) {
      // the other selection should overlap only on one side
      throw new Error('Can not truncate with a contained selections')
    }
    if (!this.overlaps(other)) {
      return this
    }
    let start, end;
    if (this._isCoordinateBefore(other.start, this.start, 'strict') && this._isCoordinateBefore(other.end, this.end, 'strict')) {
      start = other.end;
      end = this.end;
    } else if (this._isCoordinateBefore(this.start, other.start, 'strict') && this._isCoordinateBefore(this.end, other.end, 'strict')) {
      start = this.start;
      end = other.start;
    } else if (this.start.isEqual(other.start)) {
      if (this._isCoordinateBefore(other.end, this.end, 'strict')) {
        start = other.end;
        end = this.end;
      } else {
        // the other selection is larger which eliminates this one
        return Selection.nullSelection
      }
    } else if (this.end.isEqual(other.end)) {
      if (this._isCoordinateBefore(this.start, other.start, 'strict')) {
        start = this.start;
        end = other.start;
      } else {
        // the other selection is larger which eliminates this one
        return Selection.nullSelection
      }
    } else if (this.isInsideOf(other)) {
      return Selection.nullSelection
    } else {
      throw new Error('Could not determine coordinates for truncate. Check input')
    }
    return _createNewSelection(this, start, end)
  }

  /**
   * Splits a container selection into property selections.
   *
   * @returns {PropertySelection[]}
   */
  splitIntoPropertySelections () {
    const fragments = this.getFragments();
    return fragments.filter(f => f instanceof Selection.Fragment).map(f => {
      return new PropertySelection(f.path, f.startOffset,
        f.endOffset, false, this.containerPath, this.surfaceId)
    })
  }

  /**
   * @return {Array} an array of ids.
   */
  _getContainerContent () {
    return this.getDocument().get(this.containerPath)
  }

  _clone () {
    return new ContainerSelection(this)
  }

  _isCoordinateBefore (coor1, coor2, strict) {
    const doc = this.getDocument();
    return isCoordinateBefore(doc, this.containerPath, coor1, coor2, strict)
  }

  get path () {
    throw new Error('ContainerSelection has no path property. Use startPath and endPath instead')
  }

  get _isContainerSelection () { return true }

  static fromJSON (properties) {
    const sel = new ContainerSelection(properties);
    return sel
  }
}

function _createNewSelection (containerSel, start, end) {
  let newSel;

  if (start === end) {
    newSel = new PropertySelection({
      path: start.path,
      startOffset: start.offset,
      endOffset: start.offset,
      containerPath: containerSel.containerPath,
      surfaceId: containerSel.surfaceId
    });
  } else {
    newSel = new ContainerSelection(
      containerSel.containerPath,
      start.path, start.offset, end.path, end.offset,
      false, containerSel.surfaceId
    );
  }
  // we need to attach the new selection
  const doc = containerSel._internal.doc;
  if (doc) {
    newSel.attach(doc);
  }
  return newSel
}

class NodeSelection extends Selection {
  constructor (containerPath, nodeId, mode, reverse, surfaceId) {
    super();

    if (arguments.length === 1) {
      const data = arguments[0];
      containerPath = data.containerPath;
      nodeId = data.nodeId;
      mode = data.mode;
      reverse = data.reverse;
      surfaceId = data.surfaceId;
    }

    if (!isArray(containerPath)) {
      throw new Error("'containerPath' is mandatory.")
    }
    if (!isString(nodeId)) {
      throw new Error("'nodeId' is mandatory.")
    }
    mode = mode || 'full';

    this.containerPath = containerPath;
    this.nodeId = nodeId;
    this.mode = mode;
    this.reverse = Boolean(reverse);
    this.surfaceId = surfaceId;

    this.start = new Coordinate([nodeId], 0);
    this.end = new Coordinate([nodeId], 1);
  }

  equals (other) {
    return (
      super.equals(other) &&
      this.nodeId === other.nodeId &&
      this.mode === other.mode
    )
  }

  isNodeSelection () {
    return true
  }

  getType () {
    return 'node'
  }

  getNodeId () {
    return this.nodeId
  }

  isFull () {
    return this.mode === 'full'
  }

  isBefore () {
    return this.mode === 'before'
  }

  isAfter () {
    return this.mode === 'after'
  }

  isCollapsed () {
    return this.mode !== 'full'
  }

  toJSON () {
    return {
      type: 'node',
      nodeId: this.nodeId,
      mode: this.mode,
      reverse: this.reverse,
      containerPath: this.containerPath,
      surfaceId: this.surfaceId
    }
  }

  toString () {
    /* istanbul ignore next */
    return [
      'NodeSelection(',
      this.containerPath, '.', this.nodeId, ', ',
      this.mode, ', ',
      (this.reverse ? ', reverse' : ''),
      (this.surfaceId ? (', ' + this.surfaceId) : ''),
      ')'
    ].join('')
  }

  collapse (direction) {
    if (direction === 'left') {
      if (this.isBefore()) {
        return this
      } else {
        return new NodeSelection(this.containerPath, this.nodeId, 'before', this.reverse, this.surfaceId)
      }
    } else if (direction === 'right') {
      if (this.isAfter()) {
        return this
      } else {
        return new NodeSelection(this.containerPath, this.nodeId, 'after', this.reverse, this.surfaceId)
      }
    } else {
      throw new Error("'direction' must be either 'left' or 'right'")
    }
  }

  _getCoordinate () {
    if (this.mode === 'before') {
      return new Coordinate([this.nodeId], 0)
    } else if (this.mode === 'after') {
      return new Coordinate([this.nodeId], 1)
    }
  }

  _clone () {
    return new NodeSelection(this)
  }

  static fromJSON (data) {
    return new NodeSelection(data)
  }

  get _isNodeSelection () { return true }
}

class CustomSelection extends Selection {
  constructor (customType, data, nodeId, surfaceId) {
    super();

    if (arguments.length === 1) {
      const _data = arguments[0];
      customType = _data.customType;
      data = _data.data;
      nodeId = _data.nodeId;
      surfaceId = _data.surfaceId;
    }

    if (!customType) { throw new Error("'customType' is required") }
    if (!nodeId) { throw new Error("'nodeId' is required") }

    this.customType = customType;
    this.data = data || {};
    this.nodeId = nodeId;
    this.surfaceId = surfaceId;
  }

  isCustomSelection () {
    return true
  }

  getType () {
    return 'custom'
  }

  getCustomType () {
    return this.customType
  }

  /**
   * Provide the id of the node which is responsible for this selection.
   * E.g. a table selection is interpreted by a specific table.
   */
  getNodeId () {
    return this.nodeId
  }

  toJSON () {
    const res = {
      type: 'custom',
      customType: this.customType,
      nodeId: this.nodeId,
      data: cloneDeep(this.data)
    };
    if (this.surfaceId) {
      res.surfaceId = this.surfaceId;
    }
    return res
  }

  toString () {
    /* istanbul ignore next */
    return [
      'CustomSelection(',
      this.customType, ', ',
      JSON.stringify(this.data),
      ')'
    ].join('')
  }

  equals (other) {
    return (
      Selection.prototype.equals.call(this, other) &&
      other.isCustomSelection() &&
      isEqual(this.data, other.data)
    )
  }

  _clone () {
    return new CustomSelection(this)
  }

  get _isCustomSelection () { return true }

  static fromJSON (data) {
    return new CustomSelection(data)
  }
}

function getContainerRoot (doc, containerPath, nodeId) {
  let current = doc.get(nodeId);
  const containerId = containerPath[0];
  while (current) {
    const parent = current.getParent();
    if (parent && parent.id === containerId) {
      return current
    }
    current = parent;
  }
}

function getContainerPosition (doc, containerPath, nodeId) {
  const node = getContainerRoot(doc, containerPath, nodeId);
  return node.getPosition()
}

function fromJSON (json) {
  if (!json) return Selection.nullSelection
  var type = json.type;
  switch (type) {
    case 'property':
      return PropertySelection.fromJSON(json)
    case 'container':
      return ContainerSelection.fromJSON(json)
    case 'node':
      return NodeSelection.fromJSON(json)
    case 'custom':
      return CustomSelection.fromJSON(json)
    default:
      // console.error('Selection.fromJSON(): unsupported selection data', json)
      return Selection.nullSelection
  }
}

/**
 * Helper to check if a coordinate is the first position of a node.
 * Attention: this works only for Text and List nodes
 */
function isFirst (doc, containerPath, coor) {
  if (coor.isNodeCoordinate()) {
    return coor.offset === 0
  }
  const node = getContainerRoot(doc, containerPath, coor.path[0]);
  if (node.isText()) {
    return coor.offset === 0
  }
  if (node.isList()) {
    const itemId = coor.path[0];
    return (node.items[0] === itemId && coor.offset === 0)
  }
  return false
}

/**
 * Helper to check if a coordinate is the last position of a node.
 * Attention: this works only for Text and List nodes
 */
function isLast (doc, containerPath, coor) {
  if (coor.isNodeCoordinate()) {
    return coor.offset > 0
  }
  const node = getContainerRoot(doc, containerPath, coor.path[0]);
  if (node.isText()) {
    return coor.offset >= node.getLength()
  }
  if (node.isList()) {
    const itemId = coor.path[0];
    const item = doc.get(itemId);
    return (last(node.items) === itemId && coor.offset === item.getLength())
  }
  return false
}

function isEntirelySelected (doc, node, start, end) {
  const { isEntirelySelected } = _getRangeInfo(doc, node, start, end);
  return isEntirelySelected
}

function _getRangeInfo (doc, node, start, end) {
  let isFirst = true;
  let isLast = true;
  if (node.isText() || node.isListItem()) {
    if (start && start.offset !== 0) isFirst = false;
    if (end && end.offset < node.getLength()) isLast = false;
  }
  const isEntirelySelected = isFirst && isLast;
  return { isFirst, isLast, isEntirelySelected }
}

function setCursor (tx, node, containerPath, mode) {
  if (node.isText()) {
    let offset = 0;
    if (mode === 'after') {
      const text = node.getText();
      offset = text.length;
    }
    tx.setSelection({
      type: 'property',
      path: node.getPath(),
      startOffset: offset,
      containerPath
    });
  } else if (node.isList()) {
    let item, offset;
    if (mode === 'after') {
      item = node.getLastItem();
      offset = item.getLength();
    } else {
      item = node.getFirstItem();
      offset = 0;
    }
    tx.setSelection({
      type: 'property',
      path: item.getPath(),
      startOffset: offset,
      containerPath
    });
  } else {
    tx.setSelection({
      type: 'node',
      containerPath,
      nodeId: node.id
      // NOTE: ATM we mostly use 'full' NodeSelections
      // Still, they are supported internally
      // mode: mode
    });
  }
}

function selectNode (tx, nodeId, containerPath) {
  tx.setSelection(createNodeSelection({ doc: tx, nodeId, containerPath }));
}

function createSelection (doc, data) {
  let sel;
  if (isNil(data)) return Selection.nullSelection
  switch (data.type) {
    case 'property': {
      if (isNil(data.endOffset)) {
        data.endOffset = data.startOffset;
      }
      if (!_isDefined(data.reverse)) {
        if (data.startOffset > data.endOffset) {
          [data.startOffset, data.endOffset] = [data.endOffset, data.startOffset];
          data.reverse = !data.reverse;
        }
      }
      // integrity checks:
      const text = doc.get(data.path, 'strict');
      if (data.startOffset < 0 || data.startOffset > text.length) {
        throw new Error('Invalid startOffset: target property has length ' + text.length + ', given startOffset is ' + data.startOffset)
      }
      if (data.endOffset < 0 || data.endOffset > text.length) {
        throw new Error('Invalid startOffset: target property has length ' + text.length + ', given endOffset is ' + data.endOffset)
      }
      sel = new PropertySelection(data);
      break
    }
    case 'container': {
      const containerPath = data.containerPath;
      const ids = doc.get(containerPath);
      if (!ids) throw new Error('Can not create ContainerSelection: container "' + containerPath + '" does not exist.')
      let start = _normalizeCoor(doc, { path: data.startPath, offset: data.startOffset, containerPath });
      let end = _normalizeCoor(doc, { path: data.endPath, offset: data.endOffset, containerPath });
      if (!_isDefined(data.reverse)) {
        if (compareCoordinates(doc, containerPath, start, end) > 0) {
          [start, end] = [end, start];
          data.reverse = true;
        }
      }
      sel = new ContainerSelection(containerPath, start.path, start.offset, end.path, end.offset, data.reverse, data.surfaceId);
      break
    }
    case 'node': {
      sel = createNodeSelection({
        doc,
        nodeId: data.nodeId,
        mode: data.mode,
        containerPath: data.containerPath,
        reverse: data.reverse,
        surfaceId: data.surfaceId
      });
      break
    }
    case 'custom': {
      sel = CustomSelection.fromJSON(data);
      break
    }
    default:
      throw new Error('Illegal selection type', data)
  }
  if (!sel.isNull()) {
    sel.attach(doc);
  }
  return sel
}

function _normalizeCoor (doc, { path, offset, containerPath }) {
  // NOTE: normalizing so that a node coordinate is used only for 'isolated nodes'
  if (path.length === 1) {
    // FIXME: originally getContainerRoot was called here
    // however in this case
    const node = getContainerRoot(doc, containerPath, path[0]);
    if (node.isText()) {
      // console.warn("DEPRECATED: don't use node coordinates for TextNodes. Use selectionHelpers instead to set cursor at first or last position conveniently.")
      return new Coordinate(node.getPath(), offset === 0 ? 0 : node.getLength())
    } else if (node.isList()) {
      // console.warn("DEPRECATED: don't use node coordinates for ListNodes. Use selectionHelpers instead to set cursor at first or last position conveniently.")
      if (offset === 0) {
        const item = node.getItemAt(0);
        return new Coordinate(item.getPath(), 0)
      } else {
        const item = doc.get(last(node.items));
        return new Coordinate(item.getPath(), item.getLength())
      }
    }
  }
  return new Coordinate(path, offset)
}

function createNodeSelection ({ doc, nodeId, containerPath, mode, reverse, surfaceId }) {
  let node = doc.get(nodeId);
  if (!node) return Selection.nullSelection
  node = getContainerRoot(doc, containerPath, nodeId);
  if (node.isText()) {
    return new PropertySelection({
      path: node.getPath(),
      startOffset: mode === 'after' ? node.getLength() : 0,
      endOffset: mode === 'before' ? 0 : node.getLength(),
      reverse,
      containerPath,
      surfaceId
    })
  } else if (node.isList() && node.getLength() > 0) {
    const first = node.getFirstItem();
    const last = node.getLastItem();
    let start = {
      path: first.getPath(),
      offset: 0
    };
    let end = {
      path: last.getPath(),
      offset: last.getLength()
    };
    if (mode === 'after') start = end;
    else if (mode === 'before') end = start;
    return new ContainerSelection({
      startPath: start.path,
      startOffset: start.offset,
      endPath: end.path,
      endOffset: end.offset,
      reverse,
      containerPath,
      surfaceId
    })
  } else {
    return new NodeSelection({ nodeId, mode, reverse, containerPath, surfaceId })
  }
}

function stepIntoIsolatedNode (editorSession, comp) {
  // this succeeds if the content component provides
  // a grabFocus() implementation
  if (comp.grabFocus()) return true

  // otherwise we try to find the first surface
  const surface = comp.find('.sc-surface');
  if (surface) {
    // TODO: what about CustomSurfaces?
    if (surface._isTextPropertyEditor) {
      const doc = editorSession.getDocument();
      const path = surface.getPath();
      const text = doc.get(path, 'strict');
      editorSession.setSelection({
        type: 'property',
        path: path,
        startOffset: text.length,
        surfaceId: surface.id
      });
      return true
    } else if (surface._isContainerEditor) {
      const doc = editorSession.getDocument();
      const containerPath = surface.getContainerPath();
      const nodeIds = doc.get();
      if (nodeIds.length > 0) {
        const first = doc.get(nodeIds[0]);
        setCursor(editorSession, first, containerPath, 'after');
      }
      return true
    }
  }
  return false
}

function augmentSelection (selData, oldSel) {
  // don't do magically if a surfaceId is present
  if (selData && oldSel && !selData.surfaceId && !oldSel.isNull()) {
    selData.containerPath = selData.containerPath || oldSel.containerPath;
    selData.surfaceId = selData.surfaceId || oldSel.surfaceId;
  }
  return selData
}

/**
 * Get the node ids covered by this selection.
 *
 * @returns {String[]} an getNodeIds of ids
 */
function getNodeIdsCoveredByContainerSelection (doc, sel) {
  const containerPath = sel.containerPath;
  const startPos = getContainerPosition(doc, containerPath, sel.start.path[0]);
  const endPos = getContainerPosition(doc, containerPath, sel.end.path[0]);
  const nodeIds = doc.get(containerPath);
  return nodeIds.slice(startPos, endPos + 1)
}

// A collection of methods to update annotations
// --------
//
// As we treat annotations as overlay of plain text we need to keep them up-to-date during editing.

var annotationHelpers = {
  insertedText,
  deletedText,
  transferAnnotations,
  expandAnnotation,
  fuseAnnotation,
  truncateAnnotation
};

function insertedText (doc, coordinate, length) {
  if (!length) return
  var index = doc.getIndex('annotations');
  var annotations = index.get(coordinate.path);
  for (let i = 0; i < annotations.length; i++) {
    const anno = annotations[i];
    var pos = coordinate.offset;
    var start = anno.start.offset;
    var end = anno.end.offset;
    var newStart = start;
    var newEnd = end;
    if ((pos < start) ||
         (pos === start)) {
      newStart += length;
    }
    // inline nodes do not expand automatically
    if ((pos < end) ||
         (pos === end && !anno.isInlineNode())) {
      newEnd += length;
    }
    // TODO: Use coordintate ops!
    if (newStart !== start) {
      doc.set([anno.id, 'start', 'offset'], newStart);
    }
    if (newEnd !== end) {
      doc.set([anno.id, 'end', 'offset'], newEnd);
    }
  }

  // TODO: fix support for container annotations
  // // same for container annotation anchors
  // index = doc.getIndex('container-annotation-anchors');
  // var anchors = index.get(coordinate.path);
  // forEach(anchors, function(anchor) {
  //   var pos = coordinate.offset;
  //   var start = anchor.offset;
  //   var changed = false;
  //   if ( (pos < start) ||
  //        (pos === start && !coordinate.after) ) {
  //     start += length;
  //     changed = true;
  //   }
  //   if (changed) {
  //     let coor = (anchor.isStart?'start':'end');
  //     // TODO: Use coordintate ops!
  //     doc.set([anchor.id, coor, 'offset'], start);
  //   }
  // });
}

function deletedText (doc, path, startOffset, endOffset) {
  if (startOffset === endOffset) return
  var index = doc.getIndex('annotations');
  var annotations = index.get(path);
  var length = endOffset - startOffset;
  for (let i = 0; i < annotations.length; i++) {
    const anno = annotations[i];
    var pos1 = startOffset;
    var pos2 = endOffset;
    var start = anno.start.offset;
    var end = anno.end.offset;
    var newStart = start;
    var newEnd = end;
    if (pos2 <= start) {
      newStart -= length;
      newEnd -= length;
      doc.set([anno.id, 'start', 'offset'], newStart);
      doc.set([anno.id, 'end', 'offset'], newEnd);
    } else {
      if (pos1 <= start) {
        newStart = start - Math.min(pos2 - pos1, start - pos1);
      }
      if (pos1 <= end) {
        newEnd = end - Math.min(pos2 - pos1, end - pos1);
      }
      // delete the annotation if it has collapsed by this delete
      if (start !== end && newStart === newEnd) {
        doc.delete(anno.id);
      } else {
        // TODO: Use coordintate ops!
        if (start !== newStart) {
          doc.set([anno.id, 'start', 'offset'], newStart);
        }
        if (end !== newEnd) {
          doc.set([anno.id, 'end', 'offset'], newEnd);
        }
      }
    }
  }
  // TODO: fix support for container annotations
  // // same for container annotation anchors
  // index = doc.getIndex('container-annotation-anchors');
  // var anchors = index.get(path);
  // var containerAnnoIds = [];
  // forEach(anchors, function(anchor) {
  //   containerAnnoIds.push(anchor.id);
  //   var pos1 = startOffset;
  //   var pos2 = endOffset;
  //   var start = anchor.offset;
  //   var changed = false;
  //   if (pos2 <= start) {
  //     start -= length;
  //     changed = true;
  //   } else {
  //     if (pos1 <= start) {
  //       var newStart = start - Math.min(pos2-pos1, start-pos1);
  //       if (start !== newStart) {
  //         start = newStart;
  //         changed = true;
  //       }
  //     }
  //   }
  //   if (changed) {
  //     // TODO: Use coordintate ops!
  //     let coor = (anchor.isStart?'start':'end');
  //     doc.set([anchor.id, coor, 'offset'], start);
  //   }
  // });
  // // check all anchors after that if they have collapsed and remove the annotation in that case
  // forEach(uniq(containerAnnoIds), function(id) {
  //   var anno = doc.get(id);
  //   var annoSel = anno.getSelection();
  //   if(annoSel.isCollapsed()) {
  //     // console.log("...deleting container annotation because it has collapsed" + id);
  //     doc.delete(id);
  //   }
  // });
}

// used when breaking a node to transfer annotations to the new property
function transferAnnotations (doc, path, offset, newPath, newOffset) {
  var index = doc.getIndex('annotations');
  var annotations = index.get(path, offset);
  for (let i = 0; i < annotations.length; i++) {
    const a = annotations[i];
    var isInside = (offset > a.start.offset && offset < a.end.offset);
    var start = a.start.offset;
    var end = a.end.offset;
    // 1. if the cursor is inside an annotation it gets either split or truncated
    if (isInside) {
      // create a new annotation if the annotation is splittable
      if (a.canSplit()) {
        const newAnno = a.toJSON();
        newAnno.id = uuid(a.type + '_');
        newAnno.start.path = newPath;
        newAnno.start.offset = newOffset;
        newAnno.end.path = newPath;
        newAnno.end.offset = newOffset + a.end.offset - offset;
        doc.create(newAnno);
      }
      // in either cases truncate the first part
      const newStartOffset = a.start.offset;
      const newEndOffset = offset;
      // if after truncate the anno is empty, delete it
      if (newEndOffset === newStartOffset) {
        doc.delete(a.id);
      // ... otherwise update the range
      } else {
        // TODO: Use coordintate ops!
        if (newStartOffset !== start) {
          doc.set([a.id, 'start', 'offset'], newStartOffset);
        }
        if (newEndOffset !== end) {
          doc.set([a.id, 'end', 'offset'], newEndOffset);
        }
      }
    // 2. if the cursor is before an annotation then simply transfer the annotation to the new node
    } else if (a.start.offset >= offset) {
      // TODO: Use coordintate ops!
      // Note: we are preserving the annotation so that anything which is connected to the annotation
      // remains valid.
      doc.set([a.id, 'start', 'path'], newPath);
      doc.set([a.id, 'start', 'offset'], newOffset + a.start.offset - offset);
      doc.set([a.id, 'end', 'path'], newPath);
      doc.set([a.id, 'end', 'offset'], newOffset + a.end.offset - offset);
    }
  }

  // TODO: fix support for container annotations
  // // same for container annotation anchors
  // index = doc.getIndex('container-annotation-anchors');
  // var anchors = index.get(path);
  // var containerAnnoIds = [];
  // forEach(anchors, function(anchor) {
  //   containerAnnoIds.push(anchor.id);
  //   var start = anchor.offset;
  //   if (offset <= start) {
  //     // TODO: Use coordintate ops!
  //     let coor = anchor.isStart?'start':'end'
  //     doc.set([anchor.id, coor, 'path'], newPath);
  //     doc.set([anchor.id, coor, 'offset'], newOffset + anchor.offset - offset);
  //   }
  // });
  // // check all anchors after that if they have collapsed and remove the annotation in that case
  // forEach(uniq(containerAnnoIds), function(id) {
  //   var anno = doc.get(id);
  //   var annoSel = anno.getSelection();
  //   if(annoSel.isCollapsed()) {
  //     // console.log("...deleting container annotation because it has collapsed" + id);
  //     doc.delete(id);
  //   }
  // });
}

/*
 @param {model/Document} tx
 @param {model/PropertyAnnotation} args.anno annotation which should be expanded
 @param {model/Selection}  args.selection selection to which to expand
*/
function truncateAnnotation (tx, anno, sel) {
  if (!sel || !sel._isSelection) throw new Error('Argument "selection" is required.')
  if (!anno || !anno.isAnnotation()) throw new Error('Argument "anno" is required and must be an annotation.')
  const annoSel = anno.getSelection();
  const newAnnoSel = annoSel.truncateWith(sel);
  anno._updateRange(tx, newAnnoSel);
  return anno
}

/*
 @param {model/Document} tx
 @param {model/PropertyAnnotation} args.anno annotation which should be expanded
 @param {model/Selection}  args.selection selection to which to expand
*/
function expandAnnotation (tx, anno, sel) {
  if (!sel || !sel._isSelection) throw new Error('Argument "selection" is required.')
  if (!anno || !anno.isAnnotation()) throw new Error('Argument "anno" is required and must be an annotation.')
  const annoSel = anno.getSelection();
  const newAnnoSel = annoSel.expand(sel);
  anno._updateRange(tx, newAnnoSel);
  return anno
}

/*
 @param {model/Document} tx
 @param {model/PropertyAnnotation[]} args.annos annotations which should be fused
*/
function fuseAnnotation (tx, annos) {
  if (!isArray(annos) || annos.length < 2) {
    throw new Error('fuseAnnotation(): at least two annotations are necessary.')
  }
  let sel, annoType;
  annos.forEach(function (anno, idx) {
    if (idx === 0) {
      sel = anno.getSelection();
      annoType = anno.type;
    } else {
      if (anno.type !== annoType) {
        throw new Error('fuseAnnotation(): all annotations must be of the same type.')
      }
      sel = sel.expand(anno.getSelection());
    }
  });
  // expand the first and delete the others
  for (var i = 1; i < annos.length; i++) {
    tx.delete(annos[i].id);
  }
  expandAnnotation(tx, annos[0], sel);
  tx.setSelection(sel);
}

class NodeIndex {
  /*
    Check if a node should be indexed.

    Override this in subclasses to achieve a custom behavior.

    @param {Node}
    @returns {Boolean} true if the given node should be added to the index.
   */
  select (node) {
    throw new Error('This method is abstract.')
  }

  clear () {
    throw new Error('This method is abstract')
  }

  /**
    Called when a node has been created.

    @param {Node} node
   */
  create (node) {
    throw new Error('This method is abstract.')
  }

  /**
    Called when a node has been deleted.

    @param {model/data/Node} node
   */
  delete (node) {
    throw new Error('This method is abstract.')
  }

  set (node, path, newValue, oldValue) {
    this.update(node, path, newValue, oldValue);
  }

  /**
    Called when a property has been updated.

    @private
    @param {Node} node
   */
  update (node, path, newValue, oldValue) {
    throw new Error('This method is abstract.')
  }

  /**
    Reset the index using a Data instance.

    @private
   */
  reset (data) {
    this.clear();
    this._initialize(data);
  }

  /**
    Clone this index.

    @return A cloned NodeIndex.
   */
  clone () {
    const NodeIndexClass = this.constructor;
    const clone = new NodeIndexClass();
    return clone
  }

  _initialize (data) {
    for (const node of data.getNodes().values()) {
      if (this.select(node)) {
        this.create(node);
      }
    }
  }

  static create (prototype) {
    const index = Object.assign(new NodeIndex(), prototype);
    index.clone = function () {
      return NodeIndex.create(prototype)
    };
    return index
  }

  static filterByType (type) {
    return function (node) {
      return node.isInstanceOf(type)
    }
  }
}

class DocumentIndex extends NodeIndex {}

/**
  For a given selection get all property annotations

  @param {Document} doc
  @param {Selection} sel
  @return {PropertyAnnotation[]} An array of property annotations.
          Returns an empty array when selection is a container selection.
*/
function getPropertyAnnotationsForSelection (doc, sel, options) {
  options = options || {};
  if (!sel.isPropertySelection()) {
    return []
  }
  const path = sel.getPath();
  let annotations = doc.getIndex('annotations').get(path, sel.start.offset, sel.end.offset);
  if (options.type) {
    annotations = filter(annotations, DocumentIndex.filterByType(options.type));
  }
  return annotations
}

/**
  For a given selection get all container annotations

  @param {Document} doc
  @param {Selection} sel
  @param {String} containerPath
  @param {String} options.type provides only annotations of that type
  @return {Array} An array of container annotations
*/
function getContainerAnnotationsForSelection (doc, sel, containerPath, options) {
  // ATTENTION: looking for container annotations is not as efficient as property
  // selections, as we do not have an index that has notion of the spatial extend
  // of an annotation. Opposed to that, common annotations are bound
  // to properties which make it easy to lookup.
  /* istanbul ignore next */
  if (!containerPath) {
    throw new Error("'containerPath' is required.")
  }
  options = options || {};
  const index = doc.getIndex('container-annotations');
  let annotations = [];
  if (index) {
    annotations = index.get(containerPath, options.type);
    annotations = filter(annotations, function (anno) {
      return sel.overlaps(anno.getSelection())
    });
  }
  return annotations
}

/**
  For a given selection, get the corresponding text string

  @param {Document} doc
  @param {Selection} sel
  @return {string} text enclosed by the annotation
*/
function getTextForSelection (doc, sel) {
  if (!sel || sel.isNull()) {
    return ''
  } else if (sel.isPropertySelection()) {
    const text = doc.get(sel.start.path);
    return text.substring(sel.start.offset, sel.end.offset)
  } else if (sel.isContainerSelection()) {
    const result = [];
    const nodeIds = getNodeIdsCoveredByContainerSelection(doc, sel);
    const L = nodeIds.length;
    for (let i = 0; i < L; i++) {
      const id = nodeIds[i];
      const node = doc.get(id);
      if (node.isText()) {
        let text = node.getText();
        if (i === L - 1) {
          text = text.slice(0, sel.end.offset);
        }
        if (i === 0) {
          text = text.slice(sel.start.offset);
        }
        result.push(text);
      }
    }
    return result.join('\n')
  }
}

function getMarkersForSelection (doc, sel) {
  // only PropertySelections are supported right now
  if (!sel || !sel.isPropertySelection()) return []
  const path = sel.getPath();
  // markers are stored as one hash for each path, grouped by marker key
  const markers = doc.getIndex('markers').get(path);
  const filtered = filter(markers, function (m) {
    return m.containsSelection(sel)
  });
  return filtered
}

/*
  Deletes a node and its children and attached annotations
  and removes it from a given container
*/
function deepDeleteNode (doc, node) {
  /* istanbul ignore next */
  if (!node) {
    console.warn('Invalid arguments');
    return
  }
  if (isString(node)) {
    node = doc.get(node);
  }
  // TODO: bring back support for container annotations
  if (node.isText()) {
    // remove all associated annotations
    const annos = doc.getIndex('annotations').get(node.id);
    for (let i = 0; i < annos.length; i++) {
      doc.delete(annos[i].id);
    }
  }
  const nodeSchema = node.getSchema();
  // remove all references to this node
  removeReferences(doc, node);

  // remove all children
  // Note: correct order of deletion is tricky here.
  // 1. annos attached to text properties
  // 2. the node itself
  // 3. nodes that are referenced via owned properties
  for (const prop of nodeSchema) {
    if (prop.isText()) {
      const annos = doc.getAnnotations([node.id, prop.name]);
      for (const anno of annos) {
        deepDeleteNode(doc, anno);
      }
    }
  }
  doc.delete(node.id);
  // Recursive deletion of owned nodes
  // 1. delete all 'owned' references to child nodes
  // 2. delete all annos belonging to text properties
  for (const prop of nodeSchema) {
    if (prop.isOwned()) {
      const value = node.get(prop.name);
      if (prop.isArray()) {
        let ids = value;
        if (ids.length > 0) {
          // property can be a matrix
          if (isArray(ids[0])) ids = flattenOften(ids, 2);
          ids.forEach((id) => {
            deepDeleteNode(doc, doc.get(id));
          });
        }
      } else {
        deepDeleteNode(doc, doc.get(value));
      }
    }
  }
}

function removeReferences (doc, node) {
  const relIndex = doc.getIndex('relationships');
  if (!relIndex) {
    console.warning('Can not remove references without out relationships index');
    return
  }
  const nodeId = node.id;
  const refererIds = relIndex.get(nodeId);
  for (const id of refererIds) {
    const referer = doc.get(id);
    const relProps = referer.getSchema().getRelationshipProperties();
    for (const prop of relProps) {
      const propName = prop.name;
      if (prop.isArray()) {
        const ids = referer.get(propName);
        const pos = ids.indexOf(nodeId);
        if (pos >= 0) {
          doc.update([referer.id, propName], { type: 'delete', pos });
        }
      } else {
        const id = referer.get(propName);
        if (id === nodeId) {
          doc.set([referer.id, propName], null);
        }
      }
    }
  }
}

/*
  Creates a 'deep' JSON copy of a node returning an array of JSON objects
  that can be used to create the object tree owned by the given root node.

  @param {DocumentNode} node
*/
function copyNode (node) {
  const nodes = [];
  // using schema reflection to determine whether to do a 'deep' copy or just shallow
  const doc = node.getDocument();
  const nodeSchema = node.getSchema();
  for (const prop of nodeSchema) {
    // ATM we do a cascaded copy if the property has type 'id', ['array', 'id'] and is owned by the node,
    if (prop.isReference() && prop.isOwned()) {
      const val = node.get(prop.name);
      nodes.push(_copyChildren(val));
    }
  }
  nodes.push(node.toJSON());
  const annotationIndex = node.getDocument().getIndex('annotations');
  const annotations = annotationIndex.get([node.id]);
  forEach(annotations, function (anno) {
    nodes.push(anno.toJSON());
  });
  const result = flatten(nodes).filter(Boolean);
  // console.log('copyNode()', node, result)
  return result

  function _copyChildren (val) {
    if (!val) return null
    if (isArray(val)) {
      return flatten(val.map(_copyChildren))
    } else {
      const id = val;
      if (!id) return null
      const child = doc.get(id);
      if (!child) return
      return copyNode(child)
    }
  }
}

/*
  <-->: anno
  |--|: area of change
  I: <--> |--|     :   nothing
  II: |--| <-->    :   move both by total span
  III: |-<-->-|    :   delete anno
  IV: |-<-|->      :   move start by diff to start, and end by total span
  V: <-|->-|       :   move end by diff to start
  VI: <-|--|->     :   move end by total span
*/
function deleteTextRange (doc, start, end) {
  if (!start) {
    start = {
      path: end.path,
      offset: 0
    };
  }
  const path = start.path;
  const text = doc.get(path);
  if (!end) {
    end = {
      path: start.path,
      offset: text.length
    };
  }
  /* istanbul ignore next */
  if (!isArrayEqual(start.path, end.path)) {
    throw new Error('start and end must be on one property')
  }
  const startOffset = start.offset;
  if (startOffset < 0) throw new Error('start offset must be >= 0')
  const endOffset = end.offset;
  if (endOffset > text.length) throw new Error('end offset must be smaller than the text length')

  doc.update(path, { type: 'delete', start: startOffset, end: endOffset });
  // update annotations
  const annos = doc.getAnnotations(path);
  annos.forEach(function (anno) {
    const annoStart = anno.start.offset;
    const annoEnd = anno.end.offset;
    // I anno is before
    if (annoEnd <= startOffset) ; else if (annoStart >= endOffset) {
      doc.update([anno.id, 'start'], { type: 'shift', value: startOffset - endOffset });
      doc.update([anno.id, 'end'], { type: 'shift', value: startOffset - endOffset });
    // III anno is deleted
    } else if (annoStart >= startOffset && annoEnd <= endOffset) {
      doc.delete(anno.id);
    // IV anno.start between and anno.end after
    } else if (annoStart >= startOffset && annoEnd >= endOffset) {
      if (annoStart > startOffset) {
        doc.update([anno.id, 'start'], { type: 'shift', value: startOffset - annoStart });
      }
      doc.update([anno.id, 'end'], { type: 'shift', value: startOffset - endOffset });
    // V anno.start before and anno.end between
    } else if (annoStart <= startOffset && annoEnd <= endOffset) {
      doc.update([anno.id, 'end'], { type: 'shift', value: startOffset - annoEnd });
    // VI anno.start before and anno.end after
    } else if (annoStart < startOffset && annoEnd >= endOffset) {
      doc.update([anno.id, 'end'], { type: 'shift', value: startOffset - endOffset });
    } else {
      console.warn('TODO: handle annotation update case.');
    }
  });
}

function deleteListRange (doc, list, start, end, options = {}) {
  // HACK: resolving the right node
  // TODO: we should not do this, instead fix the calling code
  if (doc !== list.getDocument()) {
    list = doc.get(list.id);
  }
  let startItem, endItem;
  if (!start) {
    startItem = list.getItemAt(0);
    start = {
      path: startItem.getPath(),
      offset: 0
    };
  } else {
    startItem = doc.get(start.path[0]);
  }
  if (!end) {
    endItem = list.getLastItem();
    end = {
      path: endItem.getPath(),
      offset: endItem.getLength()
    };
  } else {
    endItem = doc.get(end.path[0]);
  }
  let startPos = list.getItemPosition(startItem);
  let endPos = list.getItemPosition(endItem);
  // range within the same item
  if (startPos === endPos) {
    deleteTextRange(doc, start, end);
    return
  }
  // normalize the range if it is 'reverse'
  if (startPos > endPos) {
    [start, end] = [end, start];
    [startPos, endPos] = [endPos, startPos];
    [startItem, endItem] = [endItem, startItem];
  }
  const firstEntirelySelected = isEntirelySelected(doc, startItem, start, null);
  const lastEntirelySelected = isEntirelySelected(doc, endItem, null, end);

  // delete or truncate last node
  if (lastEntirelySelected) {
    list.removeItemAt(endPos);
    deepDeleteNode(doc, endItem);
  } else {
    deleteTextRange(doc, null, end);
  }

  // delete inner nodes
  const items = list.getItems();
  for (let i = endPos - 1; i > startPos; i--) {
    const item = items[i];
    list.removeItemAt(i);
    deepDeleteNode(doc, item);
  }

  // delete or truncate the first node
  if (firstEntirelySelected) {
    // NOTE: this does not work well, because then
    // the item where the selection remains would have gone
    // But when used by copySelection to truncate head and tail
    // we want this.
    if (options.deleteEmptyFirstItem) {
      list.removeItemAt(startPos);
      deepDeleteNode(doc, startItem);
    } else {
      deleteTextRange(doc, start, null);
    }
  } else {
    deleteTextRange(doc, start, null);
  }

  if (!firstEntirelySelected && !lastEntirelySelected) {
    mergeListItems(doc, list.id, startPos);
  }
}

function setText (doc, textPath, text) {
  const oldText = doc.get(textPath);
  if (oldText.length > 0) {
    deleteTextRange(doc, { path: textPath, offset: 0 });
  }
  doc.update(textPath, { type: 'insert', start: 0, text });
  return this
}

function mergeListItems (doc, listId, itemPos) {
  // HACK: make sure that the list is really from the doc
  const list = doc.get(listId);
  const targetItem = list.getItemAt(itemPos);
  const targetPath = targetItem.getPath();
  const targetLength = targetItem.getLength();
  const sourceItem = list.getItemAt(itemPos + 1);
  const sourcePath = sourceItem.getPath();
  // hide source
  list.removeItemAt(itemPos + 1);
  // append the text
  doc.update(targetPath, { type: 'insert', start: targetLength, text: sourceItem.getText() });
  // transfer annotations
  annotationHelpers.transferAnnotations(doc, sourcePath, 0, targetPath, targetLength);
  deepDeleteNode(doc, sourceItem);
}

// used by transforms copy, paste
const SNIPPET_ID = 'snippet';
const TEXT_SNIPPET_ID = 'text-snippet';

function insertAt (doc, containerPath, pos, id) {
  doc.update(containerPath, { type: 'insert', pos, value: id });
}

function append (doc, containerPath, id) {
  insertAt(doc, containerPath, doc.get(containerPath).length, id);
}

/**
 * Removes an item from a CHILDREN or CONTAINER property.
 *
 * @param {Document} doc
 * @param {string[]} containerPath
 * @param {number} pos
 * @returns the id of the removed child
 */
function removeAt (doc, containerPath, pos) {
  const op = doc.update(containerPath, { type: 'delete', pos });
  if (op && op.diff) {
    return op.diff.val
  }
}

function removeFromCollection (doc, containerPath, id) {
  const index = doc.get(containerPath).indexOf(id);
  if (index >= 0) {
    return removeAt(doc, containerPath, index)
  }
  return false
}

function getNodesForIds (doc, ids) {
  return ids.map(id => doc.get(id, 'strict'))
}

function getNodeAt (doc, containerPath, nodePos) {
  const ids = doc.get(containerPath);
  return doc.get(ids[nodePos])
}

function getPreviousNode (doc, containerPath, nodePos) {
  if (nodePos > 0) {
    return getNodeAt(doc, containerPath, nodePos - 1)
  }
}

function getNextNode (doc, containerPath, nodePos) {
  return getNodeAt(doc, containerPath, nodePos + 1)
}

// TODO: we could optimize this by 'compiling' which properties are 'parent' props
// i.e. TEXT, CHILD, and CHILDREN
function getChildren (node) {
  const doc = node.getDocument();
  const id = node.id;
  const schema = node.getSchema();
  let result = [];
  for (const p of schema) {
    const name = p.name;
    if (p.isText()) {
      const annos = doc.getAnnotations([id, name]);
      forEach(annos, a => result.push(a));
    } else if (p.isReference() && p.isOwned()) {
      const val = node.get(name);
      if (val) {
        if (p.isArray()) {
          result = result.concat(val.map(id => doc.get(id)));
        } else {
          result.push(doc.get(val));
        }
      }
    }
  }
  return result
}

function getParent (node) {
  // TODO: maybe we should implement ParentNodeHook for annotations
  if (node._isAnnotation) {
    const anno = node;
    const nodeId = anno.start.path[0];
    return anno.getDocument().get(nodeId)
  } else {
    return node.getParent()
  }
}

/**
 * Create a node from JSON.
 *
 * The given JSON allows to initalize children with nested records.
 * Every record must have 'type' and all required fields set.
 *
 * @param {Document} doc
 * @param {object} data a JSON object
 *
 * @example
 * ```
 * documentHelpers.createNodeFromJson(doc, {
 *    "type": "journal-article-ref",
 *    "title": "VivosX, a disulfide crosslinking method to capture site-specific, protein-protein interactions in yeast and human cells",
 *    "containerTitle": "eLife",
 *    "volume": "7",
 *    "doi": "10.7554/eLife.36654",
 *    "year": "2018",
 *    "month": "08",
 *    "day": "09",
 *    "uri": "https://elifesciences.org/articles/36654",
 *    "authors": [
 *      {
 *       "type": "ref-contrib",
 *       "name": "Mohan",
 *       "givenNames": "Chitra"
 *      }
 *    ],
 * })
 * ```
 */
function createNodeFromJson (doc, data) {
  if (!data) throw new Error("'data' is mandatory")
  if (!data.type) throw new Error("'data.type' is mandatory")
  if (!isFunction(doc.create)) throw new Error('First argument must be document or tx')
  const type = data.type;
  const nodeSchema = doc.getSchema().getNodeSchema(type);
  const nodeData = {
    type,
    id: data.id
  };
  for (const p of nodeSchema) {
    const name = p.name;
    if (!hasOwnProperty(data, name)) continue
    const val = data[name];
    if (p.isReference()) {
      if (p.isArray()) {
        nodeData[name] = val.map(childData => createNodeFromJson(doc, childData).id);
      } else {
        const child = createNodeFromJson(doc, val);
        nodeData[name] = child.id;
      }
    } else {
      nodeData[p.name] = val;
    }
  }
  return doc.create(nodeData)
}

/*
  Index for Annotations and InlineNodes.

  @example
  Lets us look up existing annotations by path and type

  To get all annotations for the content of a text node

    var aIndex = doc.annotationIndex
    aIndex.get(["text_1", "content"])

  You can also scope for a specific range

    aIndex.get(["text_1", "content"], 23, 45)
*/
class AnnotationIndex extends DocumentIndex {
  constructor () {
    super();

    this.byPath = new TreeIndex();
    this.byType = new TreeIndex();
  }

  select (node) {
    return node.isPropertyAnnotation() || node.isInlineNode()
  }

  clear () {
    this.byPath.clear();
    this.byType.clear();
  }

  // TODO: use object interface? so we can combine filters (path and type)
  get (path, start, end, type) {
    let annotations;
    if (isString(path) || path.length === 1) {
      annotations = this.byPath.getAll(path) || {};
    } else {
      annotations = this.byPath.get(path);
    }
    annotations = map$1(annotations);
    if (isNumber(start)) {
      annotations = filter(annotations, AnnotationIndex.filterByRange(start, end));
    }
    if (type) {
      annotations = filter(annotations, DocumentIndex.filterByType(type));
    }
    return annotations
  }

  create (anno) {
    const path = anno.start.path;
    this.byType.set([anno.type, anno.id], anno);
    if (path && path.length > 0) {
      this.byPath.set(anno.start.path.concat([anno.id]), anno);
    }
  }

  delete (anno) {
    this._delete(anno.type, anno.id, anno.start.path);
  }

  _delete (type, id, path) {
    this.byType.delete([type, id]);
    if (path && path.length > 0) {
      this.byPath.delete(path.concat([id]));
    }
  }

  update (node, path, newValue, oldValue) {
    // TODO: this should better be a coordinate op
    if (this.select(node) && path[1] === 'start' && path[2] === 'path') {
      this._delete(node.type, node.id, oldValue);
      this.create(node);
    }
  }

  static filterByRange (start, end) {
    return function (anno) {
      var aStart = anno.start.offset;
      var aEnd = anno.end.offset;
      var overlap = (aEnd >= start);
      // Note: it is allowed to omit the end part
      if (isNumber(end)) {
        overlap = overlap && (aStart <= end);
      }
      return overlap
    }
  }
}

const OPEN = 1;
const CLOSE = -1;
const ANCHOR = -2;

class Fragmenter {
  onText (context, text, fragment) {}

  onOpen (fragment, parentContext) { return {} }

  onClose (fragment, context, parentContext) {}

  start (rootContext, text, annotations) {
    if (!isString(text)) {
      throw new Error("Illegal argument: 'text' must be a String, but was " + text)
    }
    const state = this._init(rootContext, text, annotations);
    const B = state.boundaries;
    const S = state.stack;
    const TOP = () => S[S.length - 1];
    let currentPos = 0;
    let __runs = 0;
    const MAX_RUNS = B.length * 2;
    while (B.length > 0) {
      __runs++;
      if (__runs > MAX_RUNS) throw new Error('FIXME: infinity loop in Fragmenter implementation')
      const b = B.shift();
      const topContext = TOP().context;
      if (b.offset > currentPos) {
        const textFragment = text.slice(currentPos, b.offset);
        this.onText(topContext, textFragment);
        currentPos = b.offset;
      }
      switch (b.type) {
        case ANCHOR: {
          const parentContext = topContext;
          const anchorContext = this.onOpen(b, parentContext);
          this._close(b, anchorContext, parentContext);
          break
        }
        case CLOSE: {
          // ATTENTION: we have to make sure that closers are sorted correctly
          const { context, entry } = TOP();
          if (entry.node !== b.node) {
            B.unshift(b);
            this._fixOrderOfClosers(S, B, 0);
            // restart this iteration
            continue
          }
          S.pop();
          const parentContext = TOP().context;
          this._close(b, context, parentContext);
          break
        }
        case OPEN: {
          const a = TOP().entry;
          if (!a || a.endOffset >= b.endOffset) {
            b.stackLevel = S.length;
            const context = this.onOpen(b, topContext);
            S.push({ context, entry: b });
          } else {
            // splitting annotation b
            if (b.weight <= a.weight) {
              b.stackLevel = S.length;
              // new closer at the splitting pos
              const closer = {
                type: CLOSE,
                offset: a.endOffset,
                node: b.node,
                opener: b
              };
              // and re-opening with fragment counter increased
              const opener = {
                type: OPEN,
                offset: a.endOffset,
                node: b.node,
                fragmentCount: b.fragmentCount + 1,
                endOffset: b.endOffset,
                weight: b.weight,
                // attaching the original closer
                closer: b.closer
              };
              // and vice-versa
              b.closer.opener = opener;
              // and fixing b for sake of consistency
              b.closer = closer;
              b.endOffset = a.endOffset;
              this._insertBoundary(B, closer);
              this._insertBoundary(B, opener);
              const context = this.onOpen(b, topContext);
              S.push({ context, entry: b });
            // splitting annotation a
            } else {
              // In this case we put boundary back
              // and instead insert boundaries splitting annotation a
              B.unshift(b);
              // new closer at the splitting pos
              const closer = {
                type: CLOSE,
                offset: b.offset,
                node: a.node,
                opener: a
              };
              // and re-opening with fragment counter increased
              const opener = {
                type: OPEN,
                offset: b.offset,
                node: a.node,
                fragmentCount: a.fragmentCount + 1,
                endOffset: a.endOffset,
                weight: a.weight,
                // attaching the original closer
                closer: a.closer
              };
              // .. and vice-versa
              a.closer.opener = opener;
              // and fixing b for sake of consistency
              a.closer = closer;
              a.endOffset = b.offset;
              this._insertBoundary(B, closer);
              this._insertBoundary(B, opener);
              continue
            }
          }
          break
        }
          //
      }
    }
    // Finally append a trailing text node
    const trailingText = text.substring(currentPos);
    if (trailingText) {
      this.onText(rootContext, trailingText);
    }
  }

  _init (rootContext, text, annotations) {
    const boundaries = [];
    annotations.forEach(a => {
      if (a.isAnchor() || a.start.offset === a.end.offset) {
        boundaries.push({
          type: ANCHOR,
          offset: a.start.offset,
          endOffset: a.start.offset,
          length: 0,
          node: a
        });
      } else {
        const opener = {
          type: OPEN,
          offset: a.start.offset,
          node: a,
          fragmentCount: 0,
          endOffset: a.end.offset,
          weight: a._getFragmentWeight()
        };
        const closer = {
          type: CLOSE,
          offset: a.end.offset,
          node: a,
          opener
        };
        opener.closer = closer;
        boundaries.push(opener);
        boundaries.push(closer);
      }
    });
    boundaries.sort(this._compareBoundaries.bind(this));
    const state = {
      stack: [{ context: rootContext, entry: null }],
      boundaries
    };
    return state
  }

  _close (fragment, context, parentContext) {
    if (fragment.type === CLOSE) {
      fragment = fragment.opener;
      fragment.length = fragment.endOffset - fragment.offset;
    }
    this.onClose(fragment, context, parentContext);
  }

  _compareBoundaries (a, b) {
    if (a.offset < b.offset) return -1
    if (a.offset > b.offset) return 1
    if (a.type < b.type) return -1
    if (a.type > b.type) return 1
    if (a.type === OPEN) {
      if (a.endOffset > b.endOffset) return -1
      if (a.endOffset < b.endOffset) return 1
      if (a.weight > b.weight) return -1
      if (a.weight < b.weight) return 1
      if (a.stackLevel && b.stackLevel) {
        return a.stackLevel - b.stackLevel
      }
      return 0
    } else if (a.type === CLOSE) {
      return -this._compareBoundaries(a.opener, b.opener)
    } else {
      return 0
    }
  }

  _insertBoundary (B, b, startIndex = 0) {
    for (let idx = startIndex, l = B.length; idx < l; idx++) {
      if (this._compareBoundaries(b, B[idx]) === -1) {
        B.splice(idx, 0, b);
        return idx
      }
    }
    // if not inserted before, append
    B.push(b);
    return B.length - 1
  }

  // Note: due to fragmentation of overlapping nodes, the original
  // order of closers might become invalid
  _fixOrderOfClosers (S, B, startIndex) {
    const activeOpeners = {};
    const first = B[startIndex];
    const closers = [first];
    for (let idx = startIndex + 1, l = B.length; idx < l; idx++) {
      const b = B[startIndex + idx];
      if (b.type !== CLOSE || b.offset !== first.offset) break
      closers.push(b);
    }
    for (let idx = S.length - 1; idx >= 1; idx--) {
      const opener = S[idx].entry;
      activeOpeners[opener.node.id] = opener;
    }
    for (let idx = 0, l = closers.length; idx < l; idx++) {
      const closer = closers[idx];
      const opener = activeOpeners[closer.node.id];
      if (!opener) {
        throw new Error('Fragmenter Error: there is no opener for closer')
      }
      closer.opener = opener;
    }
    closers.sort(this._compareBoundaries.bind(this));

    const _checkClosers = () => {
      for (let idx = 0; idx < closers.length; idx++) {
        if (S[S.length - 1 - idx].entry.node !== closers[idx].node) return false
      }
      return true
    };
    console.assert(_checkClosers(), 'Fragmenter: closers should be alligned with the current stack of elements');

    B.splice(startIndex, closers.length, ...closers);
  }

  // Fragment weight values that are used to influence how fragments
  // get stacked when they are overlapping
  static get MUST_NOT_SPLIT () { return Number.MAX_VALUE }
  static get SHOULD_NOT_SPLIT () { return 1000 }
  static get NORMAL () { return 100 }
  static get ALWAYS_ON_TOP () { return 0 }
}

function AnnotationMixin (DocumentNode) {
  class AbstractAnnotation extends DocumentNode {
    constructor (doc, props) {
      super(doc, _normalizedProps(props));

      // making sure that coordinates are Coordinate instances
      // '_set' does not trigger an operation
      this._set('start', new Coordinate(this.start));
      this._set('end', new Coordinate(this.end));
    }

    /* istanbul ignore start */

    get path () {
      console.warn('DEPRECATED: use annotation.start.path instead');
      return this.start.path
    }

    getPath () {
      return this.start.path
    }

    get startPath () {
      console.warn('DEPRECATED: use annotation.start.path instead.');
      return this.start.path
    }

    set startPath (path) {
      console.warn('DEPRECATED: use annotation.start.path instead.');
      this.start.path = path;
    }

    get startOffset () {
      console.warn('DEPRECATED: use annotation.start.offset instead.');
      return this.start.offset
    }

    set startOffset (offset) {
      console.warn('DEPRECATED: use annotation.start.offset instead.');
      this.start.offset = offset;
    }

    get endPath () {
      console.warn('DEPRECATED: use annotation.end.path instead.');
      return this.end.path
    }

    set endPath (path) {
      console.warn('DEPRECATED: use annotation.end.path instead.');
      this.end.path = path;
    }

    get endOffset () {
      console.warn('DEPRECATED: use annotation.end.offset instead.');
      return this.end.offset
    }

    set endOffset (offset) {
      console.warn('DEPRECATED: use annotation.end.offset instead.');
      this.end.offset = offset;
    }

    /* istanbul ignore end */

    /**
      Get the plain text spanned by this annotation.

      @return {String}
    */
    getText () {
      var doc = this.getDocument();
      if (!doc) {
        console.warn('Trying to use a Annotation which is not attached to the document.');
        return ''
      }
      return getTextForSelection(doc, this.getSelection())
    }

    isAnnotation () {
      return true
    }

    /**
      Determines if an annotation can be split e.g., when breaking a node.

      In these cases, a new annotation will be created attached to the created node.

      For certain annotation types,you may want to the annotation truncated
      rather than split, where you need to override this method returning `false`.
    */
    canSplit () {
      return true
    }

    /**
      Provides a selection which has the same range as this annotation.

      @return {model/ContainerSelection}
    */
    getSelection () {
      const doc = this.getDocument();
      // Guard: when this is called while this node has been detached already.
      if (!doc) {
        console.warn('Trying to use a ContainerAnnotation which is not attached to the document.');
        return Selection.nullSelection()
      }
      if (this.isContainerAnnotation()) {
        return doc.createSelection({
          type: 'container',
          containerPath: this.containerPath,
          startPath: this.start.path,
          startOffset: this.start.offset,
          endPath: this.end.path,
          endOffset: this.end.offset
        })
      } else {
        return this.getDocument().createSelection({
          type: 'property',
          path: this.start.path,
          startOffset: this.start.offset,
          endOffset: this.end.offset
        })
      }
    }

    _updateRange (tx, sel) {
      if (sel.isContainerSelection()) {
        // TODO: use coordinate ops
        if (!isEqual(this.start.path, sel.start.path)) {
          tx.set([this.id, 'start', 'path'], sel.start.path);
        }
        if (this.start.offset !== sel.start.offset) {
          tx.set([this.id, 'start', 'offset'], sel.start.offset);
        }
        if (!isEqual(this.end.path, sel.end.path)) {
          tx.set([this.id, 'end', 'path'], sel.end.path);
        }
        if (this.end.offset !== sel.end.offset) {
          tx.set([this.id, 'end', 'offset'], sel.end.offset);
        }
      } else if (sel.isPropertySelection()) {
        if (!isArrayEqual(this.start.path, sel.start.path)) {
          tx.set([this.id, 'path'], sel.start.path);
        }
        // TODO: these should be Coordinate ops
        if (this.start.offset !== sel.start.offset) {
          tx.set([this.id, 'start', 'offset'], sel.start.offset);
        }
        if (this.end.offset !== sel.end.offset) {
          tx.set([this.id, 'end', 'offset'], sel.end.offset);
        }
      } else {
        throw new Error('Invalid selection.')
      }
    }

    mustNotBeSplit () { return false }

    shouldNotBeSplit () { return false }

    _getFragmentWeight () {
      if (this.mustNotBeSplit()) return Fragmenter.MUST_NOT_SPLIT
      if (this.shouldNotBeSplit()) return Fragmenter.SHOULD_NOT_SPLIT
      if (this.getFragmentWeight) return this.getFragmentWeight()
      return Fragmenter.NORMAL
    }

    static isAnnotation () { return true }

    define () {
      return {
        type: '@annotation',
        start: { type: 'coordinate', default: { path: [], offset: 0 } },
        end: { type: 'coordinate', default: { path: [], offset: 0 } }
      }
    }
  }

  return AbstractAnnotation
}

function _normalizedProps (props) {
  // in the beginning we used startPath + endPath etc.
  // now we use coodinates start and end where each coordinate has path + offset
  if (!_isDefined(props.start)) {
    /*
      Instead of
        { path: [...], startOffset: 0, endOffset: 10 }
      use
        { start: { path: [], offset: 0 }, end: { path: [], offset: 10 } }
    */
    // TODO: it would be good if we could get rid of the normalization on the long run
    // console.warn('DEPRECATED: create Annotation with "start" and "end" coordinate instead.')
    let start, end;
    if (_isDefined(props.startPath) || _isDefined(props.path)) {
      start = {
        path: props.startPath || props.path,
        offset: props.startOffset
      };
    }
    if (_isDefined(props.endPath) || _isDefined(props.endOffset)) {
      end = {
        path: props.endPath || props.path,
        offset: props.endOffset
      };
    }
    if (start && !end) {
      end = cloneDeep(start);
    }
    if (start) {
      props = Object.assign({}, props);
      delete props.path;
      delete props.startPath;
      delete props.endPath;
      delete props.startOffset;
      delete props.endOffset;
      props.start = start;
      props.end = end;
    }
  } else if (_isDefined(props.end) && !props.end.path) {
    props.end.path = props.start.path;
  }
  return props
}

/*
  Internal helper class for schema reflection.
*/
class NodeProperty {
  constructor (name, definition) {
    this.name = name;
    this.definition = definition;

    Object.freeze(this);
    Object.freeze(definition);
  }

  isArray () {
    return isArray(this.definition.type)
  }

  isReference () {
    if (this.isArray()) {
      return last(this.definition.type) === 'id'
    } else {
      return this.definition.type === 'id'
    }
  }

  isText () {
    return this.definition.reflectionType === 'text'
  }

  isContainer () {
    return Boolean(this.definition._isContainer)
  }

  isOwned () {
    return Boolean(this.definition.owned)
  }

  isOptional () {
    return this.definition.optional || this.hasDefault()
  }

  isNotNull () {
    return Boolean(this.definition.notNull)
  }

  hasDefault () {
    return _isDefined(this.definition.default)
  }

  getDefault () {
    return this.definition.default
  }

  createDefaultValue () {
    if (isArray(this.definition.type)) {
      return []
    }
    switch (this.definition.type) {
      case 'boolean':
        return false
      case 'string':
        return ''
      case 'number':
        return -1
      case 'object':
        return {}
      case 'coordinate':
        return new Coordinate([], 0)
      default:
        return null
    }
  }

  get type () {
    return this.definition.type
  }

  get reflectionType () {
    return this.definition.reflectionType || this.definition.type
  }

  get targetTypes () {
    return this.definition.targetTypes
  }

  get defaultTextType () {
    return this.definition.defaultTextType
  }

  get values () {
    return this.definition.values
  }
}

class NodeSchema {
  constructor (type, properties, superTypes) {
    this.type = type;
    this._properties = properties;
    this._superTypes = superTypes;
    // Note: owned props are properties of type 'child' or 'chidren'
    // whereas properties of type 'one' or 'many' are not owned.
    this._childProps = new Map();
    this._relationshipProps = new Map();
    for (const prop of properties.values()) {
      if (prop.isReference()) {
        if (prop.isOwned()) {
          this._childProps.set(prop.name, prop);
        } else {
          this._relationshipProps.set(prop.name, prop);
        }
      }
    }
  }

  getProperty (name) {
    return this._properties.get(name)
  }

  hasChildProperties () {
    return this._childProps.size > 0
  }

  getChildProperties () {
    return this._childProps.values()
  }

  hasRelationshipProperties () {
    return this._relationshipProps.size > 0
  }

  getRelationshipProperties () {
    return this._relationshipProps.values()
  }

  isOwned (name) {
    return this._childProps.has(name)
  }

  isRelationship (name) {
    return this._relationshipProps.has(name)
  }

  getSuperType () {
    return this._superTypes[0]
  }

  getSuperTypes () {
    return this._superTypes.slice()
  }

  [Symbol.iterator] () {
    return this._properties.values()
  }
}

const VALUE_TYPES = new Set(['id', 'string', 'number', 'boolean', 'enum', 'object', 'array', 'coordinate']);

/*
  Base node implementation.

  @prop {String} id an id that is unique within this data
 */
class Node extends EventEmitter {
  /**
    @param {Object} properties
  */
  constructor (...args) {
    super();

    // Note: because the schema is defined lazily
    // this makes sure that the schema is compiled
    const NodeClass = this.constructor;
    NodeClass._ensureSchemaIsCompiled();

    // plain object to store the nodes data
    this._properties = new Map();

    // NOTE: this indirection allows us to implement a overridable initializer
    // For instance, DocumentNode sets the document instance and the props
    this._initialize(...args);
  }

  _initialize (data) {
    const NodeClass = this.constructor;

    const schema = NodeClass.schema;
    for (const property of schema) {
      const name = property.name;
      // check integrity of provided data, such as type correctness,
      // and mandatory properties
      const propIsGiven = (data[name] !== undefined);
      const isOptional = property.isOptional();
      const hasDefault = property.hasDefault();
      if (!isOptional && !propIsGiven) {
        throw new Error('Property ' + name + ' is mandatory for node type ' + this.type)
      }
      if (propIsGiven) {
        this._properties.set(name, _checked(property, data[name]));
      } else if (hasDefault) {
        this._properties.set(name, cloneDeep(_checked(property, property.getDefault())));
      }
    }
  }

  dispose () {
    this._disposed = true;
  }

  isDisposed () {
    return Boolean(this._disposed)
  }

  /**
    Check if the node is of a given type.

    @param {String} typeName
    @returns {Boolean} true if the node has a parent with given type, false otherwise.
  */
  isInstanceOf (typeName) {
    return Node.isInstanceOf(this.constructor, typeName)
  }

  getSchema () {
    return this.constructor.schema
  }

  get schema () {
    return this.getSchema()
  }

  /**
    Get a the list of all polymorphic types.

    @returns {String[]} An array of type names.
   */
  getTypeNames () {
    const NodeClass = this.constructor;
    const typeNames = this.schema.getSuperTypes();
    typeNames.unshift(NodeClass.type);
    return typeNames
  }

  /**
   * Get the type of a property.
   *
   * @param {String} propertyName
   * @returns The property's type.
   */
  getPropertyType (propertyName) {
    return this.constructor.schema.getProperty(propertyName).type
  }

  /**
    Convert node to JSON.

    @returns {Object} JSON representation of node.
   */
  toJSON () {
    var data = {
      type: this.type
    };
    const schema = this.getSchema();
    for (const prop of schema) {
      let val = this._properties.get(prop.name);
      if (prop.isOptional() && val === undefined) continue
      if (isArray(val) || isObject(val)) {
        val = cloneDeep(val);
      }
      data[prop.name] = val;
    }
    return data
  }

  get type () {
    return this.constructor.type
  }

  /**
   * This gets called during schema compilation.
   *
   * Override this method in sub-classes to provide the accord schema specification.
   *
   * > Note: it is not necessary to call super.define() because Node schemas inherit the parent node's schema
   * > per se
   */
  define () {
    return {
      type: '@node',
      id: 'string'
    }
  }

  _set (propName, value) {
    this._properties.set(propName, value);
  }

  set (propName, value) {
    this._set(propName, value);
  }

  get (propName) {
    return this._properties.get(propName)
  }

  /**
    Internal implementation of Node.prototype.isInstanceOf.
    @returns {Boolean}
   */
  static isInstanceOf (NodeClass, typeName) {
    const schema = NodeClass.schema;
    if (!schema) return false
    if (NodeClass.type === typeName) return true
    for (const superType of schema._superTypes) {
      if (superType === typeName) return true
    }
    return false
  }

  get _isNode () { return true }

  static get type () {
    const NodeClass = this;
    return NodeClass.schema.type
  }

  static get schema () {
    const NodeClass = this;
    NodeClass._ensureSchemaIsCompiled();
    return NodeClass.compiledSchema
  }

  static set schema (spec) {
    // Note: while the preferred way of defining a schema is via implementing Node.define()
    // we still leave this here
    this._compileSchema(spec);
  }

  static _ensureSchemaIsCompiled () {
    const NodeClass = this;
    // If the schema has not been set explicitly, derive it from the parent schema
    if (!hasOwnProperty(NodeClass, 'compiledSchema')) {
      NodeClass._compileSchema();
    }
  }

  static _compileSchema (schema) {
    const NodeClass = this;
    if (!schema) {
      // Experimental: I'd like to allow schema definition as prototype method
      // for sake of convenience
      const define = NodeClass.prototype.define;
      schema = define();
    }
    NodeClass.compiledSchema = compileSchema(NodeClass, schema);
  }
}

// ### Internal implementation

function _assign (maps) {
  const result = new Map();
  for (const m of maps) {
    for (const [key, value] of m) {
      if (result.has(key)) result.delete(key);
      result.set(key, value);
    }
  }
  return result
}

function compileSchema (NodeClass, spec) {
  const type = spec.type;
  if (!_isDefined(type)) {
    throw new Error('"type" is required')
  }
  const properties = _compileProperties(spec);
  const allProperties = [properties];
  let ParentNodeClass = _getParentNodeClass(NodeClass);
  while (ParentNodeClass) {
    // ATTENTION: this will actually lead to a recursive compileSchema() call
    // if the parent class schema has not been compiled yet
    const parentSchema = ParentNodeClass.schema;
    allProperties.unshift(parentSchema._properties);
    ParentNodeClass = _getParentNodeClass(ParentNodeClass);
  }
  const superTypes = _getSuperTypes(NodeClass);
  const _schema = new NodeSchema(type, _assign(allProperties), superTypes);

  // define property getter and setters
  for (const prop of _schema) {
    const name = prop.name;
    Object.defineProperty(NodeClass.prototype, name, {
      get () {
        return this.get(name)
      },
      set (val) {
        this.set(name, val);
      },
      enumerable: true,
      configurable: true
    });
  }

  return _schema
}

function _compileProperties (schema) {
  const properties = new Map();
  forEach(schema, function (definition, name) {
    // skip 'type'
    if (name === 'type') return
    if (isString(definition) || isArray(definition)) {
      definition = { type: definition };
    } else {
      definition = cloneDeep(definition);
    }
    definition = _compileDefintion(definition);
    definition.name = name;
    properties.set(name, new NodeProperty(name, definition));
  });
  return properties
}

function _isValueType (t) {
  return VALUE_TYPES.has(t)
}

function _compileDefintion (definition) {
  let result = Object.assign({}, definition);
  const type = definition.type;
  if (isArray(type)) {
    // there are different allowed formats:
    // 1. canonical: ['array', 'id'], ['array', 'some-node']
    // 2. implcit: ['object']
    // 3. multi-type: ['p', 'list']
    const defs = type;
    const lastIdx = defs.length - 1;
    const first = defs[0];
    const last = defs[lastIdx];
    const isCanonical = first === 'array';
    if (isCanonical) {
      result.type = defs.slice();
      // 'semi'-canonical
      if (last !== 'id' && !_isValueType(last)) {
        result.targetTypes = [last];
        result.type[lastIdx] = 'id';
      }
    } else {
      if (defs.length > 1) {
        defs.forEach(t => {
          if (_isValueType(t)) {
            throw new Error('Multi-types must consist of node types.')
          }
        });
        result.type = ['array', 'id'];
        result.targetTypes = defs;
      } else {
        if (_isValueType(first)) {
          result.type = ['array', first];
        } else {
          result.type = ['array', 'id'];
          result.targetTypes = defs;
        }
      }
    }
  } else if (type === 'text') {
    result = {
      type: 'string',
      default: '',
      targetTypes: definition.targetTypes,
      reflectionType: 'text'
    };
  // single reference type
  } else if (type !== 'id' && !_isValueType(type)) {
    result.type = 'id';
    result.targetTypes = [type];
  }

  // wrap the array into a Set
  if (result.targetTypes) {
    result.targetTypes = new Set(result.targetTypes);
  }

  return result
}

function _checked (prop, value) {
  let type;
  const name = prop.name;
  if (prop.isArray()) {
    type = 'array';
  } else {
    type = prop.type;
  }
  if (value === null) {
    if (prop.isNotNull()) {
      throw new Error('Value for property ' + name + ' is null.')
    } else {
      return value
    }
  }
  if (value === undefined) {
    throw new Error('Value for property ' + name + ' is undefined.')
  }
  if ((type === 'string' && !isString(value)) ||
      (type === 'enum' && !isString(value)) ||
      (type === 'boolean' && !isBoolean(value)) ||
      (type === 'number' && !isNumber(value)) ||
      (type === 'array' && !isArray(value)) ||
      (type === 'id' && !isString(value)) ||
      (type === 'object' && !isObject(value))) {
    throw new Error('Illegal value type for property ' + name + ': expected ' + type + ', was ' + (typeof value))
  }
  return value
}

function _getSuperTypes (NodeClass) {
  var typeNames = [];
  let ParentNodeClass = _getParentNodeClass(NodeClass);
  while (ParentNodeClass && ParentNodeClass.type !== '@node') {
    typeNames.push(ParentNodeClass.type);
    ParentNodeClass = _getParentNodeClass(ParentNodeClass);
  }
  return typeNames
}

function _getParentNodeClass (Clazz) {
  var parentProto = Object.getPrototypeOf(Clazz.prototype);
  if (parentProto && parentProto._isNode) {
    return parentProto.constructor
  }
}

class XPathNode {
  constructor (id, type) {
    this.id = id;
    this.type = type;
    this.prev = null;
    this.property = null;
    this.pos = null;
  }

  toJSON () {
    const data = { id: this.id, type: this.type };
    if (this.property) data.property = this.property;
    if (isNumber(this.pos)) data.pos = this.pos;
    return data
  }

  toArray () {
    const result = [this.toJSON()];
    let current = this;
    while (current.prev) {
      current = current.prev;
      result.unshift(current.toJSON());
    }
    return result
  }
}

class DocumentNodeSelectAdapter extends domutils.DomUtils {
  // we only have nodes which correspond to DOM elements
  isTag () {
    return true
  }

  getChildren (node) {
    return getChildren(node)
  }

  getParent (node) {
    return getParent(node)
  }

  getAttributeValue (node, name) {
    return node[name]
  }

  getAttributes (node) {
    // TODO: how could be attribute selectors be implemented?
    // Probably only properties with primitive type
    return ['id', node.id]
  }

  hasAttrib (node, name) {
    if (name === 'id') {
      return true
    } else {
      return hasOwnProperty(node, name)
    }
  }

  getName (node) {
    return node.type
  }

  getNameWithoutNS (node) {
    return this.getName(node)
  }

  getText (node) {
    // TODO: do we really need this. Assuming that it is not important for css-select
    if (node.isText()) {
      return node.getText()
    }
    return ''
  }
}

const cssSelectAdapter = new DocumentNodeSelectAdapter();

/**
  Base node type for document nodes.

  @example

  The following example shows how a new node type is defined.

  ```js
  class Todo extends DocumentNode {
    define () {
      return {
        type: 'todo',
        content: 'text',
        done: { type: 'bool', default: false }
      }
    }
  }
  ```

  The following data types are supported:

  - `string` bare metal string data type
  - `text` a string that carries annotations
  - `number` numeric values
  - `bool` boolean values
  - `id` a node id referencing another node in the document
*/
class DocumentNode extends Node {
  _initialize (doc, props) {
    this.document = doc;

    super._initialize(props);

    /**
     * Experimental:
     * Provides an XPathNode that leads back to the root.
     * An XPath of a DocumentNode is a sequence of XPathNodes, where the first one contains a node id as entry point
     * followed by zero or more nodes with property and position.
     * For example, the xpath for the second paragraph in a document's body could look like this [{id: 'article'}, { property: 'body', pos: 2 }]
     */
    this._xpath = new XPathNode(this.id, this.type);
  }

  /**
    Get the Document instance.

    @returns {Document}
  */
  getDocument () {
    return this.document
  }

  resolve (propName) {
    const val = this.get(propName);
    if (val) {
      const doc = this.getDocument();
      if (isArray(val)) {
        return val.map(id => doc.get(id))
      } else {
        return doc.get(val)
      }
    }
  }

  set (propName, value) {
    this.getDocument().set([this.id, propName], value);
  }

  /**
   * Convenience method to assign multiple values.
   *
   * @param {object} props
   */
  assign (props) {
    if (!props) return
    Object.keys(props).forEach(propName => {
      this.set(propName, props[propName]);
    });
  }

  /**
    Whether this node has a parent.

    `parent` is a built-in property for implementing nested nodes.

    @returns {Boolean}
  */
  hasParent () {
    return Boolean(this.parent)
  }

  /**
    @returns {DocumentNode} the parent node
  */
  getParent () {
    if (isString(this.parent)) return this.document.get(this.parent)
    return this.parent
  }

  setParent (parent) {
    if (isString(parent)) parent = this.document.get(parent);
    this.parent = parent;
  }

  /**
    Get the root node.

    The root node is the last ancestor returned
    by a sequence of `getParent()` calls.

    @returns {DocumentNode}
  */
  getRoot () {
    let node = this;
    while (node.parent) {
      node = node.parent;
    }
    return node
  }

  find (cssSelector) {
    return cssSelect.selectOne(cssSelector, this, { xmlMode: true, adapter: cssSelectAdapter })
  }

  findAll (cssSelector) {
    return cssSelect.selectAll(cssSelector, this, { xmlMode: true, adapter: cssSelectAdapter })
  }

  /**
   * The xpath of this node.
   */
  getXpath () {
    return this._xpath
  }

  /**
   * The position in the parent's children property.
   */
  getPosition () {
    return this._xpath.pos
  }

  // Node categories
  // --------------------

  /**
   * An anchor is an inline-node with zero-width.
   */
  isAnchor () {
    return this.constructor.isAnchor()
  }

  /**
   * An annotation has a `start` and an `end` coordinate that is used to anchor it within the document.
   */
  isAnnotation () {
    return this.constructor.isAnnotation()
  }

  /**
   * A DocumentNode with a sequence of child nodes.
   */
  isContainer () {
    return this.constructor.isContainer()
  }

  /**
   * A ContainerAnnotation may span over multiple nodes, i.e. `start` and `end` may be located on different text nodes within a Container.
   */
  isContainerAnnotation () {
    return this.constructor.isContainerAnnotation()
  }

  /**
   * @returns {Boolean} true if node is an inline node (e.g. Inline Formula)
   *
   * > Attention: InlineNodes are substantially different to Annotations, as they **own** their content.
   *  In contrast, annotations do not own the content, they are just 'overlays' to text owned by other nodes.
   */
  isInlineNode () {
    return this.constructor.isInlineNode()
  }

  /**
   * A DocumentNode used for modelling a List, consisting of a list of ListItems and a definition of ordering types.
   */
  isList () {
    return this.constructor.isList()
  }

  /**
   * A ListItem is may only be a direct child of a ListNode and should be a TextNode.
   */
  isListItem () {
    return this.constructor.isListItem()
  }

  /**
   * A PropertyAnnotation is an Annotation that is anchored to a single text property.
   */
  isPropertyAnnotation () {
    return this.constructor.isPropertyAnnotation()
  }

  /**
    @returns {Boolean} true if node is a text node (e.g. Paragraph, Codebock)
  */
  isText () {
    return this.constructor.isText()
  }

  // actual implementations are static

  static isAnchor () { return false }

  static isAnnotation () { return false }

  /**
    Declares a node to be treated as block-type node.

    BlockNodes are considers the direct descendant of `Container` nodes.
    @type {Boolean} default: false
  */
  static isBlock () { return false }

  static isContainer () { return false }

  /**
    Declares a node to be treated as {@link model/ContainerAnnotation}.

    @type {Boolean} default: false
  */
  static isContainerAnnotation () { return false }

  /**
   * Declares a node to be treated as {@link model/InlineNode}.
   *
   * @type {Boolean} default: false
   */
  static isInlineNode () { return false }

  static isList () { return false }

  static isListItem () { return false }

  /**
   * Declares a node to be treated as {@link model/PropertyAnnotation}.
   *
   * @type {Boolean} default: false
   */
  static isPropertyAnnotation () { return false }

  /**
    Declares a node to be treated as text-ish node.

    @type {Boolean} default: false
  */
  static isText () { return false }

  // used for 'instanceof' comparison
  get _isDocumentNode () { return true }
}

class AssetNode extends DocumentNode {
  define () {
    return {
      type: '@asset',
      // ATTENTION: internally this is used for a DAR assetId, not as file name.
      // During conversion it is mapped to the filename registered in the DAR.
      src: 'string',
      // TODO: can we really provide this?
      // it would be rather read-only
      mimetype: 'string'
    }
  }
}

/**
  Creates a new document instance containing only the selected content

  @param {Object} args object with `selection`
  @return {Object} with a `doc` property that has a fresh doc with the copied content
*/

function copySelection (doc, selection) {
  if (!selection) throw new Error("'selection' is mandatory.")
  let copy = null;
  if (!selection.isNull() && !selection.isCollapsed()) {
    // return a simplified version if only a piece of text is selected
    if (selection.isPropertySelection()) {
      copy = _copyPropertySelection(doc, selection);
    } else if (selection.isContainerSelection()) {
      copy = _copyContainerSelection(doc, selection);
    } else if (selection.isNodeSelection()) {
      copy = _copyNodeSelection(doc, selection);
    } else {
      console.error('Copy is not yet supported for selection type.');
    }
  }
  return copy
}

function _copyPropertySelection (doc, selection) {
  const path = selection.start.path;
  const offset = selection.start.offset;
  const endOffset = selection.end.offset;
  const text = doc.get(path);
  const snippet = doc.createSnippet();
  const containerNode = snippet.getContainer();
  snippet.create({
    type: doc.schema.getDefaultTextType(),
    id: TEXT_SNIPPET_ID,
    content: text.substring(offset, endOffset)
  });
  containerNode.append(TEXT_SNIPPET_ID);
  const annotations = doc.getIndex('annotations').get(path, offset, endOffset);
  forEach(annotations, function (anno) {
    const data = cloneDeep(anno.toJSON());
    const path = [TEXT_SNIPPET_ID, 'content'];
    data.start = {
      path: path,
      offset: Math.max(offset, anno.start.offset) - offset
    };
    data.end = {
      path: path,
      offset: Math.min(endOffset, anno.end.offset) - offset
    };
    snippet.create(data);
  });
  return snippet
}

function _copyContainerSelection (tx, sel) {
  const containerPath = sel.containerPath;

  const snippet = tx.createSnippet();
  const targetContainer = snippet.getContainer();
  const targetContainerPath = targetContainer.getContentPath();

  const nodeIds = getNodeIdsCoveredByContainerSelection(tx, sel);
  const L = nodeIds.length;
  if (L === 0) return snippet

  const start = sel.start;
  const end = sel.end;

  let skippedFirst = false;
  let skippedLast = false;

  // First copy the whole covered nodes
  const created = {};
  for (let i = 0; i < L; i++) {
    const id = nodeIds[i];
    const node = tx.get(id);
    // skip NIL selections, such as cursor at the end of first node or cursor at the start of last node.
    if (i === 0 && isLast(tx, containerPath, start)) {
      skippedFirst = true;
      continue
    }
    if (i === L - 1 && isFirst(tx, containerPath, end)) {
      skippedLast = true;
      continue
    }
    if (!created[id]) {
      copyNode(node).forEach((nodeData) => {
        const copy = snippet.create(nodeData);
        created[copy.id] = true;
      });
      append(snippet, targetContainerPath, id);
    }
  }
  if (!skippedFirst) {
    // ATTENTION: we need the root node here, e.g. the list, not the list items
    const startNode = getContainerRoot(snippet, targetContainerPath, start.getNodeId());
    if (startNode.isText()) {
      deleteTextRange(snippet, null, start);
    } else if (startNode.isList()) {
      deleteListRange(snippet, startNode, null, start, { deleteEmptyFirstItem: true });
    }
  }
  if (!skippedLast) {
    // ATTENTION: we need the root node here, e.g. the list, not the list items
    const endNode = getContainerRoot(snippet, targetContainerPath, end.getNodeId());
    if (endNode.isText()) {
      deleteTextRange(snippet, end, null);
    } else if (endNode.isList()) {
      deleteListRange(snippet, endNode, end, null);
    }
  }
  return snippet
}

function _copyNodeSelection (doc, selection) {
  const snippet = doc.createSnippet();
  const targetNode = snippet.getContainer();
  const targetPath = targetNode.getContentPath();
  const nodeId = selection.getNodeId();
  const node = doc.get(nodeId);
  copyNode(node).forEach((nodeData) => {
    snippet.create(nodeData);
  });
  append(snippet, targetPath, node.id);
  return snippet
}

// We need to disambiguate ids if the target document
// contains a node with the same id.
// Unfortunately, this can be difficult in some cases,
// e.g. other nodes that have a reference to the re-named node
// We only fix annotations for now.
function _transferWithDisambiguatedIds (sourceDoc, targetDoc, id, visited) {
  if (visited[id]) throw new Error('FIXME: dont call me twice')
  visited[id] = id;
  const node = sourceDoc.get(id, 'strict');
  const nodeData = node.toJSON();
  const oldId = id;
  let newId;
  if (targetDoc.contains(id)) {
    // change the node id
    newId = uuid(node.type);
    nodeData.id = newId;
  }
  const annotationIndex = sourceDoc.getIndex('annotations');
  const nodeSchema = node.getSchema();
  // collect annotations so that we can create them in the target doc afterwards
  const annos = [];
  // now we iterate all properties of the node schema,
  // to see if there are owned references, which need to be created recursively,
  // and if there are text properties, where annotations could be attached to
  for (const prop of nodeSchema) {
    const name = prop.name;
    if (name === 'id' || name === 'type') continue
    // Look for references to owned children and create recursively
    if (prop.isReference() && prop.isOwned()) {
      // NOTE: we need to recurse directly here, so that we can
      // update renamed references
      if (prop.isArray()) {
        const ids = nodeData[name];
        nodeData[name] = _transferArrayOfReferences(sourceDoc, targetDoc, ids, visited);
      } else {
        const id = nodeData[name];
        if (!visited[id]) {
          nodeData[name] = _transferWithDisambiguatedIds(sourceDoc, targetDoc, id, visited);
        }
      }
    // Look for text properties and create annotations in the target doc accordingly
    } else if (prop.isText()) {
      // This is really difficult in general
      // as we don't know where to look for.
      // TODO: ATM we only look for annotations.
      // We should also consider anchors / container-annotations
      // Probably we need a different approach, may
      const _annos = annotationIndex.get([oldId, prop.name]);
      // TODO: avoid altering the original node directly
      for (let i = 0; i < _annos.length; i++) {
        const anno = _annos[i];
        if (anno.start.path[0] === oldId && newId) {
          anno.start.path[0] = newId;
        }
        if (anno.end.path[0] === oldId && newId) {
          anno.end.path[0] = newId;
        }
        annos.push(anno);
      }
    }
  }
  targetDoc.create(nodeData);
  for (let i = 0; i < annos.length; i++) {
    _transferWithDisambiguatedIds(sourceDoc, targetDoc, annos[i].id, visited);
  }
  return nodeData.id
}

function _transferArrayOfReferences (sourceDoc, targetDoc, arr, visited) {
  const result = arr.slice(0);
  for (let i = 0; i < arr.length; i++) {
    const val = arr[i];
    // multi-dimensional
    if (isArray(val)) {
      result[i] = _transferArrayOfReferences(sourceDoc, targetDoc, val, visited);
    } else {
      const id = val;
      if (id && !visited[id]) {
        result[i] = _transferWithDisambiguatedIds(sourceDoc, targetDoc, id, visited);
      }
    }
  }
  return result
}

/**
  Pastes clipboard content at the current selection

  @param {Object} args object with `selection` and `doc` for Substance content or
  `text` for external HTML content
  @return {Object} with updated `selection`
*/
function paste (tx, args) {
  const sel = tx.selection;
  if (!sel || sel.isNull()) {
    throw new Error('Can not paste without selection.')
  }
  if (sel.isCustomSelection()) {
    throw new Error('Paste not implemented for custom selection.')
  }
  args = args || {};
  args.text = args.text || '';
  let pasteDoc = args.doc;
  // TODO: is there a better way to detect that this paste is happening within a container?
  const inContainer = Boolean(sel.containerPath);
  // first delete the current selection
  if (!sel.isCollapsed()) {
    tx.deleteSelection();
  }
  // snippet is plain-text only
  if (!pasteDoc) {
    // in a PropertyEditor paste the text
    if (!inContainer) {
      tx.insertText(args.text);
      return
    // in a ContainerEditor interpret line-breaks
    // and create a document with multiple paragraphs
    } else {
      pasteDoc = _convertPlainTextToDocument(tx, args);
    }
  }
  // pasting into a TextProperty
  const snippet = pasteDoc.get(SNIPPET_ID);
  let L = snippet.getLength();
  if (L === 0) return
  const first = snippet.getNodeAt(0);
  // paste into a TextProperty
  if (!inContainer) {
    // if there is only one node it better be a text node
    // otherwise we can't do
    if (L === 1) {
      if (first.isText()) {
        _pasteAnnotatedText(tx, pasteDoc);
      }
    } else {
      pasteDoc = _convertIntoAnnotatedText(tx, pasteDoc);
      _pasteAnnotatedText(tx, pasteDoc);
    }
  } else {
    if (first.isText()) {
      _pasteAnnotatedText(tx, pasteDoc);
      // now we remove the first node from the snippet,
      // so that we can call _pasteDocument for the remaining
      // content
      snippet.removeAt(0);
      L--;
    }
    // if still nodes left paste the remaining document
    if (L > 0) {
      _pasteDocument(tx, pasteDoc);
    }
  }
  return args
}

/*
  Splits plain text by lines and puts them into paragraphs.
*/
function _convertPlainTextToDocument (tx, args) {
  const lines = args.text.split(/\s*\n\s*\n/);
  const pasteDoc = tx.getDocument().newInstance();
  const defaultTextType = pasteDoc.getSchema().getDefaultTextType();
  const container = pasteDoc.create({
    type: '@container',
    id: SNIPPET_ID,
    nodes: []
  });
  let node;
  if (lines.length === 1) {
    node = pasteDoc.create({
      id: TEXT_SNIPPET_ID,
      type: defaultTextType,
      content: lines[0]
    });
    container.append(node.id);
  } else {
    for (let i = 0; i < lines.length; i++) {
      node = pasteDoc.create({
        id: uuid(defaultTextType),
        type: defaultTextType,
        content: lines[i]
      });
      container.append(node.id);
    }
  }
  return pasteDoc
}

function _convertIntoAnnotatedText (tx, copy) {
  const sel = tx.selection;
  const path = sel.start.path;
  const snippet = tx.createSnippet();
  const defaultTextType = snippet.getSchema().getDefaultTextType();

  // walk through all nodes
  const container = copy.get('snippet');
  const nodeIds = container.getContent();
  // collect all transformed annotations
  const fragments = [];
  let offset = 0;
  let annos = [];
  for (const nodeId of nodeIds) {
    const node = copy.get(nodeId);
    if (node.isText()) {
      const text = node.getText();
      if (fragments.length > 0) {
        fragments.push(' ');
        offset += 1;
      }
      // tranform annos
      const _annos = map$1(node.getAnnotations(), anno => {
        const data = anno.toJSON();
        data.start.path = path.slice(0);
        data.start.offset += offset;
        data.end.offset += offset;
        return data
      });
      fragments.push(text);
      annos = annos.concat(_annos);
      offset += text.length;
    }
  }
  snippet.create({
    id: TEXT_SNIPPET_ID,
    type: defaultTextType,
    content: fragments.join('')
  });
  annos.forEach(anno => snippet.create(anno));
  snippet.getContainer().append(TEXT_SNIPPET_ID);
  return snippet
}

function _pasteAnnotatedText (tx, copy) {
  const sel = tx.selection;
  const nodes = copy.get(SNIPPET_ID).nodes;
  const firstId = nodes[0];
  const first = copy.get(firstId);
  const textPath = first.getPath();
  const text = copy.get(textPath);
  const annotations = copy.getIndex('annotations').get(textPath);
  // insert plain text
  const path = sel.start.path;
  const offset = sel.start.offset;
  tx.insertText(text);
  const targetProp = tx.getProperty(path);
  if (targetProp.isText()) {
    // copy annotations (only for TEXT properties)
    let annos = map$1(annotations);
    // NOTE: filtering annotations which are not explicitly white-listed via property.targetTypes
    const allowedTypes = targetProp.targetTypes;
    if (allowedTypes && allowedTypes.size > 0) {
      annos = annos.filter(anno => allowedTypes.has(anno.type));
    }
    for (const anno of annos) {
      const data = anno.toJSON();
      data.start.path = path.slice(0);
      data.start.offset += offset;
      data.end.offset += offset;
      // create a new uuid if a node with the same id exists already
      if (tx.get(data.id)) data.id = uuid(data.type);
      tx.create(data);
    }
  }
}

function _pasteDocument (tx, pasteDoc) {
  const snippet = pasteDoc.get(SNIPPET_ID);
  if (snippet.getLength() === 0) return

  const sel = tx.selection;
  const containerPath = sel.containerPath;
  let insertPos;
  // FIXME: this does not work for lists
  // IMO we need to add a special implementation for lists
  // i.e. check if the cursor is inside a list-item, then either break the list if first node is not a list
  // otherwise merge the list into the current, and if there are more nodes then break the list and proceed on container level
  if (sel.isPropertySelection()) {
    const startPath = sel.start.path;
    const node = getContainerRoot(tx, containerPath, sel.start.getNodeId());
    // if cursor is in a text node then break the text node
    // unless it is empty, then we remove the node
    // and if cursor is at the end we paste the content after the node
    if (node.isText()) {
      const startPos = node.getPosition();
      const text = tx.get(startPath);
      if (text.length === 0) {
        insertPos = startPos;
        removeAt(tx, containerPath, insertPos);
        deepDeleteNode(tx, tx.get(node.id));
      } else if (text.length === sel.start.offset) {
        insertPos = startPos + 1;
      } else {
        tx.break();
        insertPos = startPos + 1;
      }
    // Special behavior for lists:
    // if the first pasted nodes happens to be a list, we merge it into the current list
    // otherwise we break the list into two lists pasting the remaining content inbetween
    // unless the list is empty, then we remove it
    // TODO: try to reuse code for breaking lists from Editing.js
    } else if (node.isList()) {
      const list = node;
      const listItem = tx.get(sel.start.getNodeId());
      const first = snippet.getNodeAt(0);
      if (first.isList()) {
        if (first.getLength() > 0) {
          const itemPos = listItem.getPosition();
          if (listItem.getLength() === 0) {
            // replace the list item with the items from the pasted list
            removeAt(tx, list.getItemsPath(), itemPos);
            deepDeleteNode(tx, listItem);
            _pasteListItems(tx, list, first, itemPos);
          } else if (sel.start.offset === 0) {
            // insert items before the current list item
            _pasteListItems(tx, list, first, itemPos);
          } else if (sel.start.offset >= listItem.getLength()) {
            // insert items after the current list item
            _pasteListItems(tx, list, first, itemPos + 1);
          } else {
            tx.break();
            _pasteListItems(tx, list, first, itemPos + 1);
          }
          // if there is more content than just the list,
          // break the list apart
          if (snippet.getLength() > 1) {
            _breakListApart(tx, containerPath, list);
          }
        }
        // remove the first and continue with pasting the remaining content after the current list
        snippet.removeAt(0);
        insertPos = list.getPosition() + 1;
      } else {
        // if the list is empty then remove it
        if (list.getLength() === 1 && listItem.getLength() === 0) {
          insertPos = list.getPosition();
          removeAt(tx, containerPath, insertPos);
          deepDeleteNode(tx, list);
        // if on first position of list, paste all content before the list
        } else if (listItem.getPosition() === 0 && sel.start.offset === 0) {
          insertPos = list.getPosition();
        // if cursor is at the last position of the list paste all content after the list
        } else if (listItem.getPosition() === list.getLength() - 1 && sel.end.offset >= listItem.getLength()) {
          insertPos = list.getPosition() + 1;
        // break the list at the current position (splitting)
        } else {
          insertPos = list.getPosition() + 1;
          _breakListApart(tx, containerPath, list);
        }
      }
    }
  } else if (sel.isNodeSelection()) {
    const nodePos = getContainerPosition(tx, containerPath, sel.getNodeId());
    if (sel.isBefore()) {
      insertPos = nodePos;
    } else if (sel.isAfter()) {
      insertPos = nodePos + 1;
    } else {
      throw new Error('Illegal state: the selection should be collapsed.')
    }
  }

  _pasteContainerNodes(tx, pasteDoc, containerPath, insertPos);
}

function _pasteContainerNodes (tx, pasteDoc, containerPath, insertPos) {
  // transfer nodes from content document
  const nodeIds = pasteDoc.get(SNIPPET_ID).nodes;
  const insertedNodes = [];
  const visited = {};
  let nodes = nodeIds.map(id => pasteDoc.get(id));

  // now filter nodes w.r.t. allowed types for the given container
  const containerProperty = tx.getProperty(containerPath);
  const targetTypes = containerProperty.targetTypes;
  // TODO: instead of dropping all invalid ones we could try to convert text nodes to the default text node
  if (targetTypes && targetTypes.size > 0) {
    nodes = nodes.filter(node => targetTypes.has(node.type));
  }
  for (let node of nodes) {
    // Note: this will on the one hand make sure node ids are changed
    // to avoid collisions in the target doc
    // Plus, it uses reflection to create owned nodes recursively,
    // and to transfer attached annotations.
    const newId = _transferWithDisambiguatedIds(node.getDocument(), tx, node.id, visited);
    // get the node in the targetDocument
    node = tx.get(newId);
    insertAt(tx, containerPath, insertPos++, newId);
    insertedNodes.push(node);
  }

  if (insertedNodes.length > 0) {
    const lastNode = last(insertedNodes);
    setCursor(tx, lastNode, containerPath, 'after');
  }
}

function _pasteListItems (tx, list, otherList, insertPos) {
  const sel = tx.getSelection();
  const items = otherList.resolve('items');
  const visited = {};
  let lastItem;
  for (const item of items) {
    const newId = _transferWithDisambiguatedIds(item.getDocument(), tx, item.id, visited);
    insertAt(tx, list.getItemsPath(), insertPos++, newId);
    lastItem = tx.get(newId);
  }
  tx.setSelection({
    type: 'property',
    path: lastItem.getPath(),
    startOffset: lastItem.getLength(),
    surfaceId: sel.surfaceId,
    containerPath: sel.containerPath
  });
}

function _breakListApart (tx, containerPath, list) {
  // HACK: using tx.break() to break the list
  const nodePos = list.getPosition();
  // first split the current item with a break
  const oldSel = tx.selection;
  tx.break();
  const listItem = tx.get(tx.selection.start.getNodeId());
  // if the list item is empty, another tx.break() splits the list
  // otherwise doing the same again
  if (listItem.getLength() > 0) {
    tx.setSelection(oldSel);
    tx.break();
  }
  console.assert(tx.get(tx.selection.start.getNodeId()).getLength() === 0, 'at this point the current list-item should be empty');
  // breaking a list on an empty list-item breaks the list apart
  // but this creates an empty paragraph which we need to removed
  // TODO: maybe we should add an option to tx.break() that allows break without insert of empty text node
  tx.break();
  const p = removeAt(tx, containerPath, nodePos + 1);
  deepDeleteNode(tx, p);
}

function _isLowSurrogate (charCode) {
  return charCode >= 55296 && charCode <= 56319
}

function _isHighSurrogate (charCode) {
  return charCode >= 56320 && charCode <= 57343
}

/**
  Core editing implementation, that controls meta behavior
  such as deleting a selection, merging nodes, etc.

  Some of the implementation are then delegated to specific editing behaviors,
  such as manipulating content of a text-property, merging or breaking text nodes

  Note: this is pretty much the same what we did with transforms before.
        We decided to move this here, to switch to a stateful editor implementation (aka turtle-graphics-style)
 */
class Editing {
  // create an annotation for the current selection using the given data
  annotate (tx, annotation) {
    const sel = tx.selection;
    const schema = tx.getSchema();
    const AnnotationClass = schema.getNodeClass(annotation.type);
    if (!AnnotationClass) throw new Error('Unknown annotation type', annotation)
    const start = sel.start;
    const end = sel.end;
    const containerPath = sel.containerPath;
    const nodeData = { start, end, containerPath };
    // TODO: we need to generalize how node category can be derived statically
    /* istanbul ignore else  */
    if (sel.isPropertySelection()) {
      if (!AnnotationClass.isAnnotation()) {
        throw new Error('Annotation can not be created for a selection.')
      }
    } else if (sel.isContainerSelection()) {
      if (AnnotationClass.isPropertyAnnotation()) {
        console.warn('NOT SUPPORTED YET: creating property annotations for a non collapsed container selection.');
      }
    }
    Object.assign(nodeData, annotation);
    return tx.create(nodeData)
  }

  break (tx) {
    const sel = tx.selection;
    if (sel.isNodeSelection()) {
      const containerPath = sel.containerPath;
      const nodeId = sel.getNodeId();
      const nodePos = getContainerPosition(tx, containerPath, nodeId);
      const textNode = this.createTextNode(tx, containerPath);
      if (sel.isBefore()) {
        insertAt(tx, containerPath, nodePos, textNode.id);
        // leave selection as is
      } else {
        insertAt(tx, containerPath, nodePos + 1, textNode.id);
        setCursor(tx, textNode, containerPath, 'before');
      }
    } else if (sel.isCustomSelection()) ; else if (sel.isCollapsed() || sel.isPropertySelection()) {
      const containerPath = sel.containerPath;
      if (!sel.isCollapsed()) {
        // delete the selection
        this._deletePropertySelection(tx, sel);
        tx.setSelection(sel.collapse('left'));
      }
      // then break the node
      if (containerPath) {
        const nodeId = sel.start.path[0];
        const node = tx.get(nodeId);
        this._breakNode(tx, node, sel.start, containerPath);
      }
    } else if (sel.isContainerSelection()) {
      const start = sel.start;
      const containerPath = sel.containerPath;
      const startNodeId = start.path[0];
      const nodePos = getContainerPosition(tx, containerPath, startNodeId);
      this._deleteContainerSelection(tx, sel, { noMerge: true });
      setCursor(tx, getNextNode(tx, containerPath, nodePos), containerPath, 'before');
    }
  }

  createTextNode (tx, containerPath, text) { // eslint-disable-line no-unused-vars
    const prop = tx.getProperty(containerPath);
    if (!prop.defaultTextType) {
      throw new Error('Container properties must have a "defaultTextType" defined in the schema')
    }
    return tx.create({
      type: prop.defaultTextType,
      content: text
    })
  }

  createListNode (tx, containerPath, params = {}) { // eslint-disable-line no-unused-vars
    // Note: override this create a different node type
    // according to the context
    return tx.create({ type: 'list', items: [], listType: params.listType || 'bullet' })
  }

  delete (tx, direction) {
    const sel = tx.selection;
    // special implementation for node selections:
    // either delete the node (replacing with an empty text node)
    // or just move the cursor
    /* istanbul ignore else  */
    if (sel.isNodeSelection()) {
      this._deleteNodeSelection(tx, sel, direction);
    // TODO: what to do with custom selections?
    } else if (sel.isCustomSelection()) ; else if (sel.isCollapsed()) {
      // Deletion of a single character leads to a merge
      // if cursor is at a text boundary (TextNode, ListItem)
      // and direction is towards that boundary
      const path = sel.start.path;
      const nodeId = path[0];
      const containerPath = sel.containerPath;
      const text = tx.get(path);
      const offset = sel.start.offset;
      const needsMerge = (containerPath && (
        (offset === 0 && direction === 'left') ||
        (offset === text.length && direction === 'right')
      ));
      if (needsMerge) {
        // ATTENTION: deviation from standard implementation
        // for list items: Word and GDoc toggle a list item
        // when doing a BACKSPACE at the first position
        // IMO this is not 'consistent' because it is not the
        // inverse of 'break'
        // We will 'toggle' only if the cursor is on the first position
        // of the first item
        const root = getContainerRoot(tx, containerPath, nodeId);
        if (root.isList() && offset === 0 && direction === 'left') {
          return this.toggleList(tx)
        } else {
          this._merge(tx, root, sel.start, direction, containerPath);
        }
      } else {
        // if we are not in a merge scenario, we stop at the boundaries
        if ((offset === 0 && direction === 'left') ||
          (offset === text.length && direction === 'right')) {
          return
        }
        const startOffset = (direction === 'left') ? offset - 1 : offset;
        const endOffset = startOffset + 1;
        const start = { path: path, offset: startOffset };
        const end = { path: path, offset: endOffset };

        // ATTENTION: be careful not to corrupt suggorate pairs
        // i.e. if deleting to the left and we see a low-suggorate character
        // then we have to delete two chars
        // and if deleting to the right and we see a hight-suggorate character
        // we should also delete the lower one
        const charCode = text.charCodeAt(startOffset);
        // is character a low-suggorate?
        if (_isLowSurrogate(charCode)) {
          const nextCharCode = text.charCodeAt(endOffset);
          if (_isHighSurrogate(nextCharCode)) {
            end.offset++;
          }
        } else if (_isHighSurrogate(charCode)) {
          start.offset--;
        }

        deleteTextRange(tx, start, end);
        tx.setSelection({
          type: 'property',
          path: path,
          startOffset: start.offset,
          containerPath: sel.containerPath
        });
      }
    // deleting a range of characters within a text property
    } else if (sel.isPropertySelection()) {
      deleteTextRange(tx, sel.start, sel.end);
      tx.setSelection(sel.collapse('left'));
    // deleting a range within a container (across multiple nodes)
    } else if (sel.isContainerSelection()) {
      this._deleteContainerSelection(tx, sel);
    } else {
      console.warn('Unsupported case: tx.delete(%)', direction, sel);
    }
  }

  _deleteNodeSelection (tx, sel, direction) {
    const nodeId = sel.getNodeId();
    const containerPath = sel.containerPath;
    const nodePos = getContainerPosition(tx, containerPath, nodeId);
    if (sel.isFull() ||
        (sel.isBefore() && direction === 'right') ||
        (sel.isAfter() && direction === 'left')) {
      // replace the node with default text node
      removeAt(tx, containerPath, nodePos);
      deepDeleteNode(tx, tx.get(nodeId));
      const newNode = this.createTextNode(tx, sel.containerPath);
      insertAt(tx, containerPath, nodePos, newNode.id);
      tx.setSelection({
        type: 'property',
        path: newNode.getPath(),
        startOffset: 0,
        containerPath
      });
    } else {
      /* istanbul ignore else  */
      if (sel.isBefore() && direction === 'left') {
        if (nodePos > 0) {
          const previous = getPreviousNode(tx, containerPath, nodePos);
          if (previous.isText()) {
            tx.setSelection({
              type: 'property',
              path: previous.getPath(),
              startOffset: previous.getLength()
            });
            this.delete(tx, direction);
          } else {
            tx.setSelection({
              type: 'node',
              nodeId: previous.id,
              containerPath
            });
          }
        }
      } else if (sel.isAfter() && direction === 'right') {
        const nodeIds = tx.get(containerPath);
        if (nodePos < nodeIds.length - 1) {
          const next = getNextNode(tx, containerPath, nodePos);
          if (next.isText()) {
            tx.setSelection({
              type: 'property',
              path: next.getPath(),
              startOffset: 0
            });
            this.delete(tx, direction);
          } else {
            tx.setSelection({
              type: 'node',
              nodeId: next.id,
              containerPath
            });
          }
        }
      } else {
        console.warn('Unsupported case: delete(%s)', direction, sel);
      }
    }
  }

  _deletePropertySelection (tx, sel) {
    const path = sel.start.path;
    const start = sel.start.offset;
    const end = sel.end.offset;
    tx.update(path, { type: 'delete', start: start, end: end });
    annotationHelpers.deletedText(tx, path, start, end);
  }

  // deletes all inner nodes and 'truncates' start and end node
  _deleteContainerSelection (tx, sel, options = {}) {
    const containerPath = sel.containerPath;
    const start = sel.start;
    const end = sel.end;
    const startId = start.getNodeId();
    const endId = end.getNodeId();
    const startPos = getContainerPosition(tx, containerPath, startId);
    const endPos = getContainerPosition(tx, containerPath, endId);
    // special case: selection within one node
    if (startPos === endPos) {
      // ATTENTION: we need the root node here e.g. the list, not the list-item
      // OUCH: how we will we do it
      const node = getContainerRoot(tx, containerPath, startId);
      /* istanbul ignore else  */
      if (node.isText()) {
        deleteTextRange(tx, start, end);
      } else if (node.isList()) {
        deleteListRange(tx, node, start, end);
      } else {
        throw new Error('Not supported yet.')
      }
      tx.setSelection(sel.collapse('left'));
      return
    }

    // TODO: document the algorithm

    const firstNodeId = start.getNodeId();
    const lastNodeId = end.getNodeId();
    const firstNode = tx.get(start.getNodeId());
    const lastNode = tx.get(end.getNodeId());
    const firstEntirelySelected = isEntirelySelected(tx, firstNode, start, null);
    const lastEntirelySelected = isEntirelySelected(tx, lastNode, null, end);

    // delete or truncate last node
    if (lastEntirelySelected) {
      removeAt(tx, containerPath, endPos);
      deepDeleteNode(tx, lastNode);
    } else {
      // ATTENTION: we need the root node here e.g. the list, not the list-item
      const node = getContainerRoot(tx, containerPath, lastNodeId);
      /* istanbul ignore else  */
      if (node.isText()) {
        deleteTextRange(tx, null, end);
      } else if (node.isList()) {
        deleteListRange(tx, node, null, end);
      }
    }

    // delete inner nodes
    for (let i = endPos - 1; i > startPos; i--) {
      const nodeId = removeAt(tx, containerPath, i);
      deepDeleteNode(tx, tx.get(nodeId));
    }

    // delete or truncate the first node
    if (firstEntirelySelected) {
      removeAt(tx, containerPath, startPos);
      deepDeleteNode(tx, firstNode);
    } else {
      // ATTENTION: we need the root node here e.g. the list, not the list-item
      const node = getContainerRoot(tx, containerPath, firstNodeId);
      /* istanbul ignore else  */
      if (node.isText()) {
        deleteTextRange(tx, start, null);
      } else if (node.isList()) {
        deleteListRange(tx, node, start, null);
      }
    }

    // insert a new TextNode if all has been deleted
    if (firstEntirelySelected && lastEntirelySelected) {
      // insert a new paragraph
      const textNode = this.createTextNode(tx, containerPath);
      insertAt(tx, containerPath, startPos, textNode.id);
      tx.setSelection({
        type: 'property',
        path: textNode.getPath(),
        startOffset: 0,
        containerPath: containerPath
      });
    } else if (!firstEntirelySelected && !lastEntirelySelected) {
      if (!options.noMerge) {
        const firstNodeRoot = getContainerRoot(tx, containerPath, firstNode.id);
        this._merge(tx, firstNodeRoot, sel.start, 'right', containerPath);
      }
      tx.setSelection(sel.collapse('left'));
    } else if (firstEntirelySelected) {
      setCursor(tx, lastNode, containerPath, 'before');
    } else {
      setCursor(tx, firstNode, containerPath, 'after');
    }
  }

  insertInlineNode (tx, nodeData) {
    let sel = tx.selection;
    const text = '\uFEFF';
    this.insertText(tx, text);
    sel = tx.selection;
    const endOffset = tx.selection.end.offset;
    const startOffset = endOffset - text.length;
    nodeData = Object.assign({}, nodeData, {
      start: {
        path: sel.path,
        offset: startOffset
      },
      end: {
        path: sel.path,
        offset: endOffset
      }
    });
    return tx.create(nodeData)
  }

  insertBlockNode (tx, nodeData) {
    const sel = tx.selection;
    const containerPath = sel.containerPath;
    // don't create the node if it already exists
    let blockNode;
    if (!nodeData._isNode || !tx.get(nodeData.id)) {
      blockNode = tx.create(nodeData);
    } else {
      blockNode = tx.get(nodeData.id);
    }
    /* istanbul ignore else  */
    if (sel.isNodeSelection()) {
      const nodeId = sel.getNodeId();
      const nodePos = getContainerPosition(tx, containerPath, nodeId);
      // insert before
      if (sel.isBefore()) {
        insertAt(tx, containerPath, nodePos, blockNode.id);
      // insert after
      } else if (sel.isAfter()) {
        insertAt(tx, containerPath, nodePos + 1, blockNode.id);
        tx.setSelection({
          type: 'node',
          containerPath,
          nodeId: blockNode.id,
          mode: 'after'
        });
      } else {
        removeAt(tx, containerPath, nodePos);
        deepDeleteNode(tx, tx.get(nodeId));
        insertAt(tx, containerPath, nodePos, blockNode.id);
        tx.setSelection({
          type: 'node',
          containerPath,
          nodeId: blockNode.id,
          mode: 'after'
        });
      }
    } else if (sel.isPropertySelection()) {
      /* istanbul ignore next */
      if (!containerPath) throw new Error('insertBlockNode can only be used within a container.')
      if (!sel.isCollapsed()) {
        this._deletePropertySelection(tx, sel);
        tx.setSelection(sel.collapse('left'));
      }
      const node = tx.get(sel.path[0]);
      /* istanbul ignore next */
      if (!node) throw new Error('Invalid selection.')
      const nodePos = getContainerPosition(tx, containerPath, node.id);
      /* istanbul ignore else  */
      if (node.isText()) {
        const text = node.getText();
        // replace node
        if (text.length === 0) {
          removeAt(tx, containerPath, nodePos);
          deepDeleteNode(tx, node);
          insertAt(tx, containerPath, nodePos, blockNode.id);
          setCursor(tx, blockNode, containerPath, 'after');
        // insert before
        } else if (sel.start.offset === 0) {
          insertAt(tx, containerPath, nodePos, blockNode.id);
        // insert after
        } else if (sel.start.offset === text.length) {
          insertAt(tx, containerPath, nodePos + 1, blockNode.id);
          setCursor(tx, blockNode, containerPath, 'before');
        // break
        } else {
          this.break(tx);
          insertAt(tx, containerPath, nodePos + 1, blockNode.id);
          setCursor(tx, blockNode, containerPath, 'after');
        }
      } else {
        console.error('Not supported: insertBlockNode() on a custom node');
      }
    } else if (sel.isContainerSelection()) {
      if (sel.isCollapsed()) {
        const start = sel.start;
        /* istanbul ignore else  */
        if (start.isPropertyCoordinate()) {
          tx.setSelection({
            type: 'property',
            path: start.path,
            startOffset: start.offset,
            containerPath
          });
        } else if (start.isNodeCoordinate()) {
          tx.setSelection({
            type: 'node',
            containerPath,
            nodeId: start.path[0],
            mode: start.offset === 0 ? 'before' : 'after'
          });
        } else {
          throw new Error('Unsupported selection for insertBlockNode')
        }
        return this.insertBlockNode(tx, blockNode)
      } else {
        this.break(tx);
        return this.insertBlockNode(tx, blockNode)
      }
    }
    return blockNode
  }

  insertText (tx, text) {
    const sel = tx.selection;
    // type over a selected node or insert a paragraph before
    // or after
    /* istanbul ignore else  */
    if (sel.isNodeSelection()) {
      const containerPath = sel.containerPath;
      const nodeId = sel.getNodeId();
      const nodePos = getContainerPosition(tx, containerPath, nodeId);
      const textNode = this.createTextNode(tx, containerPath, text);
      if (sel.isBefore()) {
        insertAt(tx, containerPath, nodePos, textNode.id);
      } else if (sel.isAfter()) {
        insertAt(tx, containerPath, nodePos + 1, textNode.id);
      } else {
        removeAt(tx, containerPath, nodePos);
        deepDeleteNode(tx, tx.get(nodeId));
        insertAt(tx, containerPath, nodePos, textNode.id);
      }
      setCursor(tx, textNode, containerPath, 'after');
    } else if (sel.isCustomSelection()) ; else if (sel.isCollapsed() || sel.isPropertySelection()) {
      // console.log('#### before', sel.toString())
      this._insertText(tx, sel, text);
      // console.log('### setting selection after typing: ', tx.selection.toString())
    } else if (sel.isContainerSelection()) {
      this._deleteContainerSelection(tx, sel);
      this.insertText(tx, text);
    }
  }

  paste (tx, content) {
    if (!content) return
    /* istanbul ignore else  */
    if (isString(content)) {
      paste(tx, { text: content });
    } else if (content._isDocument) {
      paste(tx, { doc: content });
    } else {
      throw new Error('Illegal content for paste.')
    }
  }

  /**
   * Switch text type for a given node. E.g. from `paragraph` to `heading`.
   *
   * @param {Object} args object with `selection`, `containerPath` and `data` with new node data
   * @return {Object} object with updated `selection`
   *
   * @example
   *
   * ```js
   * switchTextType(tx, {
   *   selection: bodyEditor.getSelection(),
   *  containerPath: bodyEditor.getContainerPath(),
   *   data: {
   *     type: 'heading',
   *     level: 2
   *  }
   * })
   * ```
   */
  switchTextType (tx, data) {
    const sel = tx.selection;
    /* istanbul ignore next */
    if (!sel.isPropertySelection()) {
      throw new Error('Selection must be a PropertySelection.')
    }
    const containerPath = sel.containerPath;
    /* istanbul ignore next */
    if (!containerPath) {
      throw new Error('Selection must be within a container.')
    }
    const path = sel.path;
    const nodeId = path[0];
    const node = tx.get(nodeId);
    /* istanbul ignore next */
    if (!(node.isText())) {
      throw new Error('Trying to use switchTextType on a non text node.')
    }
    const newId = uuid(data.type);
    // Note: a TextNode is allowed to have its own way to store the plain-text
    const oldPath = node.getPath();
    console.assert(oldPath.length === 2, 'Currently we assume that TextNodes store the plain-text on the first level');
    const textProp = oldPath[1];
    const newPath = [newId, textProp];
    // create a new node and transfer annotations
    const newNodeData = Object.assign({
      id: newId,
      type: data.type,
      direction: node.direction
    }, data);
    newNodeData[textProp] = node.getText();

    const newNode = tx.create(newNodeData);
    annotationHelpers.transferAnnotations(tx, path, 0, newPath, 0);

    // hide and delete the old one, show the new node
    const pos = getContainerPosition(tx, containerPath, nodeId);
    removeAt(tx, containerPath, pos);
    deepDeleteNode(tx, node);
    insertAt(tx, containerPath, pos, newNode.id);

    tx.setSelection({
      type: 'property',
      path: newPath,
      startOffset: sel.start.offset,
      endOffset: sel.end.offset,
      containerPath
    });

    return newNode
  }

  toggleList (tx, params) {
    const sel = tx.selection;
    const containerPath = sel.containerPath;
    /* istanbul ignore next */
    if (!containerPath) {
      throw new Error('Selection must be within a container.')
    }
    if (sel.isPropertySelection()) {
      const nodeId = sel.start.path[0];
      // ATTENTION: we need the root node here e.g. the list, not the list-item
      const node = getContainerRoot(tx, containerPath, nodeId);
      const nodePos = node.getPosition();
      /* istanbul ignore else  */
      if (node.isText()) {
        removeAt(tx, containerPath, nodePos);
        const newList = this.createListNode(tx, containerPath, params);
        const newItem = newList.createListItem(node.getText());
        annotationHelpers.transferAnnotations(tx, node.getPath(), 0, newItem.getPath(), 0);
        newList.appendItem(newItem);
        deepDeleteNode(tx, node);
        insertAt(tx, containerPath, nodePos, newList.id);
        tx.setSelection({
          type: 'property',
          path: newItem.getPath(),
          startOffset: sel.start.offset,
          containerPath
        });
      } else if (node.isList()) {
        const itemId = sel.start.path[0];
        const item = tx.get(itemId);
        const itemPos = node.getItemPosition(item);
        const newTextNode = this.createTextNode(tx, containerPath, item.getText());
        annotationHelpers.transferAnnotations(tx, item.getPath(), 0, newTextNode.getPath(), 0);
        // take the item out of the list
        node.removeItemAt(itemPos);
        if (node.isEmpty()) {
          removeAt(tx, containerPath, nodePos);
          deepDeleteNode(tx, node);
          insertAt(tx, containerPath, nodePos, newTextNode.id);
        } else if (itemPos === 0) {
          insertAt(tx, containerPath, nodePos, newTextNode.id);
        } else if (node.getLength() <= itemPos) {
          insertAt(tx, containerPath, nodePos + 1, newTextNode.id);
        } else {
          // split the
          const tail = [];
          const items = node.getItems();
          const L = items.length;
          for (let i = L - 1; i >= itemPos; i--) {
            tail.unshift(items[i]);
            node.removeItemAt(i);
          }
          const newList = this.createListNode(tx, containerPath, node);
          for (let i = 0; i < tail.length; i++) {
            newList.appendItem(tail[i]);
          }
          insertAt(tx, containerPath, nodePos + 1, newTextNode.id);
          insertAt(tx, containerPath, nodePos + 2, newList.id);
        }
        tx.setSelection({
          type: 'property',
          path: newTextNode.getPath(),
          startOffset: sel.start.offset,
          containerPath
        });
      }
    } else if (sel.isContainerSelection()) {
      console.error('TODO: support toggleList with ContainerSelection');
    }
  }

  indent (tx) {
    const sel = tx.selection;
    const containerPath = sel.containerPath;
    if (sel.isPropertySelection()) {
      const nodeId = sel.start.getNodeId();
      // ATTENTION: we need the root node here, e.g. the list, not the list items
      const node = getContainerRoot(tx, containerPath, nodeId);
      if (node.isList()) {
        const itemId = sel.start.path[0];
        const item = tx.get(itemId);
        const level = item.getLevel();
        // Note: allowing only 3 levels
        if (item && level < 3) {
          item.setLevel(item.level + 1);
          // a pseudo change to let the list know that something has changed
          tx.set([node.id, '_itemsChanged'], true);
        }
      }
    } else if (sel.isContainerSelection()) {
      console.error('TODO: support toggleList with ContainerSelection');
    }
  }

  dedent (tx) {
    const sel = tx.selection;
    const containerPath = sel.containerPath;
    if (sel.isPropertySelection()) {
      const nodeId = sel.start.getNodeId();
      // ATTENTION: we need the root node here, e.g. the list, not the list items
      const node = getContainerRoot(tx, containerPath, nodeId);
      if (node.isList()) {
        const itemId = sel.start.path[0];
        const item = tx.get(itemId);
        const level = item.getLevel();
        if (item) {
          if (level > 1) {
            item.setLevel(item.level - 1);
            // a pseudo change to let the list know that something has changed
            tx.set([node.id, '_itemsChanged'], true);
          }
          // TODO: we could toggle the list item to paragraph
          // if dedenting on the first level
          //  else {
          //   return this.toggleList(tx)
          // }
        }
      }
    } else if (sel.isContainerSelection()) {
      console.error('TODO: support toggleList with ContainerSelection');
    }
  }

  /*
    <-->: anno
    |--|: area of change
    I: <--> |--|     :   nothing
    II: |--| <-->    :   move both by total span+L
    III: |-<-->-|    :   delete anno
    IV: |-<-|->      :   move start by diff to start+L, and end by total span+L
    V: <-|->-|       :   move end by diff to start+L
    VI: <-->|--|     :   noting if !anno.autoExpandRight
    VII: <-|--|->    :   move end by total span+L
  */
  _insertText (tx, sel, text) {
    const start = sel.start;
    const end = sel.end;
    /* istanbul ignore next  */
    if (!isArrayEqual(start.path, end.path)) {
      throw new Error('Unsupported state: range should be on one property')
    }
    const path = start.path;
    const startOffset = start.offset;
    const endOffset = end.offset;
    const typeover = !sel.isCollapsed();
    const L = text.length;
    // delete selected text
    if (typeover) {
      tx.update(path, { type: 'delete', start: startOffset, end: endOffset });
    }
    // insert new text
    tx.update(path, { type: 'insert', start: startOffset, text: text });
    // update annotations
    const annos = tx.getAnnotations(path);
    annos.forEach(function (anno) {
      const annoStart = anno.start.offset;
      const annoEnd = anno.end.offset;

      /* istanbul ignore else  */
      // I anno is before
      if (annoEnd < startOffset) ; else if (annoStart >= endOffset) {
        tx.update([anno.id, 'start'], { type: 'shift', value: startOffset - endOffset + L });
        tx.update([anno.id, 'end'], { type: 'shift', value: startOffset - endOffset + L });
      // III anno is deleted
      // NOTE: InlineNodes only have a length of one character
      // so they are always 'covered', and as they can not expand
      // they are deleted
      } else if (
        (annoStart >= startOffset && annoEnd < endOffset) ||
        (anno.isInlineNode() && annoStart >= startOffset && annoEnd <= endOffset)
      ) {
        tx.delete(anno.id);
      // IV anno.start between and anno.end after
      } else if (annoStart >= startOffset && annoEnd >= endOffset) {
        // do not move start if typing over
        if (annoStart > startOffset || !typeover) {
          tx.update([anno.id, 'start'], { type: 'shift', value: startOffset - annoStart + L });
        }
        tx.update([anno.id, 'end'], { type: 'shift', value: startOffset - endOffset + L });
      // V anno.start before and anno.end between
      } else if (annoStart < startOffset && annoEnd < endOffset) {
        // NOTE: here the anno gets expanded (that's the common way)
        tx.update([anno.id, 'end'], { type: 'shift', value: startOffset - annoEnd + L });
      // VI
      } else if (annoEnd === startOffset && !anno.constructor.autoExpandRight) ; else if (annoStart < startOffset && annoEnd >= endOffset) {
        if (anno.isInlineNode()) ; else {
          tx.update([anno.id, 'end'], { type: 'shift', value: startOffset - endOffset + L });
        }
      } else {
        console.warn('TODO: handle annotation update case.');
      }
    });
    const offset = startOffset + text.length;
    tx.setSelection({
      type: 'property',
      path: start.path,
      startOffset: offset,
      containerPath: sel.containerPath,
      surfaceId: sel.surfaceId
    });
  }

  _breakNode (tx, node, coor, containerPath) {
    // ATTENTION: we need the root here, e.g. a list, not the list-item
    node = getContainerRoot(tx, containerPath, node.id);
    /* istanbul ignore else  */
    if (node.isText()) {
      this._breakTextNode(tx, node, coor, containerPath);
    } else if (node.isList()) {
      this._breakListNode(tx, node, coor, containerPath);
    } else {
      console.error('FIXME: _breakNode() not supported for type', node.type);
    }
  }

  _breakTextNode (tx, node, coor, containerPath) {
    const path = coor.path;
    const offset = coor.offset;
    const nodePos = node.getPosition();
    const text = node.getText();

    // when breaking at the first position, a new node of the same
    // type will be inserted.
    if (offset === 0) {
      const newNode = tx.create({
        type: node.type,
        content: ''
      });
      // show the new node
      insertAt(tx, containerPath, nodePos, newNode.id);
      tx.setSelection({
        type: 'property',
        path: path,
        startOffset: 0,
        containerPath
      });
    // otherwise split the text property and create a new paragraph node with trailing text and annotations transferred
    } else {
      const textPath = node.getPath();
      const textProp = textPath[1];
      const newId = uuid(node.type);
      const newNodeData = node.toJSON();
      newNodeData.id = newId;
      newNodeData[textProp] = text.substring(offset);
      // if at the end insert a default text node no matter in which text node we are
      if (offset === text.length) {
        newNodeData.type = tx.getSchema().getDefaultTextType();
      }
      const newNode = tx.create(newNodeData);
      // Now we need to transfer annotations
      if (offset < text.length) {
        // transfer annotations which are after offset to the new node
        annotationHelpers.transferAnnotations(tx, path, offset, newNode.getPath(), 0);
        // truncate the original property
        tx.update(path, { type: 'delete', start: offset, end: text.length });
      }
      // show the new node
      insertAt(tx, containerPath, nodePos + 1, newNode.id);
      // update the selection
      tx.setSelection({
        type: 'property',
        path: newNode.getPath(),
        startOffset: 0,
        containerPath
      });
    }
  }

  _breakListNode (tx, node, coor, containerPath) {
    const path = coor.path;
    const offset = coor.offset;
    const listItem = tx.get(path[0]);

    const L = node.length;
    const itemPos = node.getItemPosition(listItem);
    const text = listItem.getText();
    const textProp = listItem.getPath()[1];
    const newItemData = listItem.toJSON();
    delete newItemData.id;
    if (offset === 0) {
      // if breaking at an empty list item, then the list is split into two
      if (!text) {
        // if it is the first or last item, a default text node is inserted before or after, and the item is removed
        // if the list has only one element, it is removed
        const nodePos = node.getPosition();
        const newTextNode = this.createTextNode(tx, containerPath);
        // if the list is empty, replace it with a paragraph
        if (L < 2) {
          removeAt(tx, containerPath, nodePos);
          deepDeleteNode(tx, node);
          insertAt(tx, containerPath, nodePos, newTextNode.id);
        // if at the first list item, remove the item
        } else if (itemPos === 0) {
          node.removeItem(listItem);
          deepDeleteNode(tx, listItem);
          insertAt(tx, containerPath, nodePos, newTextNode.id);
        // if at the last list item, remove the item and append the paragraph
        } else if (itemPos >= L - 1) {
          node.removeItem(listItem);
          deepDeleteNode(tx, listItem);
          insertAt(tx, containerPath, nodePos + 1, newTextNode.id);
        // otherwise create a new list
        } else {
          const tail = [];
          const items = node.getItems().slice();
          for (let i = L - 1; i > itemPos; i--) {
            tail.unshift(items[i]);
            node.removeItem(items[i]);
          }
          node.removeItem(items[itemPos]);
          const newList = this.createListNode(tx, containerPath, node);
          for (let i = 0; i < tail.length; i++) {
            newList.appendItem(tail[i]);
          }
          insertAt(tx, containerPath, nodePos + 1, newTextNode.id);
          insertAt(tx, containerPath, nodePos + 2, newList.id);
        }
        tx.setSelection({
          type: 'property',
          path: newTextNode.getPath(),
          startOffset: 0
        });
      // insert a new paragraph above the current one
      } else {
        newItemData[textProp] = '';
        const newItem = tx.create(newItemData);
        node.insertItemAt(itemPos, newItem);
        tx.setSelection({
          type: 'property',
          path: listItem.getPath(),
          startOffset: 0
        });
      }
    // otherwise split the text property and create a new paragraph node with trailing text and annotations transferred
    } else {
      newItemData[textProp] = text.substring(offset);
      const newItem = tx.create(newItemData);
      // Now we need to transfer annotations
      if (offset < text.length) {
        // transfer annotations which are after offset to the new node
        annotationHelpers.transferAnnotations(tx, path, offset, newItem.getPath(), 0);
        // truncate the original property
        tx.update(path, { type: 'delete', start: offset, end: text.length });
      }
      node.insertItemAt(itemPos + 1, newItem);
      tx.setSelection({
        type: 'property',
        path: newItem.getPath(),
        startOffset: 0
      });
    }
  }

  _merge (tx, node, coor, direction, containerPath) {
    // detect cases where list items get merged
    // within a single list node
    if (node.isList()) {
      const list = node;
      const itemId = coor.path[0];
      const item = tx.get(itemId);
      let itemPos = list.getItemPosition(item);
      const withinListNode = (
        (direction === 'left' && itemPos > 0) ||
        (direction === 'right' && itemPos < list.items.length - 1)
      );
      if (withinListNode) {
        itemPos = (direction === 'left') ? itemPos - 1 : itemPos;
        const target = list.getItemAt(itemPos);
        const targetLength = target.getLength();
        mergeListItems(tx, list.id, itemPos);
        tx.setSelection({
          type: 'property',
          path: target.getPath(),
          startOffset: targetLength,
          containerPath
        });
        return
      }
    }
    // in all other cases merge is done across node boundaries
    const nodeIds = tx.get(containerPath);
    const nodePos = node.getPosition();
    if (direction === 'left' && nodePos > 0) {
      this._mergeNodes(tx, containerPath, nodePos - 1, direction);
    } else if (direction === 'right' && nodePos < nodeIds.length - 1) {
      this._mergeNodes(tx, containerPath, nodePos, direction);
    }
  }

  _mergeNodes (tx, containerPath, pos, direction) {
    const nodeIds = tx.get(containerPath);
    const first = tx.get(nodeIds[pos]);
    let secondPos = pos + 1;
    const second = tx.get(nodeIds[secondPos]);
    if (first.isText()) {
      // Simplification for empty nodes
      if (first.isEmpty()) {
        removeAt(tx, containerPath, pos);
        secondPos--;
        deepDeleteNode(tx, first);
        // TODO: need to clear where to handle
        // selections ... probably better not to do it here
        setCursor(tx, second, containerPath, 'before');
        return
      }
      const target = first;
      const targetPath = target.getPath();
      const targetLength = target.getLength();
      if (second.isText()) {
        const source = second;
        const sourcePath = source.getPath();
        removeAt(tx, containerPath, secondPos);
        // append the text
        tx.update(targetPath, { type: 'insert', start: targetLength, text: source.getText() });
        // transfer annotations
        annotationHelpers.transferAnnotations(tx, sourcePath, 0, targetPath, targetLength);
        deepDeleteNode(tx, source);
        tx.setSelection({
          type: 'property',
          path: targetPath,
          startOffset: targetLength,
          containerPath
        });
      } else if (second.isList()) {
        const list = second;
        if (!second.isEmpty()) {
          const source = list.getFirstItem();
          const sourcePath = source.getPath();
          // remove merged item from list
          list.removeItemAt(0);
          // append the text
          tx.update(targetPath, { type: 'insert', start: targetLength, text: source.getText() });
          // transfer annotations
          annotationHelpers.transferAnnotations(tx, sourcePath, 0, targetPath, targetLength);
          // delete item and prune empty list
          deepDeleteNode(tx, source);
        }
        if (list.isEmpty()) {
          removeAt(tx, containerPath, secondPos);
          deepDeleteNode(tx, list);
        }
        tx.setSelection({
          type: 'property',
          path: targetPath,
          startOffset: targetLength,
          containerPath
        });
      } else {
        selectNode(tx, direction === 'left' ? first.id : second.id, containerPath);
      }
    } else if (first.isList()) {
      if (second.isText()) {
        const target = first.getLastItem();
        const targetPath = target.getPath();
        const targetLength = target.getLength();
        const third = (nodeIds.length > pos + 2) ? tx.get(nodeIds[pos + 2]) : null;
        if (second.getLength() === 0) {
          removeAt(tx, containerPath, secondPos);
          deepDeleteNode(tx, second);
        } else {
          const source = second;
          const sourcePath = source.getPath();
          removeAt(tx, containerPath, secondPos);
          tx.update(targetPath, { type: 'insert', start: targetLength, text: source.getText() });
          annotationHelpers.transferAnnotations(tx, sourcePath, 0, targetPath, targetLength);
          deepDeleteNode(tx, source);
        }
        // merge to lists if they were split by a paragraph
        if (third && third.type === first.type) {
          this._mergeTwoLists(tx, containerPath, first, third);
        }
        tx.setSelection({
          type: 'property',
          path: target.getPath(),
          startOffset: targetLength,
          containerPath
        });
      } else if (second.isList()) {
        /* istanbul ignore next */
        if (direction !== 'right') {
          // ATTENTION: merging two lists by using BACKSPACE is not possible,
          // as BACKSPACE will first turn the list into a paragraph
          throw new Error('Illegal state')
        }
        const item = first.getLastItem();
        this._mergeTwoLists(tx, containerPath, first, second);
        tx.setSelection({
          type: 'property',
          path: item.getPath(),
          startOffset: item.getLength(),
          containerPath
        });
      } else {
        selectNode(tx, direction === 'left' ? first.id : second.id, containerPath);
      }
    } else {
      if (second.isText() && second.isEmpty()) {
        removeAt(tx, containerPath, secondPos);
        deepDeleteNode(tx, second);
        setCursor(tx, first, containerPath, 'after');
      } else {
        selectNode(tx, direction === 'left' ? first.id : second.id, containerPath);
      }
    }
  }

  _mergeTwoLists (tx, containerPath, first, second) {
    const secondPos = second.getPosition();
    removeAt(tx, containerPath, secondPos);
    const secondItems = second.getItems().slice();
    for (let i = 0; i < secondItems.length; i++) {
      second.removeItemAt(0);
      first.appendItem(secondItems[i]);
    }
    deepDeleteNode(tx, second);
  }
}

/*
  Abstract base class for document editor APIs such as Transaction.

  It implements a turtle-graphics way of editing by maintaining a selection state
  and providing an interface for low- and high-level manipulation.

  Low-level manipulations are dispatched to the edited document instance.
  Higher-level manipulations involve complex manipulations keeping the selection in a correct state.
 */
class EditingInterface {
  constructor (doc, options = {}) {
    this._document = doc;
    this._selection = null;
    this._impl = options.editing || new Editing();
    this._direction = null;
  }

  dispose () {}

  getDocument () {
    return this._document
  }

  /* low-level API */

  get (...args) {
    return this._document.get(...args)
  }

  getProperty (...args) {
    return this._document.getProperty(...args)
  }

  contains (id) {
    return this._document.contains(id)
  }

  find (cssSelector) {
    return this._document.find(cssSelector)
  }

  findAll (cssSelector) {
    return this._document.findAll(cssSelector)
  }

  create (nodeData) {
    return this._document.create(nodeData)
  }

  delete (nodeId) {
    return this._document.delete(nodeId)
  }

  deepDeleteNode (nodeId) {
    return deepDeleteNode(this._document.get(nodeId))
  }

  set (path, value) {
    return this._document.set(path, value)
  }

  update (path, diffOp) {
    return this._document.update(path, diffOp)
  }

  updateNode (id, newProps) {
    return this._document.updateNode(id, newProps)
  }

  /* Selection API */

  createSelection (selData) {
    // TODO: we need to rethink this
    // I'd like to make it convenient for the 99% use cases
    // which means reusing containerPath and surfaceId
    // However, it does not work well for cases
    // where the surface changes
    // Even better would be just to have surfaceId, and derive
    // containerPath dynamically
    selData = augmentSelection(selData, this._selection);
    return this._document.createSelection(selData)
  }

  setSelection (sel) {
    if (!sel) {
      sel = Selection.nullSelection;
    } else if (isPlainObject(sel)) {
      sel = this.createSelection(sel);
    } else if (!sel.isNull()) {
      sel = augmentSelection(sel, this._selection);
    }
    this._selection = sel;
    return sel
  }

  getSelection () {
    return this._selection
  }

  get selection () {
    return this._selection
  }

  set selection (sel) {
    this.setSelection(sel);
  }

  /*
    ATTENTION/TODO: text direction could be different on different paragraphs
    I.e. it should probably be a TextNode property
  */
  get textDirection () {
    return this._direction
  }

  set textDirection (dir) {
    this._direction = dir;
  }

  /* High-level editing */

  annotate (annotationData) {
    const sel = this._selection;
    if (sel && (sel.isPropertySelection() || sel.isContainerSelection())) {
      return this._impl.annotate(this, annotationData)
    }
  }

  break () {
    if (this._selection && !this._selection.isNull()) {
      this._impl.break(this);
    }
  }

  copySelection () {
    const doc = this.getDocument();
    const sel = this._selection;
    if (sel && !sel.isNull() && !sel.isCollapsed()) {
      return copySelection(doc, this._selection)
    }
  }

  deleteSelection (options) {
    const sel = this._selection;
    if (sel && !sel.isNull() && !sel.isCollapsed()) {
      this._impl.delete(this, 'right', options);
    }
  }

  deleteCharacter (direction) {
    const sel = this._selection;
    if (!sel || sel.isNull()) ; else if (!sel.isCollapsed()) {
      this.deleteSelection();
    } else {
      this._impl.delete(this, direction);
    }
  }

  insertText (text) {
    const sel = this._selection;
    if (sel && !sel.isNull()) {
      this._impl.insertText(this, text);
    }
  }

  // insert an inline node with given data at the current selection
  insertInlineNode (inlineNode) {
    const sel = this._selection;
    if (sel && !sel.isNull() && sel.isPropertySelection()) {
      return this._impl.insertInlineNode(this, inlineNode)
    }
  }

  insertBlockNode (blockNode) {
    const sel = this._selection;
    if (sel && !sel.isNull()) {
      return this._impl.insertBlockNode(this, blockNode)
    }
  }

  paste (content) {
    const sel = this._selection;
    if (sel && !sel.isNull() && !sel.isCustomSelection()) {
      return this._impl.paste(this, content)
    }
  }

  switchTextType (nodeData) {
    const sel = this._selection;
    if (sel && !sel.isNull()) {
      return this._impl.switchTextType(this, nodeData)
    }
  }

  toggleList (params) {
    const sel = this._selection;
    if (sel && !sel.isNull()) {
      return this._impl.toggleList(this, params)
    }
  }

  indent () {
    const sel = this._selection;
    if (sel && !sel.isNull()) {
      return this._impl.indent(this)
    }
  }

  dedent () {
    const sel = this._selection;
    if (sel && !sel.isNull()) {
      return this._impl.dedent(this)
    }
  }

  /* Legacy low-level API */

  getIndex (...args) {
    return this._document.getIndex(...args)
  }

  getAnnotations (...args) {
    return this._document.getAnnotations(...args)
  }

  getSchema () {
    return this._document.getSchema()
  }

  createSnippet () {
    return this._document.createSnippet()
  }
}

function ContainerMixin (DocumentNode) {
  class AbstractContainer extends DocumentNode {
    getContentPath () {
      throw new Error('This method is abstract')
    }

    getContent () {
      const doc = this.getDocument();
      return doc.get(this.getContentPath())
    }

    contains (nodeId) {
      return this.getChildIndex(nodeId) >= 0
    }

    getNodeAt (idx) {
      const nodeId = this._getNodeIdAt(idx);
      if (nodeId) {
        return this.getDocument().get(nodeId)
      }
    }

    getNodes () {
      const doc = this.getDocument();
      return this.getContent().map(id => doc.get(id)).filter(Boolean)
    }

    getNodeIndex (id) {
      return this.getContent().indexOf(id)
    }

    getPath () {
      return this.getContentPath()
    }

    append (nodeId) {
      // allow to provide a node instance instead of nodeId
      const arg1 = arguments[0];
      if (!isString(arg1)) {
        if (arg1._isNode) {
          nodeId = arg1.id;
        }
      }
      return this.insertAt(this.length, nodeId)
    }

    insertAt (pos, nodeId) {
      const doc = this.getDocument();
      const length = this.length;
      if (!isNumber(pos) || pos < 0 || pos > length) {
        throw new Error('Index out of bounds')
      }
      if (!isString(nodeId)) {
        if (nodeId._isNode) {
          nodeId = nodeId.id;
        } else {
          throw new Error('Invalid argument.')
        }
      }
      doc.update(this.getContentPath(), { type: 'insert', pos: pos, value: nodeId });
    }

    remove (nodeId) {
      const pos = getContainerPosition(this.getDocument(), this.getContentPath(), nodeId);
      this.removeAt(pos);
    }

    removeAt (pos) {
      const length = this.length;
      if (pos >= 0 && pos < length) {
        const doc = this.getDocument();
        doc.update(this.getContentPath(), { type: 'delete', pos: pos });
      } else {
        throw new Error('Index out of bounds.')
      }
    }

    get length () {
      return this.getLength()
    }

    getLength () {
      return this.getContent().length
    }

    _getNodeIdAt (idx) {
      const content = this.getContent();
      if (idx < 0 || idx >= content.length) {
        // throw new Error('Array index out of bounds: ' + idx + ", " + content.length)
        return undefined
      } else {
        return content[idx]
      }
    }

    static isContainer () {
      return true
    }
  }
  return AbstractContainer
}

/*
  A Container represents a list of nodes.

  While most editing occurs on a property level (such as editing text),
  other things happen on a node level, e.g., breaking or mergin nodes,
  or spanning annotations so called ContainerAnnotations.
*/
class Container extends ContainerMixin(DocumentNode) {
  getContentPath () {
    return [this.id, 'nodes']
  }

  getContent () {
    return this.nodes
  }

  define () {
    return {
      type: '@container',
      nodes: { type: ['array', 'id'], default: [], owned: true }
    }
  }
}

/*
  Describes an annotation sticking on a container that can span over multiple
  nodes.

  @class

  @example

  ```js
  {
    "id": "subject_reference_1",
    "type": "subject_reference",
    "containerPath": ["body", "content"],
    "start": {
      "path": ["text_2", "content"],
      "offset": 100,
    },
    "end": {
      "path": ["text_4", "content"],
      "offset": 40
    }
  }
  ```
 */

class ContainerAnnotation extends AnnotationMixin(DocumentNode) {
  setHighlighted (highlighted, scope) {
    if (this.highlighted !== highlighted) {
      this.highlighted = highlighted;
      this.highlightedScope = scope;
      this.emit('highlighted', highlighted, scope);
      forEach(this.fragments, function (frag) {
        frag.emit('highlighted', highlighted, scope);
      });
    }
  }

  static isAnnotation () { return true }

  static isContainerAnnotation () { return true }

  define () {
    return {
      type: '@container-annotation',
      containerPath: { type: ['array', 'id'] },
      start: 'coordinate',
      end: 'coordinate'
    }
  }
}

class ContainerAnnotationIndex extends DocumentIndex {
  constructor () {
    super();
    this.byId = new TreeIndex();
  }

  select (node) {
    return node.isContainerAnnotation()
  }

  clear () {
    this.byId.clear();
  }

  get (containerPath, type) {
    let annotations = map$1(this.byId.get(String(containerPath)));
    if (isString(type)) {
      annotations = filter(annotations, DocumentIndex.filterByType);
    }
    return annotations
  }

  create (anno) {
    this.byId.set([String(anno.containerPath), anno.id], anno);
  }

  delete (anno) {
    this.byId.delete([String(anno.containerPath), anno.id]);
  }

  update(node, path, newValue, oldValue) { // eslint-disable-line
    // TODO should we support moving a container anno from one container to another?
  }
}

/*
  A data storage implemention that supports data defined via a {@link Schema},
  and incremental updates which are backed by a OT library.

  It forms the underlying implementation for {@link Document}.
 */
class Data extends EventEmitter {
  /**
    @param {Schema} schema
    @param {Object} [options]
  */
  constructor (schema, nodeFactory) {
    super();

    /* istanbul ignore start */
    if (!schema) {
      throw new Error('schema is mandatory')
    }
    if (!nodeFactory) {
      throw new Error('nodeFactory is mandatory')
    }
    /* istanbul ignore end */

    this.schema = schema;
    this.nodeFactory = nodeFactory;
    this.nodes = new Map();
    this.indexes = new Map();

    // Sometimes necessary to resolve issues with updating indexes in presence
    // of cyclic dependencies
    this.__QUEUE_INDEXING__ = false;
    this.queue = [];
  }

  /**
    Check if this storage contains a node with given id.

    @returns {bool} `true` if a node with id exists, `false` otherwise.
   */
  contains (id) {
    return Boolean(this.nodes.has(id))
  }

  /**
    Get a node or value via path.

    @param {String|String[]} path node id or path to property.
    @returns {Node|Object|Primitive|undefined} a Node instance, a value or undefined if not found.
   */
  get (path, strict) {
    const result = this._get(path);
    if (strict && result === undefined) {
      if (isString(path)) {
        throw new Error("Could not find node with id '" + path + "'.")
      } else if (!this.contains(path[0])) {
        throw new Error("Could not find node with id '" + path[0] + "'.")
      } else {
        throw new Error("Property for path '" + path + "' us undefined.")
      }
    }
    return result
  }

  _get (path) {
    if (!path) return undefined
    let result;
    if (isString(path)) {
      const id = path;
      result = this.nodes.get(id);
    } else if (path.length === 1) {
      const id = path[0];
      result = this.nodes.get(id);
    } else if (path.length > 1) {
      const id = path[0];
      const node = this.nodes.get(id);
      let val = node.get(path[1]);
      for (let i = 2; i < path.length; i++) {
        if (!val) return undefined
        val = val[path[i]];
      }
      result = val;
    }
    return result
  }

  /**
    Get the internal storage for nodes.

    @return The internal node storage.
   */
  getNodes () {
    return this.nodes
  }

  /**
    Create a node from the given data.

    @return {Node} The created node.
   */
  create (nodeData) {
    var node = this.nodeFactory.create(nodeData.type, nodeData);
    if (!node) {
      throw new Error('Illegal argument: could not create node for data:', nodeData)
    }
    if (this.contains(node.id)) {
      throw new Error('Node already exists: ' + node.id)
    }
    if (!node.id || !node.type) {
      throw new Error('Node id and type are mandatory.')
    }
    this.nodes.set(node.id, node);

    const change = {
      type: 'create',
      node
    };

    if (this.__QUEUE_INDEXING__) {
      this.queue.push(change);
    } else {
      this._updateIndexes(change);
    }

    return node
  }

  /**
    Delete the node with given id.

    @param {String} nodeId
    @returns {Node} The deleted node.
   */
  delete (nodeId) {
    const node = this.nodes.get(nodeId);
    if (!node) return
    node.dispose();
    this.nodes.delete(nodeId);

    const change = {
      type: 'delete',
      node: node
    };

    if (this.__QUEUE_INDEXING__) {
      this.queue.push(change);
    } else {
      this._updateIndexes(change);
    }

    return node
  }

  /**
    Set a property to a new value.

    @param {Array} property path
    @param {Object} newValue
    @returns {Node} The deleted node.
   */
  set (path, newValue) {
    const node = this.get(path[0]);
    const oldValue = this._set(path, newValue);
    var change = {
      type: 'set',
      node: node,
      path: path,
      newValue: newValue,
      oldValue: oldValue
    };
    if (this.__QUEUE_INDEXING__) {
      this.queue.push(change);
    } else {
      this._updateIndexes(change);
    }
    return oldValue
  }

  _set (path, newValue) {
    const oldValue = _setValue(this.nodes, path, newValue);
    return oldValue
  }

  /**
    Update a property incrementally.

    @param {Array} property path
    @param {Object} diff
    @returns {any} The value before applying the update.
  */
  update (path, diff) {
    const node = this.get(path[0]);
    let oldValue = this._get(path);
    let newValue;
    if (diff._isOperation) {
      // ATTENTION: array operations are done inplace
      if (diff._isArrayOperation) {
        const tmp = oldValue;
        oldValue = Array.from(oldValue);
        newValue = diff.apply(tmp);
      // ATTENTION: coordinate operations are done inplace
      } else if (diff._isCoordinateOperation) {
        const tmp = oldValue;
        oldValue = oldValue.clone();
        newValue = diff.apply(tmp);
      } else {
        newValue = diff.apply(oldValue);
      }
    } else {
      diff = this._normalizeDiff(oldValue, diff);
      if (isString(oldValue)) {
        switch (diff.type) {
          case 'delete': {
            newValue = oldValue.split('').splice(diff.start, diff.end - diff.start).join('');
            break
          }
          case 'insert': {
            newValue = [oldValue.substring(0, diff.start), diff.text, oldValue.substring(diff.start)].join('');
            break
          }
          default:
            throw new Error('Unknown diff type')
        }
      } else if (isArray(oldValue)) {
        newValue = oldValue.slice(0);
        switch (diff.type) {
          case 'delete': {
            newValue.splice(diff.pos, 1);
            break
          }
          case 'insert': {
            newValue.splice(diff.pos, 0, diff.value);
            break
          }
          default:
            throw new Error('Unknown diff type')
        }
      } else if (oldValue._isCoordinate) {
        switch (diff.type) {
          case 'shift': {
            // ATTENTION: in this case we do not want to create a new value
            oldValue = { path: oldValue.path, offset: oldValue.offset };
            newValue = oldValue;
            newValue.offset += diff.value;
            break
          }
          default:
            throw new Error('Unknown diff type')
        }
      } else {
        throw new Error('Diff is not supported:', JSON.stringify(diff))
      }
    }
    this._set(path, newValue);

    var change = {
      type: 'update',
      node: node,
      path: path,
      newValue: newValue,
      oldValue: oldValue
    };

    if (this.__QUEUE_INDEXING__) {
      this.queue.push(change);
    } else {
      this._updateIndexes(change);
    }

    return oldValue
  }

  // normalize to support legacy formats
  _normalizeDiff (value, diff) {
    if (isString(value)) {
      // legacy
      if (diff.delete) {
        console.warn('DEPRECATED: use doc.update(path, {type:"delete", start:s, end: e}) instead');
        diff = {
          type: 'delete',
          start: diff.delete.start,
          end: diff.delete.end
        };
      } else if (diff.insert) {
        console.warn('DEPRECATED: use doc.update(path, {type:"insert", start:s, text: t}) instead');
        diff = {
          type: 'insert',
          start: diff.insert.offset,
          text: diff.insert.value
        };
      }
    } else if (isArray(value)) {
      // legacy
      if (diff.delete) {
        console.warn('DEPRECATED: use doc.update(path, {type:"delete", pos:1}) instead');
        diff = {
          type: 'delete',
          pos: diff.delete.offset
        };
      } else if (diff.insert) {
        console.warn('DEPRECATED: use doc.update(path, {type:"insert", pos:1, value: "foo"}) instead');
        diff = {
          type: 'insert',
          pos: diff.insert.offset,
          value: diff.insert.value
        };
      }
    } else if (value._isCoordinate) {
      if (_isDefined(diff.shift)) {
        console.warn('DEPRECATED: use doc.update(path, {type:"shift", value:2}) instead');
        diff = {
          type: 'shift',
          value: diff.shift
        };
      }
    }
    return diff
  }

  /*
    DEPRECATED: We moved away from having JSON as first-class exchange format.
    We will remove this soon.

    @internal
    @deprecated
   */
  toJSON () {
    const nodes = {};
    for (const node of this.nodes.values()) {
      nodes[node.id] = node.toJSON();
    }
    return {
      schema: [this.schema.id, this.schema.version],
      nodes
    }
  }

  reset () {
    this.clear();
  }

  /**
    Clear nodes.

    @internal
   */
  clear () {
    this.nodes = new Map();
    for (const index of this.indexes.values()) {
      index.clear();
    }
  }

  /**
    Add a node index.

    @param {String} name
    @param {NodeIndex} index
   */
  addIndex (name, index) {
    if (this.indexes[name]) {
      console.error('Index with name %s already exists.', name);
    }
    index.reset(this);
    this.indexes.set(name, index);
    return index
  }

  /**
    Get the node index with given name.

    @param {String} name
    @returns {NodeIndex} The node index.
   */
  getIndex (name) {
    return this.indexes.get(name)
  }

  /**
    Update a node index by providing of change object.

    @param {Object} change
   */
  _updateIndexes (change) {
    if (!change || this.__QUEUE_INDEXING__) return
    for (const index of this.indexes.values()) {
      if (index.select(change.node)) {
        switch (change.type) {
          case 'create':
            index.create(change.node);
            break
          case 'delete':
            index.delete(change.node);
            break
          case 'set':
            index.set(change.node, change.path, change.newValue, change.oldValue);
            break
          case 'update':
            index.update(change.node, change.path, change.newValue, change.oldValue);
            break
          default:
            throw new Error('Illegal state.')
        }
      }
    }
  }

  /**
    Stops indexing process, all changes will be collected in indexing queue.

    @private
  */
  _stopIndexing () {
    this.__QUEUE_INDEXING__ = true;
  }

  /**
    Update all index changes from indexing queue.

    @private
  */
  _startIndexing () {
    this.__QUEUE_INDEXING__ = false;
    while (this.queue.length > 0) {
      var change = this.queue.shift();
      this._updateIndexes(change);
    }
  }
}

function _setValue (nodes, path, newValue) {
  // HACK: cloning the value so that we get independent copies
  if (isArray(newValue)) newValue = newValue.slice();
  else if (isPlainObject(newValue)) newValue = cloneDeep(newValue);

  if (!path || path.length < 2) {
    throw new Error('Illegal value path.')
  }
  const nodeId = path[0];
  const propName = path[1];
  const node = nodes.get(nodeId);
  if (!node) throw new Error(`Unknown node: ${nodeId}`)
  let oldValue = node.get(propName);
  const L = path.length;
  if (L > 2) {
    if (!oldValue) throw new Error('Can not set value.')
    let ctx = oldValue;
    for (let i = 2; i < L - 1; i++) {
      ctx = ctx[path[i]];
      if (!ctx) throw new Error('Can not set value.')
    }
    const valName = path[path.length - 1];
    oldValue = ctx[valName];
    ctx[valName] = newValue;
  } else {
    // _set() does not trigger an operation
    node._set(propName, newValue);
  }
  return oldValue
}

class TypeIndex extends NodeIndex {
  constructor (property) {
    super();

    this.byType = new TreeIndex.Arrays();
  }

  get (type) {
    return this.byType.get(type) || []
  }

  clear () {
    this.byType.clear();
  }

  select(node) { // eslint-disable-line
    return true
  }

  create (node) {
    const type = node.type;
    this.byType.add([type], node);
  }

  delete (node) {
    const type = node.type;
    this.byType.delete([type], node);
  }

  update () {
    // type can not be updated
    return false
  }

  _initialize (data) {
    const nodes = data.getNodes().values();
    for (const node of nodes) {
      if (this.select(node)) {
        this.create(node);
      }
    }
  }
}

class RelationshipIndex extends DocumentIndex {
  constructor () {
    super();

    this.reverseIndex = new Map();
  }

  select (node) {
    return node.getSchema().hasRelationshipProperties()
  }

  clear () {
    this.reverseIndex.clear();
  }

  get (id) {
    return this.reverseIndex.get(id) || new Set()
  }

  create (node) {
    const relProps = node.getSchema().getRelationshipProperties();
    for (const prop of relProps) {
      if (prop.isArray()) {
        const ids = node.get(prop.name);
        for (const id of ids) {
          this._add(id, node.id);
        }
      } else {
        const id = node.get(prop.name);
        this._add(id, node.id);
      }
    }
  }

  delete (node) {
    const relProps = node.getSchema().getRelationshipProperties();
    for (const prop of relProps) {
      if (prop.isArray()) {
        const ids = node.get(prop.name);
        for (const id of ids) {
          this._remove(id, node.id);
        }
      } else {
        const id = node.get(prop.name);
        this._remove(id, node.id);
      }
    }
  }

  update (node, path, newValue, oldValue) {
    const schema = node.getSchema();
    const propName = path[1];
    if (schema.isRelationship(propName)) {
      const prop = schema.getProperty(propName);
      if (prop.isArray()) {
        for (const id of oldValue) {
          this._remove(id, node.id);
        }
        for (const id of newValue) {
          this._add(id, node.id);
        }
      } else {
        this._remove(oldValue, node.id);
        this._add(newValue, node.id);
      }
    }
  }

  _add (id, ref) {
    if (!id || !ref) return
    let refs = this.reverseIndex.get(id);
    if (!refs) {
      refs = new Set();
      this.reverseIndex.set(id, refs);
    }
    refs.add(ref);
  }

  _remove (id, ref) {
    if (!id || !ref) return
    const refs = this.reverseIndex.get(id);
    if (refs) {
      refs.delete(ref);
    }
  }
}

/*
  Specification:

  - create:
    ```
    'c <JSON.stringify(data)>'
    'c { id: "1123", type: "paragraph", content: ""}'
    ```
  - delete:
    ```
    'd <JSON.stringify(data)>'
    'd { id: "1123", type: "paragraph", content: ""}'
    ```
  - set a property
    ```
    's <property path> <value> <old value>'
    's p1.content foo'
    ```
  - update a property
    ```
    'u <property path> <primitive op>'
    'u p1.content t+ 4 foo'
    ```

Primitive type operations:

  - insert text
    ```
    't+ <pos> <string>'
    't+ 4 foo'
    ```
  - delete text
    ```
    't- <pos> <string>'
    't- 4 foo'
    ```
  - insert value into array
    ```
    'a+ <pos> <value>'
    'a+ 0 p1'
    ```
  - delete value from array
    ```
    'a- <pos> <value>'
    'a- 0 p1'
    ```
*/

class OperationSerializer {
  constructor () {
    this.SEPARATOR = '\t';
  }

  serialize (op) {
    var out = [];
    switch (op.type) {
      case 'create':
        out.push('c');
        out.push(op.val.id);
        out.push(op.val);
        break
      case 'delete':
        out.push('d');
        out.push(op.val.id);
        out.push(op.val);
        break
      case 'set':
        out.push('s');
        out.push(op.path.join('.'));
        out.push(op.val);
        out.push(op.original);
        break
      case 'update':
        out.push('u');
        out.push(op.path.join('.'));
        Array.prototype.push.apply(out, this.serializePrimitiveOp(op.diff));
        break
      default:
        throw new Error('Unsupported operation type.')
    }
    return out
  }

  serializePrimitiveOp (op) {
    var out = [];
    if (op._isTextOperation) {
      if (op.isInsert()) {
        out.push('t+');
      } else if (op.isDelete()) {
        out.push('t-');
      }
      out.push(op.pos);
      out.push(op.str);
    } else if (op._isArrayOperation) {
      if (op.isInsert()) {
        out.push('a+');
      } else if (op.isDelete()) {
        out.push('a-');
      }
      out.push(op.pos);
      out.push(op.val);
    } else if (op._isCoordinateOperation) {
      if (op.isShift()) {
        out.push('c>>');
      } else {
        throw new Error('Unsupported CoordinateOperation type.')
      }
      out.push(op.pos);
      out.push(op.val);
    } else {
      throw new Error('Unsupported operation type.')
    }
    return out
  }

  deserialize (str, tokenizer) {
    if (!tokenizer) {
      tokenizer = new Tokenizer$2(str, this.SEPARATOR);
    }
    var type = tokenizer.getString();
    var op, path, val, oldVal, diff;
    switch (type) {
      case 'c':
        path = tokenizer.getPath();
        val = tokenizer.getObject();
        op = ObjectOperation.Create(path, val);
        break
      case 'd':
        path = tokenizer.getPath();
        val = tokenizer.getObject();
        op = ObjectOperation.Delete(path, val);
        break
      case 's':
        path = tokenizer.getPath();
        val = tokenizer.getAny();
        oldVal = tokenizer.getAny();
        op = ObjectOperation.Set(path, oldVal, val);
        break
      case 'u':
        path = tokenizer.getPath();
        diff = this.deserializePrimitiveOp(str, tokenizer);
        op = ObjectOperation.Update(path, diff);
        break
      default:
        throw new Error('Illegal type for ObjectOperation: ' + type)
    }
    return op
  }

  deserializePrimitiveOp (str, tokenizer) {
    if (!tokenizer) {
      tokenizer = new Tokenizer$2(str, this.SEPARATOR);
    }
    var type = tokenizer.getString();
    var op, pos, val;
    switch (type) {
      case 't+':
        pos = tokenizer.getNumber();
        val = tokenizer.getString();
        op = TextOperation.Insert(pos, val);
        break
      case 't-':
        pos = tokenizer.getNumber();
        val = tokenizer.getString();
        op = TextOperation.Delete(pos, val);
        break
      case 'a+':
        pos = tokenizer.getNumber();
        val = tokenizer.getAny();
        op = ArrayOperation.Insert(pos, val);
        break
      case 'a-':
        pos = tokenizer.getNumber();
        val = tokenizer.getAny();
        op = ArrayOperation.Delete(pos, val);
        break
      case 'c>>':
        val = tokenizer.getNumber();
        op = CoordinateOperation.Shift(val);
        break
      default:
        throw new Error('Unsupported operation type: ' + type)
    }
    return op
  }
}

class Tokenizer$2 {
  constructor (str, sep) {
    if (isArray(arguments[0])) {
      this.tokens = arguments[0];
    } else {
      this.tokens = str.split(sep);
    }
    this.pos = -1;
  }

  error (msg) {
    throw new Error('Parsing error: ' + msg + '\n' + this.tokens[this.pos])
  }

  getString () {
    this.pos++;
    var str = this.tokens[this.pos];
    if (str[0] === '"') {
      str = str.slice(1, -1);
    }
    return str
  }

  getNumber () {
    this.pos++;
    var number;
    var token = this.tokens[this.pos];
    try {
      if (isNumber(token)) {
        number = token;
      } else {
        number = parseInt(this.tokens[this.pos], 10);
      }
      return number
    } catch (err) {
      this.error('expected number');
    }
  }

  getObject () {
    this.pos++;
    var obj;
    var token = this.tokens[this.pos];
    try {
      if (isObject(token)) {
        obj = token;
      } else {
        obj = JSON.parse(this.tokens[this.pos]);
      }
      return obj
    } catch (err) {
      this.error('expected object');
    }
  }

  getAny () {
    this.pos++;
    var token = this.tokens[this.pos];
    return token
  }

  getPath () {
    var str = this.getString();
    return str.split('.')
  }

  static get Tokenizer () { return Tokenizer$2 }
}

class DocumentChange {
  constructor (ops, before, after, info = {}) {
    if (arguments.length === 1 && isPlainObject(arguments[0])) {
      const data = arguments[0];
      // a unique id for the change
      this.sha = data.sha;
      // when the change has been applied
      this.timestamp = data.timestamp;
      // application state before the change was applied
      this.before = data.before || {};
      this.info = data.info; // custom change info
      // application state after the change was applied
      this.after = data.after || {};
      // array of operations
      this.ops = data.ops || [];
    } else {
      this.sha = uuid();
      this.info = info;
      this.timestamp = Date.now();
      this.before = before || {};
      this.after = after || {};
      this.ops = ops.slice(0);
    }
    // a hash with all updated properties
    this.updated = null;
    // a hash with all created nodes
    this.created = null;
    // a hash with all deleted nodes
    this.deleted = null;
  }

  get primitiveOps () {
    // TODO: we might want to introduce higher-level ops
    // using change.primitiveOps instead of change.ops
    // allows us to do this move seemlessly
    return this.ops
  }

  /*
    Extract aggregated information about which nodes and properties have been affected.
    This gets called by Document after applying the change.
  */
  _extractInformation (doc) {
    // TODO: we should instead clean-up EditorSession et. al
    // For now we allow this method to be called multiple times, but only extract the details the first time
    if (this._extracted) return

    const primitiveOps = this.primitiveOps;
    const created = {};
    const deleted = {};
    const updated = {};
    const affectedContainerAnnos = [];

    // TODO: we will introduce a special operation type for coordinates
    function _checkAnnotation (op) {
      switch (op.type) {
        case 'create':
        case 'delete': {
          const node = op.val;
          if (_isDefined(node.start) && node.start.path) {
            updated[getKeyForPath(node.start.path)] = true;
          }
          if (_isDefined(node.end) && node.end.path) {
            updated[getKeyForPath(node.end.path)] = true;
          }
          break
        }
        case 'update':
        case 'set': {
          // HACK: detecting annotation changes in an opportunistic way
          const node = doc.get(op.path[0]);
          if (node) {
            if (node.isPropertyAnnotation()) {
              updated[getKeyForPath(node.start.path)] = true;
            } else if (node.isContainerAnnotation()) {
              affectedContainerAnnos.push(node);
            }
          }
          break
        }
          /* istanbul ignore next */
          // NOP
      }
    }

    for (const op of primitiveOps) {
      if (op.type === 'create') {
        created[op.val.id] = op.val;
        delete deleted[op.val.id];
      }
      if (op.type === 'delete') {
        delete created[op.val.id];
        deleted[op.val.id] = op.val;
      }
      if (op.type === 'set' || op.type === 'update') {
        updated[getKeyForPath(op.path)] = true;
        // also mark the node itself as dirty
        updated[op.path[0]] = true;
      }
      _checkAnnotation(op);
    }

    affectedContainerAnnos.forEach(anno => {
      const startPos = getContainerPosition(doc, anno.containerPath, anno.start.path[0]);
      const endPos = getContainerPosition(doc, anno.containerPath, anno.end.path[0]);
      const nodeIds = doc.get(anno.containerPath);
      for (let pos = startPos; pos <= endPos; pos++) {
        const node = doc.get(nodeIds[pos]);
        let path;
        if (node.isText()) {
          path = node.getPath();
        } else {
          path = [node.id];
        }
        if (!deleted[node.id]) {
          updated[getKeyForPath(path)] = true;
        }
      }
    });

    // remove all deleted nodes from updated
    if (Object.keys(deleted).length > 0) {
      forEach(updated, function (_, key) {
        const nodeId = key.split('.')[0];
        if (deleted[nodeId]) {
          delete updated[key];
        }
      });
    }

    this.created = created;
    this.deleted = deleted;
    this.updated = updated;

    this._extracted = true;
  }

  invert () {
    // shallow cloning this
    const copy = this.toJSON();
    copy.ops = [];
    // swapping before and after
    const tmp = copy.before;
    copy.before = copy.after;
    copy.after = tmp;
    const inverted = DocumentChange.fromJSON(copy);
    // ATTENTION: inverted ops need to be in reverse order
    inverted.ops = this.primitiveOps.map(op => op.invert()).reverse();
    return inverted
  }

  hasUpdated (path) {
    let key;
    if (isString(path)) {
      key = path;
    } else {
      key = getKeyForPath(path);
    }
    return this.updated[key]
  }

  hasDeleted (id) {
    return this.deleted[id]
  }

  serialize () {
    const opSerializer = new OperationSerializer();
    const data = this.toJSON();
    data.ops = this.ops.map(op => opSerializer.serialize(op));
    return JSON.stringify(data)
  }

  clone () {
    return DocumentChange.fromJSON(this.toJSON())
  }

  toJSON () {
    const data = {
      // to identify this change
      sha: this.sha,
      // before state
      before: clone(this.before),
      ops: this.ops.map(op => op.toJSON()),
      info: this.info,
      // after state
      after: clone(this.after)
    };

    // Just to make sure rich selection objects don't end up
    // in the JSON result
    data.after.selection = undefined;
    data.before.selection = undefined;

    let sel = this.before.selection;
    if (sel && sel._isSelection) {
      data.before.selection = sel.toJSON();
    }
    sel = this.after.selection;
    if (sel && sel._isSelection) {
      data.after.selection = sel.toJSON();
    }
    return data
  }

  static deserialize (str) {
    const opSerializer = new OperationSerializer();
    const data = JSON.parse(str);
    data.ops = data.ops.map(opData => opSerializer.deserialize(opData));
    if (data.before.selection) {
      data.before.selection = fromJSON(data.before.selection);
    }
    if (data.after.selection) {
      data.after.selection = fromJSON(data.after.selection);
    }
    return new DocumentChange(data)
  }

  static fromJSON (data) {
    // Don't write to original object on deserialization
    data = cloneDeep(data);
    data.ops = data.ops.map(opData => ObjectOperation.fromJSON(opData));
    data.before.selection = fromJSON(data.before.selection);
    data.after.selection = fromJSON(data.after.selection);
    return new DocumentChange(data)
  }
}

/**
  Incremental data storage implemention.

  @internal
 */
class IncrementalData extends Data {
  /**
    Create a new node.

    @param {object} nodeData
    @returns {ObjectOperation} The applied operation.
   */
  create (nodeData) {
    if (nodeData._isNode) {
      nodeData = nodeData.toJSON();
    }
    const op = ObjectOperation.Create([nodeData.id], nodeData);
    this.apply(op);
    return op
  }

  /**
    Delete a node.

    @param {String} nodeId
    @returns {ObjectOperation} The applied operation.
   */
  delete (nodeId) {
    var op = null;
    var node = this.get(nodeId);
    if (node) {
      var nodeData = node.toJSON();
      op = ObjectOperation.Delete([nodeId], nodeData);
      this.apply(op);
    }
    return op
  }

  /**
    Update a property incrementally.

    The diff can be of the following forms (depending on the updated property type):
      - String:
        - `{ insert: { offset: Number, value: Object } }`
        - `{ delete: { start: Number, end: Number } }`
      - Array:
        - `{ insert: { offset: Number, value: Object } }`
        - `{ delete: { offset: Number } }`

    @param {array} path
    @param {object} diff
    @returns {ObjectOperation} The applied operation.
  */
  update (path, diff) {
    var diffOp = this._getDiffOp(path, diff);
    var op = ObjectOperation.Update(path, diffOp);
    this.apply(op);
    return op
  }

  /**
    Set a property to a new value

    @param {Array} path
    @param {Object} newValue
    @returns {ObjectOperation} The applied operation.
   */
  set (path, newValue) {
    var oldValue = this.get(path);
    var op = ObjectOperation.Set(path, oldValue, newValue);
    this.apply(op);
    return op
  }

  /**
    Apply a given operation.

    @param {ObjectOperation} op
   */
  apply (op) {
    if (op.type === ObjectOperation.NOP) return
    else if (op.type === ObjectOperation.CREATE) {
      // clone here as the operations value must not be changed
      super.create(cloneDeep(op.val));
    } else if (op.type === ObjectOperation.DELETE) {
      super.delete(op.val.id);
    } else if (op.type === ObjectOperation.UPDATE) {
      const diff = op.diff;
      super.update(op.path, diff);
    } else if (op.type === ObjectOperation.SET) {
      super.set(op.path, op.val);
    } else {
      throw new Error('Illegal state.')
    }
    this.emit('operation:applied', op, this);
  }

  /**
    Creates proper operation based on provided node path and diff.

    @param {Array} path
    @param {Object} diff
    @returns {ObjectOperation} operation.
    @private
  */
  _getDiffOp (path, diff) {
    var diffOp = null;
    if (diff._isOperation) {
      diffOp = diff;
    } else {
      var value = this.get(path);
      diff = this._normalizeDiff(value, diff);
      if (value === null || value === undefined) {
        throw new Error('Property has not been initialized: ' + JSON.stringify(path))
      } else if (isString(value)) {
        switch (diff.type) {
          case 'delete': {
            diffOp = TextOperation.Delete(diff.start, value.substring(diff.start, diff.end));
            break
          }
          case 'insert': {
            diffOp = TextOperation.Insert(diff.start, diff.text);
            break
          }
          default:
            throw new Error('Unknown diff type')
        }
      } else if (isArray(value)) {
        switch (diff.type) {
          case 'delete': {
            diffOp = ArrayOperation.Delete(diff.pos, value[diff.pos]);
            break
          }
          case 'insert': {
            diffOp = ArrayOperation.Insert(diff.pos, diff.value);
            break
          }
          default:
            throw new Error('Unknown diff type')
        }
      } else if (value._isCoordinate) {
        switch (diff.type) {
          case 'shift': {
            diffOp = CoordinateOperation.Shift(diff.value);
            break
          }
          default:
            throw new Error('Unknown diff type')
        }
      }
    }
    if (!diffOp) {
      throw new Error('Unsupported diff: ' + JSON.stringify(diff))
    }
    return diffOp
  }
}

class DocumentNodeFactory {
  constructor (doc) {
    this.doc = doc;
  }

  create (nodeType, nodeData) {
    const NodeClass = this.doc.schema.getNodeClass(nodeType);
    if (!NodeClass) {
      throw new Error('No node registered by that name: ' + nodeType)
    }
    return new NodeClass(this.doc, nodeData)
  }
}

/*
  Note: this implementation is different to the core implementation
  in that regard that it serializes child nodes before their parents
*/
class JSONConverter {
  importDocument (doc, json) {
    doc.fromJson(json);
    return doc
  }

  exportDocument (doc) {
    var schema = doc.getSchema();
    var json = {
      schema: {
        name: schema.name
      },
      nodes: []
    };
    const visited = {};

    function _export (node) {
      if (!node) return
      if (visited[node.id]) return
      visited[node.id] = true;
      const nodeSchema = node.getSchema();
      const childProps = nodeSchema.getChildProperties();
      for (const prop of childProps) {
        const val = node.get(prop.name);
        if (isArray(val)) {
          val.forEach(id => {
            _export(doc.get(id));
          });
        } else {
          _export(doc.get(val));
        }
      }
      json.nodes.push(node.toJSON());
    }

    for (const node of doc.getNodes().values()) {
      _export(node);
    }

    return json
  }
}

/*
  This is an experiment trying to have better support for data types with a hierarchical
  nature, such as Lists, Tables etc.

  Our data model is inherently flat, and does not have any special support for hierarchical data types.
  The flat data model is essential for a simple OT implementation. Hierarchy is achieved by storing ids
  to reference child nodes.

  After longer discussions we agreed that we are very happy with the overlay nature
  of annotations, i.e., text is essentially modelled as plain text, and annotations are attached to it.
  This way we can map complex text manipulation to primitive object operations.
  For many other content types it would often be extremly helpful being able to traverse the structure in both
  directions, from parent to children (which is already possible), and back from children to parent.

  We do not want to store a the id of a parent node into the children, as this would be redundant, and would increase the amount of necessary operations.
  Instead we want to establish a link dynamically on the Node instance when the id is set in the parent (during construction or when updated).

  The most unobtrusive implementation is to add an 'operation:applied' hook, watching for such changes
  and setting the reference.
*/
class ParentNodeHook {
  constructor (doc) {
    this.doc = doc;

    // remembering parents for children, when nodes are loaded in wrong order
    // key: node.id, value: { parent, property }
    this.parents = {};

    doc.data.on('operation:applied', this._onOperationApplied, this);
  }

  _onOperationApplied (op) {
    const doc = this.doc;
    const node = doc.get(op.path[0]);
    let hasChildProperties = false;
    let isAnnotation = false;
    let nodeSchema;
    if (node) {
      nodeSchema = node.getSchema();
      hasChildProperties = nodeSchema.hasChildProperties();
      isAnnotation = node.isAnnotation();
    }
    switch (op.type) {
      case 'create': {
        if (hasChildProperties) {
          const childProps = nodeSchema.getChildProperties();
          for (const prop of childProps) {
            const isChildren = prop.isArray();
            const refs = node.get(prop.name);
            if (refs) {
              this._setParent(node, refs, prop.name, isChildren);
            }
            if (isChildren) this._updateContainerPositions([node.id, prop.name]);
          }
        }
        if (isAnnotation) {
          this._setAnnotationParent(node);
        }
        this._setRegisteredParent(node);
        break
      }
      case 'update': {
        if (hasChildProperties) {
          const propName = op.path[1];
          if (nodeSchema.isOwned(propName)) {
            const update = op.diff;
            const isChildren = update._isArrayOperation;
            if (update.isDelete()) {
              this._setParent(null, update.getValue(), propName, isChildren);
            } else {
              this._setParent(node, update.getValue(), propName, isChildren);
            }
            if (isChildren) this._updateContainerPositions(op.path);
          }
        }
        break
      }
      case 'set': {
        if (hasChildProperties) {
          const propName = op.path[1];
          if (nodeSchema.isOwned(propName)) {
            const prop = nodeSchema.getProperty(propName);
            const isChildren = prop.isArray();
            const oldValue = op.getOldValue();
            const newValue = op.getValue();
            // Note: _setParent takes either an array or a single id
            this._setParent(null, oldValue, propName, isChildren);
            this._setParent(node, newValue, propName, isChildren);
            if (isChildren) this._updateContainerPositions(op.path);
          }
        }
        if (isAnnotation && op.path[1] === 'start' && op.path[2] === 'path') {
          this._setAnnotationParent(node);
        }
        break
      }
        //
    }
  }

  _setParent (parent, ids, property, isChildren) {
    if (ids) {
      if (isArray(ids)) {
        ids.forEach(id => this.__setParent(parent, id, property, isChildren));
      } else {
        this.__setParent(parent, ids, property, isChildren);
      }
    }
  }

  __setParent (parent, id, property, isChildren) {
    const child = this.doc.get(id);
    if (child) {
      this._setParentAndXpath(parent, child, property);
    } else {
      // Note: it can happen, e.g. during deserialization, that the child node
      // is created later than the parent so we store the parent for later
      // While on Document.createFromDocument() we consider the order via dependeny analysis
      // this can still happen when a document is loaded from some other sources,
      // which does not take any measures to create nodes in a correct order.
      // So, we must be prepared.
      this.parents[id] = { parent, property, isChildren };
    }
  }

  _setRegisteredParent (child) {
    const entry = this.parents[child.id];
    if (entry) {
      const { parent, property, isChildren } = entry;
      this._setParentAndXpath(parent, child, property);
      if (parent && isChildren) {
        child._xpath.pos = parent[property].indexOf(child.id);
      }
      delete this.parents[child.id];
    }
  }

  _setParentAndXpath (parent, child, property) {
    child.setParent(parent);
    const xpath = child._xpath;
    if (parent) {
      xpath.prev = parent._xpath;
      xpath.property = property;
    } else {
      xpath.prev = null;
      xpath.property = null;
      // ATTENTION: need to remove this here, because
      // it will otherwise not be updated
      xpath.pos = null;
    }
  }

  _updateContainerPositions (containerPath) {
    const doc = this.doc;
    const ids = doc.get(containerPath);
    if (ids) {
      for (let pos = 0; pos < ids.length; pos++) {
        const id = ids[pos];
        const child = doc.get(id);
        if (child) {
          child._xpath.pos = pos;
        }
      }
    }
  }

  _setAnnotationParent (anno) {
    const doc = anno.getDocument();
    const path = anno.start.path;
    const annoParent = doc.get(path[0]);
    this._setParent(annoParent, anno.id, path[1]);
  }

  static register (doc) {
    return new ParentNodeHook(doc)
  }
}

const converter = new JSONConverter();

/**
  Basic implementation of a Document.

  @example

  ```js
  import { Document } from 'substance'

  class MyArticle extends Document {
    constructor(...args) {
      super(...args)

      this.addIndex('foo', FooIndex)
    }
  }
  ```
*/

class Document extends EventEmitter {
  /**
    @param {DocumentSchema} schema The document schema.
  */
  constructor (schema, ...args) {
    super();

    this.schema = schema;
    /* istanbul ignore next */
    if (!schema) {
      throw new Error('A document needs a schema for reflection.')
    }

    // used internally
    this._ops = [];

    this._initialize(...args);
  }

  _initialize () {
    this.__id__ = uuid();
    this.nodeFactory = new DocumentNodeFactory(this);
    this.data = new IncrementalData(this.schema, this.nodeFactory);
    // all by type
    this.addIndex('type', new TypeIndex('type'));
    // index for (property-scoped) annotations
    this.addIndex('annotations', new AnnotationIndex());
    // index for (container-scoped) annotations
    // TODO: enable this only if there is a container annotation in the schema
    this.addIndex('container-annotations', new ContainerAnnotationIndex());
    // a reverse-index for relationship type properties ('one' or 'many')
    // TODO: enable this only if there is a node with relationship property in the schema
    this.addIndex('relationships', new RelationshipIndex());
    // TODO: maybe we want to have a generalized concept for such low-level hooks
    ParentNodeHook.register(this);
  }

  dispose () {
    this.off();
    this.data.off();
  }

  get id () {
    return this.__id__
  }

  /**
    @returns {model/DocumentSchema} the document's schema.
  */
  getSchema () {
    return this.schema
  }

  /**
    Check if this storage contains a node with given id.

    @returns {Boolean} `true` if a node with id exists, `false` otherwise.
  */
  contains (id) {
    return this.data.contains(id)
  }

  /**
    Get a node or value via path.

    @param {String|String[]} path node id or path to property.
    @returns {DocumentNode|any|undefined} a Node instance, a value or undefined if not found.
  */
  get (path, strict) {
    return this.data.get(path, strict)
  }

  resolve (path, strict) {
    const prop = this.getProperty(path);
    if (!prop) {
      if (strict) {
        throw new Error('Invalid path')
      } else {
        return undefined
      }
    }
    const val = this.get(path, strict);
    if (prop.isReference()) {
      if (prop.isArray()) {
        return val.map(id => this.get(id))
      } else {
        return this.get(val)
      }
    } else {
      return val
    }
  }

  /**
    @return {Object} A hash of {@link model/DocumentNode} instances.
  */
  getNodes () {
    return this.data.getNodes()
  }

  getAnnotations (path) {
    return this.getIndex('annotations').get(path)
  }

  /**
   * Retrieve the NodeProperty for a given path
   *
   * @param {string[]} path
   */
  getProperty (path) {
    if (path.length !== 2) {
      throw new Error('path must have length=2')
    }
    const [nodeId, propName] = path;
    const node = this.get(nodeId);
    if (node) {
      return node.getSchema().getProperty(propName)
    } else {
      throw new Error('Invalid path.')
    }
  }

  fromJson (json) {
    try {
      // Node: json data may come in inappropriate order
      // where indexes could be choking
      this.data._stopIndexing();
      if (!json.nodes) {
        throw new Error('Invalid JSON format.')
      }
      // the json should just be an array of nodes
      const nodeEntries = json.nodes;
      nodeEntries.forEach(nodeData => {
        if (this.data.contains(nodeData.id)) {
          this.delete(nodeData.id);
        }
        this.create(nodeData);
      });
      this.data._startIndexing();
    } finally {
      this.data.queue = [];
      this.data._startIndexing();
    }
    return this
  }

  /**
    Create a node from the given data.

    @param {Object} plain node data.
    @return {DocumentNode} The created node.

    @example

    ```js
    editorSession.transaction((tx) => {
      tx.create({
        id: 'p1',
        type: 'paragraph',
        content: 'Hi I am a Substance paragraph.'
      })
    })
    ```
  */
  create (nodeData) {
    if (!nodeData.id) {
      nodeData.id = uuid(nodeData.type);
    }
    if (!nodeData.type) {
      throw new Error('No node type provided')
    }
    const op = this._create(nodeData);
    if (op) {
      this._ops.push(op);
      this._emitInternalChange(op);
      return this.get(nodeData.id)
    }
  }

  createDefaultTextNode (text, dir) {
    return this.create({
      type: this.getSchema().getDefaultTextType(),
      content: text || '',
      direction: dir
    })
  }

  /**
    Delete the node with given id.

    @param {String} nodeId
    @returns {DocumentNode} The deleted node.

    @example

    ```js
    doc.transaction(function(tx) {
      tx.delete('p1')
    })
    ```
  */
  delete (nodeId) {
    const node = this.get(nodeId);
    const op = this._delete(nodeId);
    if (op) {
      this._ops.push(op);
      this._emitInternalChange(op);
    }
    return node
  }

  /**
    Set a property to a new value.

    @param {String[]} property path
    @param {any} newValue
    @returns {DocumentNode} The deleted node.

    @example

    ```js
    doc.transaction(function(tx) {
      tx.set(['p1', 'content'], "Hello there! I'm a new paragraph.")
    })
    ```
  */
  set (path, value) {
    const oldValue = this.get(path);
    const op = this._set(path, value);
    if (op) {
      this._ops.push(op);
      this._emitInternalChange(op);
    }
    return oldValue
  }

  /**
    Update a property incrementally.

    @param {Array} property path
    @param {Object} diff
    @returns {any} The value before applying the update.

    @example

    Inserting text into a string property:
    ```
    doc.update(['p1', 'content'], { insert: {offset: 3, value: "fee"} })
    ```
    would turn "Foobar" into "Foofeebar".

    Deleting text from a string property:
    ```
    doc.update(['p1', 'content'], { delete: {start: 0, end: 3} })
    ```
    would turn "Foobar" into "bar".

    Inserting into an array:
    ```
    doc.update(['p1', 'content'], { insert: {offset: 2, value: 0} })
    ```
    would turn `[1,2,3,4]` into `[1,2,0,3,4]`.

    Deleting from an array:
    ```
    doc.update(['body', 'nodes'], { delete: { offset: 2 } })
    ```
    would turn `[1,2,3,4]` into `[1,2,4]`.
  */
  update (path, diff) {
    const op = this._update(path, diff);
    if (op) {
      this._ops.push(op);
      this._emitInternalChange(op);
    }
    return op
  }

  /*
    Update multiple properties of a node by delegating to Document.set for each
    changed property.
  */
  updateNode (id, newProps) {
    const node = this.get(id);
    forEach(newProps, (value, key) => {
      if (!isEqual(node.get(key), value)) {
        this.set([id, key], value);
      }
    });
  }

  /**
    Add a document index.

    @param {String} name
    @param {DocumentIndex} index
  */
  addIndex (name, index) {
    return this.data.addIndex(name, index)
  }

  /**
    @param {String} name
    @returns {DocumentIndex} the node index with given name.
  */
  getIndex (name) {
    return this.data.getIndex(name)
  }

  createSelection (data) {
    return createSelection(this, data)
  }

  newInstance () {
    var DocumentClass = this.constructor;
    return new DocumentClass(this.schema)
  }

  // useful in combination with paste transformation
  createSnippet () {
    var snippet = this.newInstance();
    var snippetContainer = snippet.create({
      type: '@container',
      id: SNIPPET_ID
    });
    snippet.getContainer = function () {
      return snippetContainer
    };
    return snippet
  }

  rebase (change, onto) {
    if (onto.length > 0) {
      // ATTENTION: rebase uses mostly the same implementation as transform with some exceptions
      // FIXME: IMO this is mostly because of wrong design
      // ATTENTION 2: treating 'onto' as immutable, only updating 'change'
      transformDocumentChange(onto, change, { rebase: true, immutableLeft: true });
    }
    return change
  }

  createFromDocument (doc) {
    // clear all content, otherwise there would be an inconsistent mixture
    this.clear();

    // Note: trying to bring the nodes into a correct order
    // so that they can be created safely without causing troubles
    // For example, a list-item should be created before its parent list.
    // But a paragraph should be created before their annotations
    // TODO: we should rethink the exception with annotations here
    // in XML the annotation would be a child of the paragraph
    // and thus should be created before hand. However our annotation indexes need the annotation target to exist.
    const nodes = Array.from(doc.getNodes().values());
    const levels = {};
    const visited = new Set();
    nodes.forEach(n => {
      if (!visited.has(n)) this._computeDependencyLevel(n, levels, visited);
    });
    // descending order: i.e. nodes with a deeper level get created first
    nodes.sort((a, b) => {
      return levels[b.id] - levels[a.id]
    });
    nodes.forEach(n => this.create(n));
    return this
  }

  _computeDependencyLevel (node, levels, visited) {
    if (!node) throw new Error('node was nil')
    if (visited.has(node)) throw new Error('Cyclic node dependency')
    visited.add(node);
    // HACK: as of the comment above, annotations are currently treated as overlay
    // not as children. So we assign level -1 to all annotations, meaning
    // that they are 'on-top-of' the content, and being created at the very last
    let level = 0;
    if (node.isAnnotation() || node.isInlineNode()) {
      level = -1;
    } else {
      const parent = node.getParent();
      if (parent) {
        let parentLevel;
        if (hasOwnProperty(levels, parent.id)) {
          parentLevel = levels[parent.id];
        } else {
          parentLevel = this._computeDependencyLevel(parent, levels, visited);
        }
        level = parentLevel + 1;
      }
    }
    levels[node.id] = level;
    return level
  }

  /**
    Convert to JSON.

    @returns {Object} Plain content.
  */
  toJSON () {
    return converter.exportDocument(this)
  }

  clone () {
    const copy = this.newInstance();
    copy.createFromDocument(this);
    return copy
  }

  clear () {
    this.data.clear();
    this._ops.length = 0;
  }

  /*
    Provides a high-level turtle-graphics style interface
    to this document
  */
  createEditingInterface () {
    return new EditingInterface(this)
  }

  invert (change) {
    return change.invert()
  }

  _apply (documentChange) {
    const ops = documentChange.ops;
    for (const op of ops) {
      this._applyOp(op);
    }
    // extract aggregated information, such as which property has been affected etc.
    documentChange._extractInformation(this);
  }

  _applyOp (op) {
    this.data.apply(op);
    this.emit('operation:applied', op);
  }

  _create (nodeData) {
    return this.data.create(nodeData)
  }

  _delete (nodeId) {
    return this.data.delete(nodeId)
  }

  _set (path, value) {
    return this.data.set(path, value)
  }

  _update (path, diff) {
    return this.data.update(path, diff)
  }

  _createDocumentChange (ops, before, after, info) {
    return new DocumentChange(ops, before, after, info)
  }

  _emitInternalChange (op) {
    const change = this._createDocumentChange([op], {}, {});
    change._extractInformation(this);
    this.emit('document:changed:internal', change, this);
  }

  _notifyChangeListeners (change, info = {}) {
    this.emit('document:changed', change, info, this);
  }

  // NOTE: this is still here because DOMSelection is using it
  _createSelectionFromRange (range) {
    if (!range) return Selection.nullSelection
    const inOneNode = isEqual(range.start.path, range.end.path);
    if (inOneNode) {
      if (range.start.isNodeCoordinate()) {
        // ATTENTION: we only create full NodeSelections
        // when mapping from the DOM to Model  return new NodeSelection(range.containerPath, range.start.getNodeId(), mode, range.reverse, range.surfaceId)
        return new NodeSelection(range.containerPath, range.start.getNodeId(), 'full', range.reverse, range.surfaceId)
      } else {
        return this.createSelection({
          type: 'property',
          path: range.start.path,
          startOffset: range.start.offset,
          endOffset: range.end.offset,
          reverse: range.reverse,
          containerPath: range.containerPath,
          surfaceId: range.surfaceId
        })
      }
    } else {
      return this.createSelection({
        type: 'container',
        startPath: range.start.path,
        startOffset: range.start.offset,
        endPath: range.end.path,
        endOffset: range.end.offset,
        reverse: range.reverse,
        containerPath: range.containerPath,
        surfaceId: range.surfaceId
      })
    }
  }

  get _isDocument () { return true }
}

/*
  Registry for Nodes.

  @class NodeRegistry
  @extends util/Registry
 */
class NodeRegistry extends DeprecatedRegistry {
  /**
    Register a Node class.

    @param {Class} nodeClass
   */
  register (nodeClazz) {
    var type = nodeClazz.prototype.type;
    if (!isString(type) || !type) {
      throw new Error('Node type must be string and not empty')
    }
    if (!(nodeClazz.prototype._isNode)) {
      throw new Error('Nodes must be subclasses of Substance.Data.Node')
    }
    if (this.contains(type)) {
      // throw new Error('Node class is already registered: ' + type)
      console.info('Overriding node type', type);
      this.remove(type);
    }
    this.add(type, nodeClazz);
  }
}

/**
  Schema for Data Objects.

  @internal
 */
class Schema {
  /**
    @param {String} name
    @param {String} version
  */
  constructor (options) {
    // new version of the API
    // the old one will be deprecated
    // because we think name and version should be optional
    if (arguments.length > 1) {
      console.warn('DEPRECATED: use "new Schema(options)" instead');
      options = { name: arguments[0], version: arguments[1] };
    }

    /**
      @type {String}
    */
    this.name = options.name;
    /**
      @type {String}
    */
    this.version = options.version;
    /**
      @type {NodeRegistry}
      @private
    */
    this.nodeRegistry = new NodeRegistry();

    // add built-in node classes
    this.addNodes(this.getBuiltIns());

    if (options.nodes) {
      this.addNodes(options.nodes);
    }
  }

  /**
    Add nodes to the schema.

    @param {Array} nodes Array of Node classes
  */
  addNodes (nodes) {
    if (!nodes) return
    forEach(nodes, NodeClass => {
      if (!NodeClass.prototype._isNode) {
        console.error('Illegal node class: ', NodeClass);
      } else {
        this.addNode(NodeClass);
      }
    });
  }

  addNode (NodeClass) {
    this.nodeRegistry.register(NodeClass);
  }

  /**
    Get the node class for a type name.

    @param {String} name
    @returns {Class}
  */
  getNodeClass (name, strict) {
    return this.nodeRegistry.get(name, strict)
  }

  /**
    Provide all built-in node classes.

    @private
    @returns {Node[]} An array of Node classes.
  */
  getBuiltIns () {
    return []
  }

  /**
    Checks if a given type is of given parent type.

    @param {String} type
    @param {String} parentType
    @returns {Boolean} true if type is and instance of parentType.
  */
  isInstanceOf (type, parentType) {
    var NodeClass = this.getNodeClass(type);
    if (NodeClass) {
      return Node.isInstanceOf(NodeClass, parentType)
    }
    return false
  }

  /**
    Iterate over all registered node classes.

    See {@link util/Registry#each}

    @param {Function} callback
    @param {Object} context
  */
  each (...args) {
    return this.nodeRegistry.each(...args)
  }

  /**
    @returns {String} the name of the default textish node (e.g. 'paragraph')
  */
  getDefaultTextType () {
    throw new Error('Schmema.prototype.getDefaultTextType() must be overridden.')
  }

  getNodeSchema (type) {
    var NodeClass = this.getNodeClass(type);
    if (!NodeClass) {
      console.error('Unknown node type ', type);
      return null
    }
    return NodeClass.schema
  }
}

/**
  A property annotation can be used to overlay text and give it a special meaning.
  PropertyAnnotations only work on text properties. If you want to annotate multiple
  nodes you have to use a {@link model/ContainerAnnotation}.

  @prop {String[]} path Identifies a text property in the document (e.g. `['text_1', 'content']`)
  @prop {Number} startOffset the character where the annoation starts
  @prop {Number} endOffset: the character where the annoation starts

  @example

  Here's how a **strong** annotation is created. In Substance annotations are stored
  separately from the text. Annotations are just regular nodes in the document.
  They refer to a certain range (`startOffset, endOffset`) in a text property (`path`).

  ```js
  doc.transaction(function(tx) {
    tx.create({
      id: 's1',
      type: 'strong',
      start: {
        path: ['p1', 'content'],
        offset: 10
      },
      end: {
        offset
      }
      path: ['p1', 'content'],
      "startOffset": 10,
      "endOffset": 19
    })
  })
  ```
*/
class PropertyAnnotation extends AnnotationMixin(DocumentNode) {
  // TODO: find out where we use these and try to get rid if we don't need them
  get _isAnnotation () { return true }

  get _isPropertyAnnotation () { return true }

  static isPropertyAnnotation () { return true }

  static get autoExpandRight () { return true }

  define () {
    return {
      type: '@annotation',
      // this is only used when an annotation is used 'stand-alone'
      // i.e. not attached to a property
      _content: { type: 'string', optional: true }
    }
  }
}

class DocumentSchema extends Schema {
  constructor (schemaSpec) {
    super(schemaSpec);
    /* istanbul ignore next */
    if (!schemaSpec.DocumentClass) {
      throw new Error('DocumentClass is mandatory')
    }
    Object.assign(this, schemaSpec);
  }

  getDocumentClass () {
    return this.DocumentClass
  }

  /*
    @override
  */
  getDefaultTextType () {
    return this.defaultTextType
  }

  /*
    @override
  */
  getBuiltIns () {
    return [DocumentNode, PropertyAnnotation, Container, ContainerAnnotation]
  }
}

class DOMExporter {
  constructor (params, options = {}) {
    if (!params.converters) {
      throw new Error('params.converters is mandatory')
    }
    // NOTE: Subclasses (HTMLExporter and XMLExporter) must initialize this
    // with a proper DOMElement instance which is used to create new elements.
    if (!params.elementFactory) {
      throw new Error("'elementFactory' is mandatory")
    }
    this.converters = new DeprecatedRegistry();
    params.converters.forEach(Converter => {
      const converter = isFunction(Converter) ? new Converter() : Converter;
      if (!converter.type) {
        console.error('Converter must provide the type of the associated node.', converter);
        return
      }
      this.converters.add(converter.type, converter);
    });
    this.elementFactory = params.elementFactory;
    this.idAttribute = params.idAttribute || 'id';
    this.state = { doc: null };
    this.options = options;
    this.$$ = this.createElement.bind(this);
  }

  exportDocument (doc) {
    // TODO: this is no left without much functionality
    // still, it would be good to have a consistent top-level API
    // i.e. converter.importDocument(el) and converter.exportDocument(doc)
    // On the other side, the 'internal' API methods are named this.convert*.
    return this.convertDocument(doc)
  }

  /**
   * @param {Document}
   * @returns {DOMElement|DOMElement[]} The exported document as DOM or an array of elements
   *          if exported as partial, which depends on the actual implementation
   *          of `this.convertDocument()`.
   *
   * @abstract
   * @example
   *
   * convertDocument(doc) {
   *   let container = doc.get('body')
   *   let elements = this.convertContainer(container)
   *   let out = elements.map(el => {
   *     return el.outerHTML
   *   })
   *   return out.join('')
   * }
   */
  convertDocument(doc) { // eslint-disable-line
    throw new Error('This method is abstract')
  }

  convertContainer (doc, containerPath) {
    if (!containerPath) {
      throw new Error('Illegal arguments: containerPath is mandatory.')
    }
    this.state.doc = doc;
    const ids = doc.get(containerPath);
    const elements = ids.map(id => {
      const node = doc.get(id);
      return this.convertNode(node)
    });
    return elements
  }

  convertNode (node) {
    this.state.doc = node.getDocument();
    let converter = this.getNodeConverter(node);
    // special treatment for annotations, i.e. if someone calls
    // `exporter.convertNode(anno)`
    if (node.isPropertyAnnotation() && (!converter || !converter.export)) {
      return this._convertPropertyAnnotation(node)
    }
    if (!converter) {
      converter = this.getDefaultBlockConverter();
    }
    let el;
    if (converter.tagName) {
      el = this.$$(converter.tagName);
    } else {
      el = this.$$('div');
    }
    el.attr(this.idAttribute, node.id);
    if (converter.export) {
      el = converter.export(node, el, this) || el;
    } else {
      el = this.getDefaultBlockConverter().export(node, el, this) || el;
    }
    return el
  }

  convertProperty (doc, path, options) {
    this.state.doc = doc;
    this.initialize(doc, options);
    const wrapper = this.$$('div')
      .append(this.annotatedText(path));
    return wrapper.innerHTML
  }

  annotatedText (path, doc) {
    doc = doc || this.state.doc;
    const text = doc.get(path);
    const annotations = doc.getIndex('annotations').get(path);
    return this._annotatedText(text, annotations)
  }

  getNodeConverter (node) {
    return this.converters.get(node.type)
  }

  getDefaultBlockConverter () {
    throw new Error('This method is abstract.')
  }

  getDefaultPropertyAnnotationConverter () {
    throw new Error('This method is abstract.')
  }

  getDocument () {
    return this.state.doc
  }

  createElement (str) {
    return this.elementFactory.createElement(str)
  }

  _annotatedText (text, annotations) {
    const annotator = new Fragmenter();
    annotator.onText = (context, text) => {
      if (text) {
        // ATTENTION: only encode if this is desired, e.g. '"' would be encoded as '&quot;' but as Clipboard HTML this is not understood by
        // other applications such as Word.
        if (this.options.ENCODE_ENTITIES_IN_TEXT) {
          text = encodeXMLEntities(text);
        }
        context.children.push(text);
      }
    };
    annotator.onOpen = function (fragment) {
      return {
        children: []
      }
    };
    annotator.onClose = (fragment, context, parentContext) => {
      const anno = fragment.node;
      let converter = this.getNodeConverter(anno);
      if (!converter) {
        converter = this.getDefaultPropertyAnnotationConverter();
      }
      let el;
      if (converter.tagName) {
        el = this.$$(converter.tagName);
      } else {
        el = this.$$('span');
      }
      el.attr(this.idAttribute, anno.id);
      // inline nodes are special, because they are like an island in the text:
      // In a Substance TextNode, an InlineNode is anchored on an invisible character.
      // In the XML presentation, however, this character must not be inserted, instead the element
      // converted and then inserted at the very same location.
      if (anno.isInlineNode()) {
        if (converter.export) {
          el = converter.export(anno, el, this) || el;
        } else {
          el = this.convertNode(anno) || el;
        }
      } else if (anno.isAnnotation()) {
        // allowing to provide a custom exporter
        // ATTENTION: a converter for the children of an annotation must not be
        if (converter.export) {
          el = converter.export(anno, el, this) || el;
          if (el.children.length) {
            throw new Error('A converter for an annotation type must not convert children. The content of an annotation is owned by their TextNode.')
          }
        }
        el.append(context.children);
      } else {
        // TODO: this should not be possible from the beginning. Seeing this error here, is pretty late.
        throw new Error('Illegal element type: only inline nodes and annotations are allowed within a TextNode')
      }
      parentContext.children.push(el);
    };
    const wrapper = { children: [] };
    annotator.start(wrapper, text, annotations);
    return wrapper.children
  }

  /*
    This is used when someone calls `exporter.convertNode(anno)`
    Usually, annotations are converted by calling exporter.annotatedText(path).
    Still it makes sense to be able to export just a fragment containing just
    the annotation element.
  */
  _convertPropertyAnnotation (anno) {
    // take only the annotations within the range of the anno
    const wrapper = this.$$('div').append(this.annotatedText(anno.path));
    const el = wrapper.find('[' + this.idAttribute + '="' + anno.id + '"]');
    return el
  }
}

const WS_LEFT = /^\s+/g;
// TODO: this is probably incorrect, /^\s*/ would always be a match
// const WS_LEFT_ALL = /^\s*/g
const WS_RIGHT = /\s+$/g;
const WS_ALL = /\s+/g;
// var ALL_WS_NOTSPACE_LEFT = /^[\t\n]+/g
// var ALL_WS_NOTSPACE_RIGHT = /[\t\n]+$/g
const SPACE = ' ';
const TABS_OR_NL = /[\t\n\r]+/g;

const INVISIBLE_CHARACTER = '\u200B';

/**
 * A generic base implementation for XML/HTML importers.
 *
 * @param {object[]} params.converters a list of converters
 * @param {object[]} params.idAttribute the attribute to use as id
 * @param {Document} doc an empty document instance used to import into
 */
class DOMImporter {
  constructor (params, doc, options = {}) {
    if (!params.converters) {
      throw new Error('"params.converters" is mandatory')
    }
    if (!doc) {
      throw new Error('"doc" is mandatory')
    }
    this.converters = params.converters;
    this.idAttribute = params.idAttribute || 'id';
    this.options = options;

    this._defaultBlockConverter = null;
    this._allConverters = [];
    this._blockConverters = [];
    this._propertyAnnotationConverters = [];

    this.state = new DOMImporter.State();
    // initially start with the provided document instance
    this.state.doc = doc;

    this._initialize();
  }

  /*
    Goes through all converters, checks their consistency
    and registers them depending on the type in different sets.
  */
  _initialize () {
    const schema = this._getSchema();
    const converters = this.converters;
    // LEGACY: in older versions we had a globally defined defaultTextType
    const defaultTextType = schema.getDefaultTextType();
    for (let i = 0; i < converters.length; i++) {
      let converter;
      if (typeof converters[i] === 'function') {
        const Converter = converters[i];
        converter = new Converter();
      } else {
        converter = converters[i];
      }
      if (!converter.type) {
        throw new Error('Converter must provide the type of the associated node.')
      }
      if (!converter.matchElement && !converter.tagName) {
        throw new Error('Converter must provide a matchElement function or a tagName property.')
      }
      if (!converter.matchElement) {
        converter.matchElement = this._defaultElementMatcher.bind(converter);
      }
      const NodeClass = schema.getNodeClass(converter.type);
      if (!NodeClass) {
        throw new Error('No node type defined for converter')
      }
      // LEGACY: see above
      // TODO: try to get rid of this
      if (defaultTextType && !this._defaultBlockConverter && defaultTextType === converter.type) {
        this._defaultBlockConverter = converter;
      }
      this._allConverters.push(converter);
      // Defaults to _blockConverters
      // TODO: rename '_propertyAnnotationConverters' to 'inlineElementConverters'
      // TODO: what about anchors and ContainerAnnotations?
      if (NodeClass.isPropertyAnnotation() || NodeClass.isInlineNode()) {
        this._propertyAnnotationConverters.push(converter);
      } else {
        this._blockConverters.push(converter);
      }
    }
  }

  dispose () {
    if (this.state.doc) {
      this.state.doc.dispose();
    }
  }

  /**
   * Resets this importer.
   *
   * Make sure to either create a new importer instance or call this method
   * when you want to generate nodes belonging to different documents.
   */
  reset () {
    if (this.state.doc) {
      this.state.doc.dispose();
    }
    this.state.reset();
    this.state.doc = this._createDocument();
  }

  getDocument () {
    return this.state.doc
  }

  /**
   * Converts all children of a given element and creates a Container node.
   *
   * @param {DOMElement[]} elements All elements that should be converted into the container.
   * @param {String} containerId The id of the target container node.
   * @returns {Container} the container node
   */
  convertContainer (elements, containerId) {
    if (!this.state.doc) this.reset();
    const state = this.state;
    const iterator = new ArrayIterator(elements);
    const nodeIds = [];
    while (iterator.hasNext()) {
      const el = iterator.next();
      let node;
      const blockTypeConverter = this._getConverterForElement(el, 'block');
      if (blockTypeConverter) {
        state.pushContext(el.tagName, blockTypeConverter);
        let nodeData = this._createNodeData(el, blockTypeConverter.type);
        nodeData = blockTypeConverter.import(el, nodeData, this) || nodeData;
        node = this._createNode(nodeData);
        const context = state.popContext();
        context.annos.forEach((a) => {
          this._createNode(a);
        });
      } else if (el.isCommentNode()) {
        continue
      } else {
        // skip empty text nodes
        if (el.isTextNode() && /^\s*$/.exec(el.textContent)) continue
        // If we find text nodes on the block level we wrap
        // it into a paragraph element (or what is configured as default block level element)
        iterator.back();
        node = this._wrapInlineElementsIntoBlockElement(iterator);
      }
      if (node) {
        nodeIds.push(node.id);
      }
    }
    return this._createNode({
      type: '@container',
      id: containerId,
      nodes: nodeIds
    })
  }

  /**
   * Converts a single HTML element and creates a node in the current document.
   *
   * @param {DOMElement} el the HTML element
   * @returns {object} the created node as JSON
   */
  convertElement (el) {
    const schema = this._getSchema();
    if (!this.state.doc) this.reset();
    const isTopLevel = !this.state.isConverting;
    if (isTopLevel) {
      this.state.isConverting = true;
    }

    let nodeData, annos;
    const converter = this._getConverterForElement(el);
    if (converter) {
      const NodeClass = schema.getNodeClass(converter.type);
      nodeData = this._createNodeData(el, converter.type);
      this.state.pushContext(el.tagName, converter);
      // Note: special treatment for property annotations and inline nodes
      // i.e. if someone calls `importer.convertElement(annoEl)`
      // usually, annotations are imported via `importer.annotatedText(..)`
      // The peculiarity here is that in such a case, it is not
      // not clear, which property the annotation should be attached to.
      if (NodeClass.isInlineNode()) {
        nodeData = this._convertInlineNode(el, nodeData, converter);
      } else if (NodeClass.isPropertyAnnotation()) {
        nodeData = this._convertPropertyAnnotation(el, nodeData);
      } else {
        nodeData = converter.import(el, nodeData, this) || nodeData;
      }
      const context = this.state.popContext();
      annos = context.annos;
    } else {
      throw new Error('No converter found for ' + el.tagName)
    }
    // create the node
    const node = this._createNode(nodeData);
    // and all annos which have been created during this call
    annos.forEach((a) => {
      this._createNode(a);
    });

    // HACK: to allow using an importer stand-alone
    // i.e. creating detached elements
    if (this.options['stand-alone'] && isTopLevel) {
      this.state.isConverting = false;
      this.reset();
    }
    return node
  }

  /**
   * Convert annotated text. You should call this method only for elements
   * containing rich-text.
   *
   * @param {DOMElement} el
   * @param {String[]} path The target property where the extracted text (plus annotations) should be stored.
   * @param {Object} options
   * @param {Boolean} options.preserveWhitespace when true will preserve whitespace. Default: false.
   * @returns {String} The converted text as plain-text
   *
   * @example
   *
   * ```
   * p.content = converter.annotatedText(pEl, [p.id, 'content'])
   * ```
   */
  annotatedText (el, path, options = {}) {
    if (!path) {
      throw new Error('path is mandatory')
    }
    const state = this.state;
    const context = last(state.contexts);
    // NOTE: this API is meant for node converters, which have been triggered
    // via convertElement().
    if (!context) {
      throw new Error('This should be called from within an element converter.')
    }
    // TODO: are there more options?
    const oldPreserveWhitespace = state.preserveWhitespace;
    if (options.preserveWhitespace) {
      state.preserveWhitespace = true;
    }
    state.stack.push({ path: path, offset: 0, text: '', annos: [] });
    // IMO we should reset the last char, as it is only relevant within one
    // annotated text property. This feature is mainly used to eat up
    // whitespace in XML/HTML at tag boundaries, produced by pretty-printed XML/HTML.
    this.state.lastChar = '';
    const iterator = this.getChildNodeIterator(el);
    const text = this._annotatedText(iterator);
    // now we can create all annotations which have been created during this
    // call of annotatedText
    const top = state.stack.pop();
    context.annos = context.annos.concat(top.annos);

    // reset state
    state.preserveWhitespace = oldPreserveWhitespace;

    return text
  }

  /**
   * Converts the given element as plain-text.
   *
   * @param {DOMElement} el
   * @returns {String} The plain text
   */
  plainText (el) {
    var state = this.state;
    var text = el.textContent;
    if (state.stack.length > 0) {
      var context = last(state.stack);
      context.offset += text.length;
      context.text += context.text.concat(text);
    }
    return text
  }

  /**
   * Tells the converter to insert custom text.
   *
   * During conversion of annotatedText this is used to insert different
   * text than taken from the DOM. E.g., for inline nodes we insert an invisible
   * character instead of the inner content.
   *
   * @private
   * @param {String}
   */
  _customText (text) {
    var state = this.state;
    if (state.stack.length > 0) {
      var context = last(state.stack);
      context.offset += text.length;
      context.text += context.text.concat(text);
    }
    return text
  }

  /**
   * Generates an id. The generated id is unique with respect to all ids generated so far.
   *
   * @param {String} prefix
   * @return {String} the generated id
   */
  nextId (prefix) {
    // TODO: we could create more beautiful ids?
    // however we would need to be careful as there might be another
    // element in the HTML coming with that id
    // For now we use shas
    return this.state.uuid(prefix)
  }

  _getNextId (dom, type) {
    let id = this.nextId(type);
    while (this.state.ids[id] || dom.find('#' + id)) {
      id = this.nextId(type);
    }
    return id
  }

  _getIdForElement (el, type) {
    const id = el.getAttribute(this.idAttribute);
    if (id && !this.state.ids[id]) return id
    return this._getNextId(el.getOwnerDocument(), type)
  }

  _getSchema () {
    return this.state.doc.getSchema()
  }

  _createDocument () {
    return this.state.doc.newInstance()
  }

  _convertPropertyAnnotation (el, nodeData) {
    const path = [nodeData.id, '_content'];
    // if there is no context, this is called stand-alone
    // i.e., user tries to convert an annotation element
    // directly, not part of a block element, such as a paragraph
    nodeData._content = this.annotatedText(el, path);
    nodeData.start = { path, offset: 0 };
    nodeData.end = { offset: nodeData._content.length };
    return nodeData
  }

  _convertInlineNode (el, nodeData, converter) {
    const path = [nodeData.id, '_content'];
    if (converter.import) {
      nodeData = converter.import(el, nodeData, this) || nodeData;
    }
    nodeData._content = '$';
    nodeData.start = { path, offset: 0 };
    nodeData.end = { offset: 1 };
    return nodeData
  }

  _createNodeData (el, type) {
    if (!type) {
      throw new Error('type is mandatory.')
    }
    const nodeData = {
      type,
      id: this._getIdForElement(el, type)
    };
    this.state.ids[nodeData.id] = true;
    return nodeData
  }

  _createNode (nodeData) {
    const doc = this.state.doc;
    // NOTE: if your Document implementation adds default nodes in the constructor
    // and you have exported the node, we need to remove the default version first
    // TODO: alternatively we could just update the existing one. For now we remove the old one.
    const node = doc.get(nodeData.id);
    if (node) {
      // console.warn('Node with same it already exists.', node)
      doc.delete(node.id);
    }
    return doc.create(nodeData)
  }

  getChildNodeIterator (el) {
    return el.getChildNodeIterator()
  }

  _defaultElementMatcher (el) {
    return el.is(this.tagName)
  }

  /**
   * Internal function for parsing annotated text
   */
  _annotatedText (iterator) {
    const schema = this._getSchema();
    const state = this.state;
    const context = last(state.stack);
    /* istanbul ignore next */
    if (!context) {
      throw new Error('Illegal state: context is null.')
    }
    while (iterator.hasNext()) {
      var el = iterator.next();
      var text = '';
      /* istanbul ignore else */
      // Plain text nodes...
      if (el.isTextNode()) {
        text = this._prepareText(el.textContent);
        if (text.length) {
          // Note: text is not merged into the reentrant state
          // so that we are able to return for this reentrant call
          context.text = context.text.concat(text);
          context.offset += text.length;
        }
      } else if (el.isCommentNode()) {
        // skip comment nodes
        continue
      } else if (el.isElementNode()) {
        const annoConverter = this._getConverterForElement(el, 'inline');
        // if no inline converter is found we just traverse deeper
        if (!annoConverter) {
          /* istanbul ignore next */
          if (!this.IGNORE_DEFAULT_WARNINGS) {
            console.warn('Unsupported inline element. We will not create an annotation for it, but process its children to extract annotated text.', el.outerHTML);
          }
          // this descends into children elements without introducing a new stack frame
          // and without creating an element.
          const iterator = this.getChildNodeIterator(el);
          this._annotatedText(iterator);
          continue
        }
        // reentrant: we delegate the conversion to the inline node class
        // it will either call us back (this.annotatedText) or give us a finished
        // node instantly (self-managed)
        var startOffset = context.offset;
        const annoType = annoConverter.type;
        const AnnoClass = schema.getNodeClass(annoType);
        if (!AnnoClass) {
          throw new Error(`No Node class registered for type ${annoType}.`)
        }
        let annoData = this._createNodeData(el, annoType);
        // push a new context so we can deal with reentrant calls
        const stackFrame = {
          path: context.path,
          offset: startOffset,
          text: '',
          annos: []
        };
        state.stack.push(stackFrame);
        // with custom import
        if (annoConverter.import) {
          state.pushContext(el.tagName, annoConverter);
          annoData = annoConverter.import(el, annoData, this) || annoData;
          state.popContext();
        }
        // As opposed to earlier implementations we do not rely on
        // let the content be converted by custom implementations
        // as they do not own the content
        // TODO: we should make sure to throw when the user tries to
        if (AnnoClass.isInlineNode()) {
          this._customText(INVISIBLE_CHARACTER);
          // TODO: check if this is correct; after reading an inline,
          // we need to reset the lastChar, so that the next whitespace
          // does not get skipped
          state.lastChar = '';
        } else {
          // We call this to descent into the element
          // which could be 'forgotten' otherwise.
          // TODO: what if the converter has processed the element already?
          const iterator = this.getChildNodeIterator(el);
          this._annotatedText(iterator);
        }
        // ... and transfer the result into the current context
        state.stack.pop();
        context.offset = stackFrame.offset;
        context.text = context.text.concat(stackFrame.text);
        // in the mean time the offset will probably have changed to reentrant calls
        const endOffset = context.offset;
        annoData.start = {
          path: context.path.slice(0),
          offset: startOffset
        };
        annoData.end = {
          offset: endOffset
        };
        // merge annos into parent stack frame
        const parentFrame = last(state.stack);
        parentFrame.annos = parentFrame.annos.concat(stackFrame.annos, annoData);
      } else {
        console.warn('Unknown element type. Taking plain text.', el.outerHTML);
        text = this._prepareText(el.textContent);
        context.text = context.text.concat(text);
        context.offset += text.length;
      }
    }
    // return the plain text collected during this reentrant call
    return context.text
  }

  _getConverterForElement (el, mode) {
    let converters;
    if (mode === 'block') {
      if (!el.tagName) return null
      converters = this._blockConverters;
    } else if (mode === 'inline') {
      converters = this._propertyAnnotationConverters;
    } else {
      converters = this._allConverters;
    }
    let converter = null;
    for (let i = 0; i < converters.length; i++) {
      if (this._converterCanBeApplied(converters[i], el)) {
        converter = converters[i];
        break
      }
    }
    // fallback handling
    if (!converter) {
      if (mode === 'inline') {
        return this._getUnsupportedInlineElementConverter()
      } else {
        return this._getUnsupportedElementConverter()
      }
    }

    return converter
  }

  _getUnsupportedElementConverter () {}

  _getUnsupportedInlineElementConverter () {}

  _converterCanBeApplied (converter, el) {
    return converter.matchElement(el, this)
  }

  /**
   * Wraps the remaining (inline) elements of a node iterator into a default
   * block node.
   *
   * @param {DOMImporter.ChildIterator} childIterator
   * @returns {object} node data
   */
  _wrapInlineElementsIntoBlockElement (childIterator) {
    if (!childIterator.hasNext()) return

    const schema = this._getSchema();
    const converter = this._defaultBlockConverter;
    if (!converter) {
      throw new Error('Wrapping inline elements automatically is not supported in this schema.')
    }

    const dom = childIterator.peek().getOwnerDocument();
    const wrapper = dom.createElement('wrapper');
    while (childIterator.hasNext()) {
      const el = childIterator.next();
      // if there is a block node we finish this wrapper
      const blockTypeConverter = this._getConverterForElement(el, 'block');
      if (blockTypeConverter) {
        childIterator.back();
        break
      }
      wrapper.append(el.clone());
    }
    const type = schema.getDefaultTextType();
    const id = this._getNextId(dom, type);
    let nodeData = { type, id };
    this.state.pushContext('wrapper', converter);
    nodeData = converter.import(wrapper, nodeData, this) || nodeData;
    const context = this.state.popContext();
    const annos = context.annos;
    // create the node
    const node = this._createNode(nodeData);
    // and all annos which have been created during this call
    annos.forEach((a) => {
      this._createNode(a);
    });
    return node
  }

  // TODO: this needs to be tested and documented
  // TODO: after recent work with XML we found that
  // doing white-space handling here is not optimal
  // instead it should be done as a preprocessing step
  _prepareText (text) {
    const state = this.state;
    if (state.preserveWhitespace) {
      return text
    }
    var repl = SPACE;
    // replace multiple tabs and new-lines by one space
    text = text.replace(TABS_OR_NL, '');
    // TODO: the last char handling is only necessary for for nested calls
    // i.e., when processing the content of an annotation, for instance
    // we need to work out how we could control this with an inner state
    // TODO: this is incorrect: replacing /\s*/ will insert a space
    // even if there is not one present
    if (state.lastChar === SPACE) {
      // replace any double space, even if it is across element boundary
      text = text.replace(WS_LEFT, '');
    } else {
      text = text.replace(WS_LEFT, repl);
    }
    text = text.replace(WS_RIGHT, repl);
    // EXPERIMENTAL: also remove white-space within
    // this happens if somebody treats the text more like it would be done in Markdown
    // i.e. introducing line-breaks
    if (this.options.REMOVE_INNER_WS || state.removeInnerWhitespace) {
      text = text.replace(WS_ALL, SPACE);
    }
    state.lastChar = text[text.length - 1] || state.lastChar;
    return text
  }

  /**
   * Removes any leading and trailing whitespaces from the content
   * within the given element.
   * Attention: this is not yet implemented fully. Atm, trimming is only done
   * on the first and last text node (if they exist).
   */
  _trimTextContent (el) {
    var nodes = el.getChildNodes();
    var firstNode = nodes[0];
    var lastNode = last(nodes);
    var text, trimmed;
    // trim the first and last text
    if (firstNode && firstNode.isTextNode()) {
      text = firstNode.textContent;
      trimmed = this._trimLeft(text);
      firstNode.textContent = trimmed;
    }
    if (lastNode && lastNode.isTextNode()) {
      text = lastNode.textContent;
      trimmed = this._trimRight(text);
      lastNode.textContent = trimmed;
    }
    return el
  }

  _trimLeft (text) {
    return text.replace(WS_LEFT, '')
  }

  _trimRight (text) {
    return text.replace(WS_RIGHT, '')
  }

  static get State () { return DOMImporterState }

  static get INVISIBLE_CHARACTER () { return INVISIBLE_CHARACTER }
}

class DOMImporterState {
  constructor () {
    this.reset();
  }

  reset () {
    this.preserveWhitespace = false;
    this.nodes = [];
    this.annotations = [];
    this.containerPath = null;
    this.container = [];
    this.ids = {};
    // stack for reentrant calls into convertElement()
    this.contexts = [];
    // stack for reentrant calls into annotatedText()
    this.stack = [];
    this.lastChar = '';
    this.skipTypes = {};
    this.ignoreAnnotations = false;
    this.isConverting = false;

    // experimental: trying to generate simpler ids during import
    // this.uuid = uuid
    this.uuid = createCountingIdGenerator();
  }

  pushContext (tagName, converter) {
    this.contexts.push({ tagName, converter, annos: [] });
  }

  popContext () {
    return this.contexts.pop()
  }

  getCurrentContext () {
    return last(this.contexts)
  }
}

/*
  Base class for custom HTML exporters. If you want to use XML as your
  exchange format see {@link model/XMLExporter}.
*/

class HTMLExporter extends DOMExporter {
  constructor (params, options = {}) {
    super(_defaultParams(params, options), options);
  }

  exportDocument (doc) {
    const htmlEl = DefaultDOMElement.parseHTML('<html><head></head><body></body></html>');
    return this.convertDocument(doc, htmlEl)
  }

  getDefaultBlockConverter () {
    return defaultBlockConverter // eslint-disable-line no-use-before-define
  }

  getDefaultPropertyAnnotationConverter () {
    return defaultAnnotationConverter // eslint-disable-line no-use-before-define
  }
}

function _defaultParams (params, options) {
  params = Object.assign({
    idAttribute: 'data-id'
  }, params, options);
  if (!params.elementFactory) {
    params.elementFactory = DefaultDOMElement.createDocument('html');
  }
  return params
}

const defaultAnnotationConverter = {
  tagName: 'span',
  export: function (node, el) {
    el.tagName = 'span';
    el.attr('data-type', node.type);
    var properties = node.toJSON();
    forEach(properties, function (value, name) {
      if (name === 'id' || name === 'type') return
      if (isString(value) || isNumber(value) || isBoolean(value)) {
        el.attr('data-' + name, value);
      }
    });
  }
};

const defaultBlockConverter = {
  export: function (node, el, converter) {
    el.attr('data-type', node.type);
    const nodeSchema = node.getSchema();
    for (const prop of nodeSchema) {
      const name = prop.name;
      if (name === 'id' || name === 'type') continue
      // using RDFa like attributes
      const propEl = converter.$$('div').attr('property', name);
      let value = node.get(name);
      if (prop.isText()) {
        propEl.append(converter.annotatedText([node.id, name]));
      } else if (prop.isReference()) {
        if (prop.isOwned()) {
          value = node.resolve(name);
          if (prop.isArray()) {
            propEl.append(value.map(child => converter.convertNode(child)));
          } else {
            propEl.append(converter.convertNode(value));
          }
        } else {
          // TODO: what to do with relations? maybe create a link pointing to the real one?
          // or render a label of the other
          // For now, we skip such props
          continue
        }
      } else {
        propEl.append(String(value));
      }
      el.append(propEl);
    }
  }
};

/**
 * Base class for custom HTML importers. If you want to use XML as your
 * exchange format see {@link model/XMLImporter}.
 *
 * @abstract
 */
class HTMLImporter extends DOMImporter {
  constructor (params, doc, options) {
    super(_defaultParams$1(params, options), doc, options);

    // disabling warnings about default importers
    this.IGNORE_DEFAULT_WARNINGS = true;
    // only used internally for creating wrapper elements
    this._el = DefaultDOMElement.parseHTML('<html></html>');
  }

  importDocument (html) {
    this.reset();
    const parsed = DefaultDOMElement.parseHTML(html);
    this.convertDocument(parsed);
    return this.state.doc
  }

  /**
   * Orchestrates conversion of a whole document.
   *
   * This method should be overridden by custom importers to reflect the
   * structure of a custom HTML document or fragment, and to control where
   * things go to within the document.
   *
   * @abstract
   * @param {DOMElement} documentEl the document element.
   *
   * @example
   *
   *  When a fragment `<h1>Foo</h1><p></Bar</p>` is imported the implementation
   *  looks like this.
   *
   * ```js
   *   convertDocument(els) {
   *     this.convertContainer(els, 'body')
   *   }
   * ```
   *
   * If a full document `<html><body><p>A</p><p>B</p></body></html>` is imported
   * you get the `<html>` element instead of a node array.
   *
   * ```js
   *   convertDocument(htmlEl) {
   *     var bodyEl = htmlEl.find('body')
   *     this.convertContainer(bodyEl.children, 'body')
   *   }
   * ```
   */
  convertDocument(documentEl) { // eslint-disable-line
    throw new Error('This method is abstract')
  }
}

function _defaultParams$1 (params, options) {
  return Object.assign({ idAttribute: 'data-id' }, params, options)
}

class InlineNode extends AnnotationMixin(DocumentNode) {
  mustNotBeSplit () { return true }
  static isInlineNode () { return true }
}

/*

  A Marker is a temporary annotation used by the application
  to mark or hightlight certain things, such as spell-errors, selections,
  etc.

  Note: we extend PropertyAnnotation to inherit the same API.
*/
class Marker extends PropertyAnnotation {
  _initialize (doc, props) {
    this.document = doc;
    this.type = props.type;
    if (!props.type) {
      throw new Error("'type' is mandatory")
    }
    if (!props.start) {
      throw new Error("'start' is mandatory")
    }
    if (!props.end) {
      throw new Error("'end' is mandatory")
    }
    Object.keys(props).forEach(key => {
      this._set(key, props[key]);
    });
  }

  // TODO: we should use the Coordinate comparison API here
  containsSelection (sel) {
    if (sel.isNull()) return false
    if (sel.isPropertySelection()) {
      return (isArrayEqual(this.start.path, sel.start.path) &&
        this.start.offset <= sel.start.offset &&
        this.end.offset >= sel.end.offset)
    } else {
      console.warn('Marker.contains() does not support other selection types.');
    }
  }

  get type () {
    return this._type
  }

  set type (type) {
    this._type = type;
  }

  // TODO find out how to get rid of these
  // HACK: while having the same interface, Markers should still be treated differently, e.g. not go into the AnnotationIndex
  get _isPropertyAnnotation () { return false }
  get _isMarker () { return true }
}

class NextDocument extends Document {
  constructor (documentSchema, nextSchema) {
    super(documentSchema);

    this._nextSchema = nextSchema;
    const rootType = nextSchema.rootType;
    // for the root node id is always === type
    this.root = this.create({ type: rootType, id: rootType });
    this.type = rootType;
  }

  find (cssSelector) {
    if (this.root) {
      return this.root.find(cssSelector)
    }
  }

  findAll (cssSelector) {
    if (this.root) {
      return this.root.findAll(cssSelector)
    }
  }

  newInstance () {
    return new NextDocument(this.schema, this._nextSchema)
  }

  fromXml (xmlStr, context) {
    this._nextSchema.importDocumentFromXml(this, xmlStr, context);
    return this
  }

  fromJson (json) {
    super.fromJson(json);
    // making sure that root points to the correct node, in case the root node has been overwritten
    this.root = this.get(this.root.id);
    return this
  }

  toXml (context, options) {
    return this._nextSchema.exportDocumentToXml(this, context, options)
  }
}

function _requiresPropertyElements (nodeSpec) {
  return (
    // NOTE: '@node' means 'structured node' as opposed to '@text' for instance
    (nodeSpec.parentType === '@node' && !nodeSpec.options.omitPropertyElement) ||
    nodeSpec.childPropertyCount > 1
  )
}

function createValidator (rootType, definition) {
  const nodeChecks = new Map();
  for (const nodeSpec of definition.nodes.values()) {
    const type = nodeSpec.type;
    nodeChecks.set(type, _createChecks(nodeSpec));
  }
  return new Validator(rootType, nodeChecks)
}

class Validator {
  constructor (rootType, nodeChecks) {
    this.rootType = rootType;
    this.nodeChecks = nodeChecks;
  }

  validate (xmlDom) {
    const state = new ValidatorState();
    const rootEls = xmlDom.children.filter(c => c.tagName === this.rootType);
    if (rootEls === 0) {
      state.error({ message: `Root element ${this.rootType} not found` });
    } else if (rootEls.length > 1) {
      state.error({ message: `Only one root element ${this.rootType} is allowed` });
    }
    xmlDom.findAll(['id']).reduce((s, el) => {
      const id = el.id;
      if (s.has(id)) {
        state.error({ message: `Another element with the same id exists: ${id}` });
      } else {
        s.add(id);
      }
      return s
    }, new Set());

    state.requestChecks(rootEls);
    while (!state.hasFinished()) {
      const el = state.next();
      if (!this.nodeChecks.has(el.tagName)) {
        state.error({ message: `Unknown element type ${el.tagName}` });
      } else {
        const { checks, nodeSpec } = this.nodeChecks.get(el.tagName);
        for (const check of checks) {
          check(state, el, { nodeSpec });
        }
        // check for unused property elements, which is only necessary where property elements are used
        if (_requiresPropertyElements(nodeSpec)) {
          for (const c of state._currentPropertyElements) {
            state.error({ message: `element ${c.tagName} is not allowed in ${el.tagName}.` });
          }
        }
        for (const attr of state._currentAttributes) {
          state.error({ message: `attribute ${attr} is not allowed in ${el.tagName}.` });
        }
      }
    }
    return state
  }
}

class ValidatorState {
  constructor () {
    this.queue = [];
    this.errors = [];
  }

  get ok () {
    return this.errors.length === 0
  }

  error (err) {
    this.errors.push(err);
  }

  requestChecks (els) {
    this.queue = this.queue.concat(els);
  }

  hasFinished () {
    return this.queue.length === 0
  }

  next () {
    const el = this.queue.shift();
    this._currentAttributes = new Set(Array.from(el.getAttributes().keys()));
    this._currentPropertyElements = new Set(el.children);
    return el
  }

  elementChecked (el) {
    this._currentPropertyElements.delete(el);
  }

  attributeChecked (attr) {
    this._currentAttributes.delete(attr);
  }
}

function _createChecks (nodeSpec) {
  // validation checks
  const checks = [];
  const nodeType = nodeSpec.type;

  // add checkers for built-in properties (only id at the moment)
  checks.push(_attributeChecker(nodeType, 'id', str => {
    if (!/^[_@a-zA-Z][_@a-zA-Z0-9-]+$/.exec(str)) {
      return `Invalid id: ${str}`
    }
  }));

  for (const [propName, propSpec] of nodeSpec.properties.entries()) {
    checks.push(_createPropertyChecker(nodeSpec, propName, propSpec));
  }

  return {
    checks,
    nodeSpec
  }
}

function _createPropertyChecker (nodeSpec, propName, propSpec) {
  const nodeType = nodeSpec.type;
  function _checkChildType (child, errors) {
    if (!targetTypes.has(child.tagName)) {
      errors.push(`Element of type ${child.tagName} not allowed in ${nodeType} > ${propName}. Expected one of ${Array.from(targetTypes).join(',')}`);
    }
  }
  function _checkTargetType (el, id, errors) {
    const target = el.getOwnerDocument().getElementById(id);
    if (!target) {
      errors.push(`Target element ${id} does not exist for ${nodeType}@${propName}`);
    } else if (!targetTypes.has(target.tagName)) {
      errors.push(`Target type ${target.tagName} is not allowed for ${nodeType}@${propName}`);
    }
  }

  const type = propSpec.type;
  const options = propSpec.options || {};
  const targetTypes = new Set(options.childTypes || options.targetTypes || []);

  switch (type) {
    case 'integer': {
      return _attributeChecker(nodeType, propName, str => {
        if (isNaN(str) || str !== parseInt(str)) {
          return `Expected integer. Actual value: ${str}`
        }
      })
    }
    case 'number': {
      return _attributeChecker(nodeType, propName, str => {
        if (isNaN(str)) {
          return `Expected number. Actual value: ${str}`
        }
      })
    }
    case 'boolean': {
      return _attributeChecker(nodeType, propName, str => {
        if (str !== 'true' && str !== 'false') {
          return `Expected boolean (true|false). Actual value: ${str}`
        }
      })
    }
    case 'string': {
      return _attributeChecker(nodeType, propName, str => {
        // nothing special here
      })
    }
    // string array properties are mapped to a element with comma separated text
    case 'string-array': {
      return _attributeChecker(nodeType, propName, str => {
        // nothing special here
      })
    }
    case 'enum': {
      return _attributeChecker(nodeType, propName, str => {
        if (!options.values.has(str)) {
          return `Unsupported enum value. Expected one of ${Array.from(options.values).join(',')}, but was ${str}`
        }
      })
    }
    case 'one': {
      return _attributeChecker(nodeType, propName, (str, el) => {
        const errors = [];
        this._checkTargetType(el, str, errors);
        return errors
      })
    }
    case 'many': {
      return _attributeChecker(nodeType, propName, (str, el) => {
        const errors = [];
        const ids = str.split(/\s+/).map(id => id.trim());
        for (const id of ids) {
          _checkTargetType(el, id, errors);
        }
        return errors
      })
    }
    case 'child': {
      return _elementChecker(nodeSpec, propName, (state, el) => {
        const errors = [];
        _checkChildType(el, errors);
        state.requestChecks(el);
        return errors
      })
    }
    case 'children':
    case 'container':
    case 'text': {
      return _elementChecker(nodeSpec, propName, (state, el) => {
        const children = el.getChildren();
        const errors = [];
        for (const child of children) {
          _checkChildType(child, errors);
        }
        return errors
      })
    }
    default:
      throw new Error('Invalid type: ' + type)
  }
}

function _attributeChecker (type, propertyName, check) {
  return (state, el) => {
    const str = el.getAttribute(propertyName);
    if (str) {
      // checker returns error message
      let errors = check(str, el);
      if (errors) {
        if (!isArray(errors)) errors = [errors];
        for (const error of errors) {
          state.error({ type, propertyName, error });
        }
      }
    }
    state.attributeChecked(propertyName);
  }
}

function _elementChecker (nodeSpec, propertyName, check) {
  return (state, el, { nodeSpec }) => {
    const nodeType = nodeSpec.type;
    const propSpec = nodeSpec.properties.get(propertyName);
    // For now, we force property elements for all 'structured' nodes
    if (_requiresPropertyElements(nodeSpec)) {
      const propertyEl = el.children.find(c => c.tagName === propertyName);
      if (!propertyEl) {
        if (!propSpec.options.optional) {
          state.error({ type: nodeType, propertyName, message: `Child element ${propertyName} is missing` });
        }
      } else {
        const errors = check(state, propertyEl, { nodeSpec });
        if (errors && errors.length > 0) {
          errors.forEach(error => state.error({ type: nodeType, propertyName, error }));
        }
        state.requestChecks(propertyEl.children);
        state.elementChecked(propertyEl);
      }
    // no property elements: this is the case for text nodes
    // TODO: in the future we might want to add a flag to the node spec to allow
    // this for 'structured' nodes, too (e.g. a list could spare an extra 'items' element)
    } else {
      const errors = check(state, el, { nodeSpec });
      if (errors && errors.length > 0) {
        errors.forEach(error => state.error({ type: nodeType, propertyName, error }));
      }
      state.requestChecks(el.children);
    }
  }
}

const INCREMENT_VERSION = Symbol('incrementVersion');
const ADD_NODE = Symbol('addNode');
const ADD_PROPERTY = Symbol('addProperty');
const ADD_CHILD_TYPE = Symbol('addChildType');
const BUILT_INS = new Set(['@node', '@text', '@annotation', '@inlinenode', '@asset']);
const ATTRIBUTE_PROPERTY_TYPES = new Set(['integer', 'number', 'boolean', 'string', 'string-array', 'one', 'many']);
const CHILDREN_PROPERTY_TYPES = new Set(['child', 'children', 'text', 'container']);

class SchemaDefinition {
  constructor () {
    this.version = 0;
    this.nodes = new Map();
  }

  apply (action) {
    switch (action.type) {
      case INCREMENT_VERSION:
        return this._incrementVersion()
      case ADD_NODE: {
        return this._addNode(action)
      }
      case ADD_PROPERTY: {
        return this._addProperty(action)
      }
      case ADD_CHILD_TYPE: {
        return this._addChildType(action)
      }
      default:
        throw new Error(`Invalid action ${action.type}`)
    }
  }

  _incrementVersion () {
    this.version++;
  }

  _addNode (action) {
    const { nodeType, parentType, options } = action;
    if (this.nodes.has(nodeType)) {
      throw new Error(`Node ${nodeType} is already defined`)
    }
    if (!BUILT_INS.has(parentType) && !this.nodes.has(parentType)) {
      throw new Error(`Unknown parent type ${parentType}`)
    }
    this.nodes.set(nodeType, { type: nodeType, parentType, properties: new Map(), options });
  }

  _addProperty (action) {
    const { nodeType, propertyName, definition } = action;
    const nodeDef = this.nodes.get(nodeType);
    if (!nodeDef) throw new Error(`Node ${nodeType} is not defined`)
    if (nodeDef.properties.has(propertyName)) throw new Error(`Property ${propertyName} already defined for type ${nodeType}`)
    let type;
    let options = {};
    if (isString(definition)) {
      type = definition;
    } else {
      type = definition.type;
      options = Object.assign(options, definition);
    }
    if (options.childTypes) {
      options.childTypes = options.childTypes.slice();
    }
    if (!type) throw new Error("'type' is required")
    nodeDef.properties.set(propertyName, { type, options });
  }

  _addChildType (action) {
    const { nodeType, propertyName, childType } = action;
    const nodeDef = this.nodes.get(nodeType);
    if (!nodeDef) throw new Error(`Node ${nodeType} is not defined`)
    const propDef = nodeDef.properties.get(propertyName);
    if (!propDef) throw new Error(`Property ${propertyName} is not defined for type ${nodeType}`)
    if (!propDef.childTypes) propDef.childTypes = [];
    propDef.childTypes.push(childType);
  }
}

function createDefinition (version, actions) {
  const definition = new SchemaDefinition();
  for (const action of actions) {
    definition.apply(action);
    if (definition.version > version) break
  }
  definition.version = version;
  // compute childPropertyCount for every node spec
  for (const nodeSpec of definition.nodes.values()) {
    const childPropertyNames = [];
    for (const [propName, propSpec] of nodeSpec.properties) {
      if (CHILDREN_PROPERTY_TYPES.has(propSpec.type)) {
        childPropertyNames.push(propName);
      }
    }
    nodeSpec.childPropertyNames = childPropertyNames;
    nodeSpec.childPropertyCount = childPropertyNames.length;
  }

  return definition
}

class XMLImporter extends DOMImporter {
  constructor (params, doc, options = {}) {
    super(_defaultParams$2(params, options), doc, options);
  }

  importDocument (xml) {
    this.reset();
    const dom = DefaultDOMElement.parseXML(xml);
    this.convertDocument(dom);
    return this.state.doc
  }

  convertDocument (xmlDocument) {
    const rootNode = xmlDocument.children[0];
    if (!rootNode) throw new Error('XML Root node could not be found.')
    this.convertElement(rootNode);
  }
}

function _defaultParams$2 (params, options) {
  return Object.assign({ idAttribute: 'id' }, params, options)
}

/*
  Base class for custom XML exporters. If you want to use HTML as your
  exchange format see {@link model/HTMLExporter}.
*/
class XMLExporter extends DOMExporter {
  constructor (params, options = {}) {
    super(_defaultParams$3(params, options), options);
  }

  getDefaultBlockConverter () {
    return defaultBlockConverter$1 // eslint-disable-line no-use-before-define
  }

  getDefaultPropertyAnnotationConverter () {
    return defaultAnnotationConverter$1 // eslint-disable-line no-use-before-define
  }
}

function _defaultParams$3 (params, options) {
  params = Object.assign({
    idAttribute: 'id'
  }, params, options);
  if (!params.elementFactory) {
    const xmlParams = {
      version: options.xmlVersion || '1.0',
      encoding: options.xmlEncoding || 'UTF-8'
    };
    params.elementFactory = DefaultDOMElement.createDocument('xml', xmlParams);
  }
  return params
}

const defaultAnnotationConverter$1 = {
  tagName: 'annotation',
  export: function (node, el) {
    el.attr('type', node.type);
    const properties = node.toJSON();
    forEach(properties, function (value, name) {
      if (name === 'id' || name === 'type') return
      if (isString(value) || isNumber(value) || isBoolean(value)) {
        el.attr(name, value);
      }
    });
  }
};

const defaultBlockConverter$1 = {
  tagName: 'block',
  export: function (node, el, converter) {
    el.attr('type', node.type);
    const properties = node.toJSON();
    forEach(properties, function (value, name) {
      if (name === 'id' || name === 'type') {
        return
      }
      const prop = converter.$$(name);
      if (node.getPropertyType(name) === 'string') {
        prop.append(converter.annotatedText([node.id, name]));
      } else {
        prop.text(value);
      }
      el.append(prop);
    });
  }
};

function createXmlConverterFactory (rootType, definition) {
  const converters = [];
  for (const nodeSpec of definition.nodes.values()) {
    switch (nodeSpec.parentType) {
      case '@node': {
        converters.push(_createNodeConverter(nodeSpec));
        break
      }
      case '@text': {
        converters.push(_createTextNodeConverter(nodeSpec));
        break
      }
      case '@annotation':
      case '@inlinenode': {
        converters.push(_createAnnotationConverter(nodeSpec));
        break
      }
      case '@asset': {
        converters.push(_createAssetConverter(nodeSpec));
        break
      }
      default:
        throw new Error(`Unsupported parent type ${nodeSpec.parentType}`)
    }
  }
  return {
    createImporter (doc, context) {
      return new NextDocumentXmlImporter({ converters }, doc, { rootType, definition, context })
    },
    createExporter (context) {
      return new NextDocumentXmlExporter({ converters }, { rootType, definition, context })
    }
  }
}

class NextDocumentXmlImporter extends XMLImporter {
  constructor (params, doc, options = {}) {
    super(params, doc, options);

    this.rootType = options.rootType;
    this.definition = options.definition;
    this.context = options.context || {};
  }

  importIntoDocument (xmlDom) {
    const doc = this.state.doc;
    doc.clear();
    const rootEl = xmlDom.find(this.rootType);
    const root = this.convertElement(rootEl);
    doc.root = root;
  }
}

class NextDocumentXmlExporter extends XMLExporter {
  constructor (params, options = {}) {
    super(params, options);

    this.rootType = options.rootType;
    this.definition = options.definition;
    this.context = options.context || {};
  }
}

function _createBasicNodeConverter (nodeSpec) {
  class BasicNodeConverter {
    get type () { return nodeSpec.type }

    get tagName () { return nodeSpec.type }

    get nodeSpec () { return nodeSpec }

    import (el, node, importer) {}

    export (node, el, exporter) {}

    _importAttributes (el, node, importer) {
      for (const [propName, propSpec] of nodeSpec.properties) {
        this._importAttribute(propName, propSpec, el, node, importer);
      }
    }

    _importAttribute (propName, propSpec, el, node, importer) {
      const type = propSpec.type;
      const str = el.getAttribute(propName);
      if (!ATTRIBUTE_PROPERTY_TYPES.has(type) || !str) return
      let val;
      switch (propSpec.type) {
        case 'integer': {
          val = parseInt(str);
          break
        }
        case 'number': {
          val = Number(str);
          break
        }
        case 'boolean': {
          val = (str === 'true');
          break
        }
        case 'string':
        case 'one': {
          val = str;
          break
        }
        case 'string-array':
          val = str.split(';').map(s => s.trim());
          break
        case 'many': {
          val = str.split(/\s+/).map(s => s.trim());
          break
        }
        default:
          throw new Error('Illegal state')
      }
      node[propName] = val;
    }

    _exportAttributes (node, el, exporter) {
      for (const [propName, propSpec] of nodeSpec.properties) {
        this._exportAttribute(propName, propSpec, node, el, exporter);
      }
    }

    _exportAttribute (propName, propSpec, node, el, exporter) {
      const type = propSpec.type;
      if (!ATTRIBUTE_PROPERTY_TYPES.has(type)) return
      const isOptional = propSpec.options.optional;
      const val = node.get(propName);
      let str;
      if (isNil(val)) {
        // skip if attribute is optional
        if (isOptional) {
          return
        } else {
          str = '';
        }
      } else {
        switch (propSpec.type) {
          case 'integer':
          case 'number':
          case 'boolean':
          case 'string':
          case 'one': {
            str = String(val);
            break
          }
          case 'string-array':
            if (val.length === 0 && isOptional) return
            str = val.join(';');
            break
          case 'many': {
            if (val.length === 0 && isOptional) return
            str = val.join(' ');
            break
          }
          default:
            throw new Error('Illegal state')
        }
      }
      el.setAttribute(propName, str);
    }
  }
  return BasicNodeConverter
}

function _createAnnotationConverter (nodeSpec) {
  class AnnotationConverter extends _createBasicNodeConverter(nodeSpec) {
    import (el, node, importer) {
      this._importAttributes(el, node, importer);
    }

    export (node, el, exporter) {
      this._exportAttributes(node, el, exporter);
    }
  }
  return AnnotationConverter
}

function _createTextNodeConverter (nodeSpec) {
  class TextNodeConverter extends _createBasicNodeConverter(nodeSpec) {
    import (el, node, importer) {
      this._importAttributes(el, node, importer);
      node.content = importer.annotatedText(el, [node.id, 'content']);
    }

    export (node, el, exporter) {
      this._exportAttributes(node, el, exporter);
      el.append(exporter.annotatedText([node.id, 'content']));
    }
  }
  return TextNodeConverter
}

function _createNodeConverter (nodeSpec) {
  class NodeConverter extends _createBasicNodeConverter(nodeSpec) {
    import (el, node, importer) {
      this._importAttributes(el, node, importer);
      this._importChildProperties(el, node, importer);
    }

    export (node, el, exporter) {
      this._exportAttributes(node, el, exporter);
      this._exportChildProperties(node, el, exporter);
    }

    _importChildProperties (el, node, importer) {
      // TODO: for now we use property elements for all 'structured' nodes
      const usePropertyEl = _requiresPropertyElements(nodeSpec);
      if (usePropertyEl) {
        for (const propEl of el.children) {
          const propName = propEl.tagName;
          this._importChildProperty(propName, propEl, node, importer);
        }
      } else if (nodeSpec.childPropertyNames.length === 1) {
        this._importChildProperty(nodeSpec.childPropertyNames[0], el, node, importer);
      } else if (nodeSpec.childPropertyNames.length > 1) {
        throw new Error("Only one child property allowed when 'omitPropertyElement=true'")
      }
    }

    _importChildProperty (propName, propEl, node, importer) {
      const propSpec = nodeSpec.properties.get(propName);
      let val;
      switch (propSpec.type) {
        case 'child': {
          const childNode = importer.convertElement(propEl);
          val = childNode.id;
          break
        }
        case 'children':
        case 'container': {
          const childNodes = propEl.getChildren().map(childEl => {
            return importer.convertElement(childEl)
          });
          val = childNodes.map(n => n.id);
          break
        }
        case 'text': {
          val = importer.annotatedText(propEl, [node.id, propName]);
          break
        }
        default:
          throw new Error('Illegal state')
      }
      node[propName] = val;
    }

    _exportChildProperties (node, el, exporter) {
      // TODO: try to simplify this. I don't like how the decision whether to append
      // to 'el' or use a property element is taken in _exportChildProperty()

      // TODO: for now we use property elements for all 'structured' nodes
      const usePropertyEl = _requiresPropertyElements(nodeSpec);
      if (usePropertyEl) {
        for (const propName of nodeSpec.childPropertyNames) {
          const propEl = el.createElement(propName);
          // ATTENTION: in some cases the propEl is omitted
          // thus we allow to provide a different element to be appended
          const childEl = this._exportChildProperty(propName, node, propEl, exporter);
          el.append(childEl);
        }
      } else if (nodeSpec.childPropertyNames.length === 1) {
        const propEl = el;
        const childEl = this._exportChildProperty(nodeSpec.childPropertyNames[0], node, propEl, exporter);
        // NOTE: when property elements are omitted generally
        // then we use el as property element
        // only if a different element is returned we have to append (which sounds like an edge case)
        if (childEl !== propEl) {
          el.append(childEl);
        }
      } else if (nodeSpec.childPropertyNames.length > 1) {
        throw new Error("Only one child property allowed when 'omitPropertyElement=true'")
      }
    }

    _exportChildProperty (propName, node, propEl, exporter) {
      const propSpec = nodeSpec.properties.get(propName);
      switch (propSpec.type) {
        case 'child': {
          const childNode = node.resolve(propName);
          if (childNode) {
            const childEl = exporter.convertNode(childNode);
            // TODO: we need to find a clearer approach to this
            // In some cases, e.g. when the property is called the same as the (only) child node type,
            // it is desired to omit the property element
            if (childNode.type === propName && propSpec.options && propSpec.options.childTypes.length === 1) {
              propEl = childEl;
            } else {
              propEl.append(childEl);
            }
          }
          break
        }
        case 'children':
        case 'container': {
          const childNodes = node.resolve(propName);
          // skip empty containers if they are optional
          if (childNodes.length === 0 && propSpec.options.optional) {
            return null
          }
          propEl.append(childNodes.map(childNode => exporter.convertNode(childNode)));
          break
        }
        case 'text': {
          propEl.append(exporter.annotatedText([node.id, propName]));
          break
        }
        default:
          throw new Error('Illegal state')
      }
      return propEl
    }
  }
  return NodeConverter
}

function _createAssetConverter (nodeSpec) {
  class AssetConverter extends _createNodeConverter(nodeSpec) {
    _getArchive (imOrExporter) {
      const archive = imOrExporter.context.archive;
      if (!archive) {
        throw new Error("'options.context' is required")
      }
      return archive
    }

    _importAttribute (propName, propSpec, el, node, importer) {
      // TODO: this is pretty hard coded, maybe we could introduce a property type instead
      // and make this a general behavior
      switch (propName) {
        case 'src': {
          // NOTE: stored as filename in XML, we need to map to assetId internally
          const filename = el.getAttribute('src');
          const archive = this._getArchive(importer);
          const asset = archive.getAssetForFilename(filename);
          if (asset) {
            node.src = asset.id;
          }
          break
        }
        case 'mimetype': {
          // NOTE: no matter what is stored in XML, we won't gonna use it
          const filename = el.getAttribute('src');
          const archive = this._getArchive(importer);
          const asset = archive.getAssetForFilename(filename);
          if (asset) {
            node.mimetype = asset.mimetype;
          }
          break
        }
        default: {
          return super._importAttribute(propName, propSpec, el, node, importer)
        }
      }
    }

    _exportAttribute (propName, propSpec, node, el, exporter) {
      // TODO: this is pretty hard coded, maybe we could introduce a property type instead
      // and make this a general behavior
      switch (propName) {
        case 'src': {
          // NOTE: internally stores an assetId, and needs to be mapped to filename
          const archive = this._getArchive(exporter);
          const asset = archive.getAssetById(node.src);
          if (asset) {
            el.attr('src', asset.filename);
          } else {
            el.attr('src', '');
          }
          break
        }
        case 'mimetype': {
          // NOTE: whatever is stored here, only what the DAR says matters
          const archive = this._getArchive(exporter);
          const asset = archive.getAssetById(node.src);
          if (asset && asset.mimetype) {
            el.attr('mimetype', asset.mimetype);
          }
          break
        }
        default: {
          super._exportAttribute(propName, propSpec, node, el, exporter);
        }
      }
    }
  }
  return AssetConverter
}

class NextDocumentSchema {
  constructor (version, rootType, issuer, nodes, actions) {
    this.name = rootType[0].toUpperCase() + camelCase(rootType).slice(1);
    this.rootType = rootType;
    this.version = version;
    this.issuer = issuer;
    this.nodes = nodes;
    this.publicId = this._getPublicId(version);
    this.dtd = this._getDtd(version);

    // keep the schema definition here so that we can use it later on for XML validation and im-/export
    this._actions = actions;

    // generating validators, importers and exporters lazily
    this._definitions = new Map();
    this._validators = new Map();

    const _definition = this._getDefinition(this.version);

    this._xmlConverterFactory = createXmlConverterFactory(rootType, _definition);

    // legacy
    this._documentSchema = new DocumentSchema({
      // TODO: we should allow to override NextDocument
      // e.g. to provide a getTitle() implementation, etc.
      DocumentClass: NextDocument,
      nodes: Array.from(nodes.values()),
      definition: _definition
    });
  }

  createDocumentInstance () {
    return new NextDocument(this._documentSchema, this)
  }

  importDocumentFromXml (doc, xmlStr, context) {
    const xmlDom = DefaultDOMElement.parseXML(xmlStr);
    const xmlSchemaId = xmlDom.getDoctype().publicId;
    // identify version
    let version;
    for (let v = this.version; v > 0; v--) {
      if (xmlSchemaId === this._getPublicId(v)) {
        version = v;
        break
      }
    }
    if (!version) throw new Error(`Unknown xml schema ${xmlSchemaId}`)
    const validator = this._getValidator(version);
    const result = validator.validate(xmlDom);
    if (!result.ok) {
      console.error(result.errors);
      throw new Error('Invalid xml.')
    }
    if (version !== this.version) {
      console.error('TODO: implement migrations');
    }
    const importer = this._xmlConverterFactory.createImporter(doc, context);
    importer.importIntoDocument(xmlDom);
  }

  exportDocumentToXml (doc, context = {}, options = {}) {
    const exporter = this._xmlConverterFactory.createExporter(context);
    const dom = exporter.convertNode(doc.root);
    let xmlStr;
    if (options.prettyPrint) {
      xmlStr = prettyPrintXML(dom);
    } else {
      xmlStr = dom.serialize();
    }
    return [
      '<?xml version="1.0" encoding="UTF-8"?>',
      `<!DOCTYPE ${this.rootType} PUBLIC "${this.publicId}" "${this.dtd}">`,
      xmlStr
    ].join('\n')
  }

  getNodeSchema (type) {
    return this._documentSchema.getNodeSchema(type)
  }

  getNodeClass (type) {
    return this._documentSchema.getNodeClass(type)
  }

  getDefaultTextType () {
    console.error('DEPRECATED: avoid using schema.getDefaultTextType(). Instead a "container" type should provide this in its schema.');
    return null
  }

  _getPublicId (version) {
    // TODO: until we introduce minor versions we just use '0' for minor
    return `-//${this.issuer.toUpperCase()}//DTD ${this.name} v${version}.0//EN`
  }

  _getDtd (version) {
    return `${this.name}-${version}.dtd`
  }

  _getValidator (version) {
    if (!this._validators.has(version)) {
      this._validators.set(version, createValidator(this.rootType, this._getDefinition(version)));
    }
    return this._validators.get(version)
  }

  _getDefinition (version) {
    if (!this._definitions.has(version)) {
      this._definitions.set(version, createDefinition(version, this._actions));
    }
    return this._definitions.get(version)
  }
}

class Range {
  constructor (start, end, reverse, containerPath, surfaceId) {
    // HACK: to allow this class be inherited but without calling this ctor
    if (arguments[0] === 'SKIP') return
    if (arguments.length === 1 && isPlainObject(arguments[0])) {
      const data = arguments[0];
      this.start = data.start;
      this.end = data.end;
      this.reverse = Boolean(data.reverse);
      this.containerPath = data.containerPath;
      this.surfaceId = data.surfaceId;
    } else {
      this.start = start;
      this.end = end;
      this.reverse = Boolean(reverse);
      this.containerPath = containerPath;
      this.surfaceId = surfaceId;
    }
  }

  isCollapsed () {
    return this.start.equals(this.end)
  }

  equals (other) {
    if (this === other) return true
    else {
      return (
        isArrayEqual(this.containerPath, other.containerPath) &&
        this.start.equals(other.start) &&
        this.end.equals(other.end)
      )
    }
  }

  isReverse () {
    return this.reverse
  }

  toString () {
    const str = [this.start.toString(), '->', this.end.toString()];
    if (this.isReverse()) {
      str.push('[reverse]');
    }
    if (this.containerPath) {
      str.push('[container=' + this.containerPath + ']');
    }
    if (this.surfaceId) {
      str.push('[surface=' + this.surfaceId + ']');
    }
    return str.join('')
  }

  // TODO: do we need this anymore?
  get _isRange () { return true }
}

function TextNodeMixin (SuperClass) {
  class TextNodeMixin extends SuperClass {
    getTextPath () {
      // TODO: deprecate this
      console.warn('DEPRECATED: use node.getPath()');
      return this.getPath()
    }

    getText () {
      return this.content
    }

    setText (text) {
      setText(this.getDocument(), this.getPath(), text);
      return this
    }

    isEmpty () {
      return !this.getText()
    }

    getLength () {
      return this.getText().length
    }

    getAnnotations () {
      return this.getDocument().getIndex('annotations').get(this.getPath())
    }
  }
  return TextNodeMixin
}

/**
  A base class for all text-ish nodes, such as Paragraphs, Headings, Prerendered, etc.
*/
class TextNode extends TextNodeMixin(DocumentNode) {
  getPath () {
    return [this.id, 'content']
  }

  getText () {
    return this.content
  }

  static isText () { return true }

  define () {
    return {
      type: 'text-node',
      content: 'text',
      direction: { type: 'enum', optional: true, values: ['left', 'right'] },
      textAlign: { type: 'enum', default: 'left', values: ['left', 'right'] }
    }
  }
}

class SchemaBuilder {
  constructor (rootType, issuer) {
    this.rootType = rootType;
    this.issuer = issuer;
    this._actions = [];
    this._definition = new SchemaDefinition();
  }

  nextVersion (define) {
    this._record({ type: INCREMENT_VERSION });
    define(this);
  }

  addNode (nodeType, parentType, spec = {}, options = {}) {
    if (!isString(nodeType)) throw new Error("'nodeType' is mandatory and must be string")
    if (!isString(parentType) || !BUILT_INS.has(parentType)) throw new Error(`'parentType' is mandatory and must be one of ${Array.from(BUILT_INS).join(',')}`)
    this._record({ type: ADD_NODE, nodeType, parentType, options });
    Object.keys(spec).forEach(propertyName => {
      this.addProperty(nodeType, propertyName, spec[propertyName]);
    });
  }

  addProperty (nodeType, propertyName, definition) {
    this._record({ type: ADD_PROPERTY, nodeType, propertyName, definition });
  }

  addChildTypes (nodeType, propertyName, ...childTypes) {
    childTypes.forEach(childType => {
      this._record({ type: ADD_CHILD_TYPE, nodeType, propertyName, childType });
    });
  }

  createSchema () {
    const nodes = this._buildNodes();
    const rootType = this.rootType;
    const version = this._definition.version;
    return new NextDocumentSchema(version, rootType, this.issuer, nodes, this._actions)
  }

  _record (action) {
    this._definition.apply(action);
    this._actions.push(action);
  }

  _buildNodes () {
    const nodeBuilder = new NodeBuilder(this._definition.nodes);
    return nodeBuilder.createNodes()
  }
}

class NodeBuilder {
  constructor (nodeSpecs) {
    this.nodeSpecs = nodeSpecs;
  }

  createNodes () {
    const nodeSpecs = this.nodeSpecs;
    const nodeClasses = new Map();
    for (const nodeType of nodeSpecs.keys()) {
      this._createNode(nodeClasses, nodeType, nodeSpecs);
    }
    return nodeClasses
  }

  _createNode (nodeClasses, nodeType, nodeSpecs) {
    if (nodeClasses.has(nodeType)) return nodeClasses.get(nodeType)
    const nodeSpec = nodeSpecs.get(nodeType);
    // map the nodeSpec to native substance data spec
    let ParentNodeClass;
    const parentType = nodeSpec.parentType;
    switch (parentType) {
      case '@node': {
        ParentNodeClass = DocumentNode;
        break
      }
      case '@annotation': {
        ParentNodeClass = PropertyAnnotation;
        break
      }
      case '@inlinenode': {
        ParentNodeClass = InlineNode;
        break
      }
      case '@text': {
        ParentNodeClass = TextNode;
        break
      }
      case '@asset': {
        ParentNodeClass = AssetNode;
        break
      }
        //
    }
    if (!ParentNodeClass) {
      ParentNodeClass = nodeClasses.get(parentType);
      if (ParentNodeClass === 'WAITING') {
        throw new Error('Cyclic dependency!')
      } else if (!ParentNodeClass) {
        nodeClasses.set(parentType, 'WAITING');
        ParentNodeClass = this._createNode(nodeClasses, parentType, nodeSpecs);
      }
    }
    if (!ParentNodeClass) {
      throw new Error('Can not resolve parent class ' + parentType)
    }
    // EXPERIMENTAL: allow to define mixins
    // What I don't like here is, that the mixin impl could break with schema changes
    if (nodeSpec.options.Mixin) {
      ParentNodeClass = nodeSpec.options.Mixin(ParentNodeClass);
    }

    const compiledSpec = this._getCompiledSpec(nodeType, nodeSpec);
    class Node extends ParentNodeClass {
      define () {
        return compiledSpec
      }
    }
    nodeClasses.set(nodeType, Node);
    return Node
  }

  _getCompiledSpec (nodeType, nodeSpec) {
    const nodeDef = { type: nodeType };
    for (const [propName, propSpec] of nodeSpec.properties.entries()) {
      nodeDef[propName] = this._compileProperty(propSpec);
    }
    return nodeDef
  }

  _compileProperty (spec) {
    // compile to low-level substance data property specification
    const { type, options } = spec;
    switch (type) {
      case 'integer':
      case 'number':
        return Object.assign({ default: 0 }, options, { type, reflectionType: type })
      case 'boolean':
        return Object.assign({ default: false }, options, { type, reflectionType: type })
      case 'string':
        return Object.assign({ default: '' }, options, { type, reflectionType: type })
      case 'string-array':
        return Object.assign({ default: [] }, options, { type: ['array', 'string'], reflectionType: type })
      case 'text':
        return Object.assign({ default: '' }, options, { type, targetTypes: options.childTypes, reflectionType: type })
      case 'child':
        return Object.assign({ default: null }, options, { type: 'id', owned: true, targetTypes: options.childTypes, reflectionType: type })
      case 'children':
      case 'container':
        return Object.assign({ default: [] }, options, { type: ['array', 'id'], owned: true, targetTypes: options.childTypes, reflectionType: type })
      case 'one':
        return Object.assign({ default: null }, options, { type: 'id', targetTypes: options.targetTypes, reflectionType: type })
      case 'many':
        return Object.assign({ default: [] }, options, { type: ['array', 'id'], owned: false, targetTypes: options.targetTypes, reflectionType: type })
      default:
        throw new Error(`Unsupported type: ${type}`)
    }
  }
}

const STRING = { type: 'string', default: '' };

function TEXT$1 (...targetTypes) {
  targetTypes = flatten(targetTypes);
  return { type: 'text', targetTypes, reflectionType: 'text' }
}

const PLAIN_TEXT = Object.freeze(TEXT$1());

function CHILDREN (...nodeTypes) {
  nodeTypes = flatten(nodeTypes);
  return { type: ['array', 'id'], targetTypes: nodeTypes, default: [], owned: true, reflectionType: 'children' }
}

class SelectionStateReducer {
  constructor (editorState) {
    this.editorState = editorState;
    editorState.addObserver(['document', 'selection'], this.update, this, { stage: 'update' });
  }

  update () {
    const editorState = this.editorState;
    const doc = editorState.document;
    const sel = editorState.selection;
    const newState = this.deriveState(doc, sel);
    editorState.selectionState = newState;
  }

  deriveState (doc, sel) {
    const state = this.createState(sel);
    this.deriveContext(state, doc, sel);
    this.deriveContainerSelectionState(state, doc, sel);
    this.deriveAnnoState(state, doc, sel);
    if (doc.getIndex('markers')) {
      this.deriveMarkerState(state, doc, sel);
    }
    this.deriveSelectedText(state, doc, sel);

    return state
  }

  deriveContext (state, doc, sel) {
    if (!sel || sel.isNull()) return
    if (sel.isPropertySelection() || sel.isNodeSelection() || sel.isCustomSelection()) {
      const nodeId = sel.getNodeId();
      const node = doc.get(nodeId);
      if (node) {
        state.xpath = node.getXpath().toArray();
        state.node = node;
        if (sel.isPropertySelection()) {
          state.property = node.getSchema().getProperty(sel.getPropertyName());
        }
      }
    }
  }

  deriveContainerSelectionState (state, doc, sel) {
    const containerPath = sel.containerPath;
    if (containerPath) {
      state.containerPath = containerPath;
      const nodeIds = doc.get(containerPath);
      const startId = sel.start.getNodeId();
      const endId = sel.end.getNodeId();
      const startNode = getContainerRoot(doc, containerPath, startId);
      // FIXME: it happened that we have set the containerPath incorrectly
      // e.g. body.content for a selection in abstract
      if (!startNode) {
        console.error('FIXME: invalid ContainerSelection');
        return
      }
      const startPos = startNode.getPosition();
      if (startPos > 0) {
        state.previousNode = getPreviousNode(doc, containerPath, startPos);
      }
      state.isFirst = isFirst(doc, containerPath, sel.start);
      let endPos;
      if (endId === startId) {
        endPos = startPos;
      } else {
        const endNode = getContainerRoot(doc, containerPath, endId);
        endPos = endNode.getPosition();
      }
      if (endPos < nodeIds.length - 1) {
        state.nextNode = getNextNode(doc, containerPath, endPos);
      }
      state.isLast = isLast(doc, containerPath, sel.end);
    }
  }

  deriveAnnoState (state, doc, sel) {
    // create a mapping by type for the currently selected annotations
    const annosByType = new Map();
    function _add (anno) {
      let annos = annosByType.get(anno.type);
      if (!annos) {
        annos = [];
        annosByType.set(anno.type, annos);
      }
      annos.push(anno);
    }
    const propAnnos = getPropertyAnnotationsForSelection(doc, sel);
    propAnnos.forEach(_add);
    if (propAnnos.length === 1) {
      const firstAnno = propAnnos[0];
      if (firstAnno.isInlineNode()) {
        state.isInlineNodeSelection = firstAnno.getSelection().equals(sel);
        state.node = firstAnno;
      }
    }
    state.annos = propAnnos;

    const containerPath = sel.containerPath;
    if (containerPath) {
      const containerAnnos = getContainerAnnotationsForSelection(doc, sel, containerPath);
      containerAnnos.forEach(_add);
    }
    state.annosByType = annosByType;
  }

  deriveMarkerState (state, doc, sel) {
    const markers = getMarkersForSelection(doc, sel);
    state.markers = markers;
  }

  deriveSelectedText (state, doc, sel) {
    if (sel && sel.isPropertySelection() && !sel.isCollapsed()) {
      const text = getTextForSelection(doc, sel);
      state.selectedText = text;
    }
  }

  createState (sel) {
    return new SelectionState(sel)
  }
}

class SelectionState {
  constructor (sel) {
    this.selection = sel || Selection.null;

    Object.assign(this, {
      // all annotations under the current selection
      annosByType: null,
      // markers under the current selection
      markers: null,
      // flags for inline nodes
      isInlineNodeSelection: false,
      // container information (only for ContainerSelection)
      containerPath: null,
      // nodes
      node: null,
      previousNode: null,
      nextNode: null,
      // active annos
      annos: [],
      // if the previous node is one char away
      isFirst: false,
      // if the next node is one char away
      isLast: false,
      // current context
      xpath: [],
      property: null,
      // for non collapsed property selections
      selectedText: ''
    });
  }
}

// kind of an index that is used to dispatch updates
class DocumentObserver {
  constructor (doc, editorState) {
    // console.log('Creating DocumentObserver for', editorState.getId())
    this.editorState = editorState;
    this.doc = doc;
    this.dirty = new Set();

    this.init();
  }

  init () {
    const doc = this.doc;
    this.dirty.clear();
    if (!doc.getIndex('relationships')) {
      doc.addIndex('relationships', new RelationshipIndex$1());
    }
    doc.on('document:changed', this._onDocumentChanged, this);
  }

  dispose () {
    this.doc.off(this);
  }

  // called by EditorState when updates have been propagated
  reset () {
    this.dirty = new Set();
  }

  setDirty (path) {
    this.dirty.add(getKeyForPath(path));
  }

  // TODO: this is built on top of the current implementation of
  // DocumentChange. We could try to consolidate and have just
  // one place where this information is derived
  _onDocumentChanged (change, info = {}) {
    // ATTENTION: the change is not carrying reflection until change._extracted = true
    if (!change._extracted) change._extractInformation(this.doc);

    // console.log('DocumentObserver._onDocumentChanged()', this.editorState.getId(), change, change.updated)
    const dirty = this.dirty;
    Object.keys(change.updated).forEach(id => {
      dirty.add(id);
    });
  }
}

const ONE = Symbol('ONE');
const MANY = Symbol('MANY');

class RelationshipIndex$1 extends NodeIndex {
  constructor () {
    super();
    // a mapping from type to relational properties
    this._relationsByType = {};
    // the inverse index
    this._byTarget = new ValuesById();
  }

  get (targetId) {
    return this._byTarget.get(targetId)
  }

  select (node) { // eslint-disable-line no-unused-vars
    return true
  }

  clear () {
    this._byTarget.clear();
  }

  create (node) { // eslint-disable-line no-unused-vars
    const relations = this._getRelations(node);
    if (!relations) return
    for (const [name, type] of relations) {
      const val = node.get(name);
      if (!val) continue
      if (type === ONE) {
        this._add(val, node.id);
      } else {
        val.forEach(targetId => this._add(targetId, node.id));
      }
    }
  }

  delete (node) {
    const relations = this._getRelations(node);
    if (!relations) return
    for (const [name, type] of relations) {
      const val = node.get(name);
      if (!val) continue
      if (type === ONE) {
        this._remove(val, node.id);
      } else {
        val.forEach(targetId => this._remove(targetId, node.id));
      }
    }
  }

  update (node, path, newValue, oldValue) {
    const relations = this._getRelations(node);
    if (!relations) return
    const type = relations.get(path[1]);
    if (!type) return
    if (type === ONE) {
      this._remove(oldValue, node.id);
      this._add(newValue, node.id);
    } else {
      oldValue.forEach(targetId => this._remove(targetId, node.id));
      newValue.forEach(targetId => this._add(targetId, node.id));
    }
  }

  _getRelations (node) {
    let relations = this._relationsByType[node.type];
    if (relations === undefined) {
      relations = getRelations(node);
      if (relations.size === 0) relations = false;
      this._relationsByType[node.type] = relations;
    }
    return relations
  }

  _add (targetId, sourceId) {
    this._byTarget.add(targetId, sourceId);
  }

  _remove (targetId, sourceId) {
    this._byTarget.remove(targetId, sourceId);
  }
}

function getRelations (node) {
  const relations = new Map();
  const nodeSchema = node.getSchema();
  for (const property of nodeSchema) {
    if (property.isReference()) {
      const name = property.name;
      const type = property.isArray() ? MANY : ONE;
      relations.set(name, type);
    }
  }
  return relations
}

class ValuesById {
  constructor () {
    this._index = new Map();
  }

  get (key) {
    return this._index.get(key)
  }

  add (key, val) {
    let vals = this._index.get(key);
    if (!vals) {
      vals = new Set();
      this._index.set(key, vals);
    }
    vals.add(val);
  }

  remove (key, val) {
    const vals = this._index.get(key);
    if (vals) {
      vals.delete(val);
      if (vals.size === 0) {
        this._index.delete(key);
      }
    }
  }

  clear () {
    this._index = new Map();
  }
}

const ANY$1 = '@any';
const NOP$2 = function (doc) {
  return doc._createDocumentChange([], {}, {}, { action: 'nop' })
};

class EditorState extends AppState {
  _initialize (initialState) {
    super._initialize(initialState);

    if (!initialState.document) {
      throw new Error("'document' is required")
    }
    const doc = initialState.document;
    const impl = this._getImpl();
    // EXPERIMENTAL:
    // one observer for all slots that watches for document changes and marks paths as dirty
    // this is also used to broadcast other node based changes such as node state updates
    const documentObserver = new DocumentObserver(doc, this);
    impl.documentObserver = documentObserver;

    const selectionStateReducer = new SelectionStateReducer(this);
    selectionStateReducer.update();
    impl._selectionStateReducer = selectionStateReducer;
  }

  // Call this to revitalise a previously disposed editor state
  init () {
    this._getImpl().documentObserver.init();
  }

  dispose () {
    super.dispose();

    this._getImpl().documentObserver.dispose();
  }

  getUpdate (name) {
    let update = super.getUpdate(name);
    // HACK: sometimes we fake a document change to trigger document observers
    // In this case, there might be no actual update (change and info)
    // and we provide a NOP change and empty info
    if (!update && name === 'document') {
      const change = NOP$2(this._get('document'));
      change._extractInformation();
      update = { change, info: change.info };
    }
    return update
  }

  _createSlot (id, stage, deps) {
    const impl = this._getImpl();
    impl.schedule = null;
    if (deps.indexOf('document') !== -1) {
      return new DocumentSlot(this, id, stage, deps, impl.documentObserver)
    } else {
      return new Slot$1(this, id, stage, deps)
    }
  }

  _reset () {
    super._reset();
    this._getImpl().documentObserver.reset();
  }

  _getDocumentObserver () {
    return this._getImpl().documentObserver
  }
}

class Slot$1 {
  constructor (editorState, id, stage, deps) {
    this._id = editorState._getImpl().id;
    this.id = id;
    this.editorState = editorState;
    this.stage = stage;
    this.deps = deps;

    this.observers = new Set();
  }

  addObserver (observer, spec) {
    observer[this._id].set(this.id, {
      slot: this,
      spec
    });
    this.observers.add(observer);
  }

  removeObserver (observer) {
    this._deleteEntry(observer);
    this.observers.delete(observer);
  }

  needsUpdate () {
    const state = this.editorState;
    for (const dep of this.deps) {
      if (state.isDirty(dep)) return true
    }
    return false
  }

  notifyObservers () {
    const observers = this._getObservers();
    // console.log('Slot.notifyObservers()', observers, this.deps)
    for (const o of observers) {
      const entry = this._getEntryForObserver(o);
      // observer might have been disposed in the meantime
      if (!entry) continue
      this._notifyObserver(entry);
    }
  }

  _getObservers () {
    return this.observers
  }

  _getEntryForObserver (observer) {
    const entries = observer[this._id];
    if (entries) {
      return entries.get(this.id)
    }
  }

  _deleteEntry (observer) {
    const entries = observer[this._id];
    if (entries) {
      entries.delete(this.id);
    }
  }

  _getDocumentChange () {
    const { change, info } = this._updates.document;
    change.info = info;
    return change
  }

  _notifyObserver (entry) {
    const state = this.editorState;
    const spec = entry.spec;
    // TODO: we want to drop this auto-arguments completely
    // after having switched to a pure AppState based implementation
    // i.e. without using observers via EditorSession
    if (spec.deps.length === 1) {
      const name = spec.deps[0];
      switch (name) {
        case 'document': {
          const update = state.getUpdate('document') || {};
          spec.handler(update.change, update.info);
          break
        }
        default:
          spec.handler(state._get(name));
      }
    } else {
      spec.handler();
    }
  }
}

class DocumentSlot extends Slot$1 {
  constructor (editorState, id, stage, deps, documentObserver) {
    super(editorState, id, stage, deps);

    this.documentObserver = documentObserver;
    this.byPath = { '@any': new Set() };
  }

  addObserver (observer, spec) {
    super.addObserver(observer, spec);

    const index = this.byPath;
    const docSpec = spec.options.document;
    if (docSpec && docSpec.path) {
      const key = getKeyForPath(docSpec.path);
      let records = index[key];
      if (!records) {
        records = index[key] = new Set();
      }
      records.add(observer);
    } else {
      index[ANY$1].add(observer);
    }
  }

  removeObserver (observer) {
    const entries = observer[this._id];
    if (entries) {
      const entry = entries.get(this.id);
      const index = this.byPath;
      super.removeObserver(observer);
      const docSpec = entry.spec.options.document;
      if (docSpec && docSpec.path) {
        const key = getKeyForPath(docSpec.path);
        const records = index[key];
        records.delete(observer);
      } else {
        index[ANY$1].delete(observer);
      }
    }
  }

  _getObservers () {
    const state = this.editorState;
    if (!state.isDirty('document')) return this.observers

    // notify all observers that are affected by the change
    const index = this.byPath;
    const { change } = state.getUpdate('document');

    if (!change) {
      console.error('FIXME: expected to find a document change as update for document');
      return index[ANY$1]
    }

    const updated = this.documentObserver.dirty;
    const sets = [];
    // observers without a path spec are registered with path=undefined
    sets.push(index[ANY$1]);
    updated.forEach(id => {
      const set = index[id];
      if (set) sets.push(set);
    });
    const observers = new Set();
    sets.forEach(s => {
      s.forEach(o => observers.add(o));
    });
    return observers
  }
}

class SimpleChangeHistory {
  constructor (editorSession) {
    this._editorSession = editorSession;
    this._done = [];
    this._undone = [];
  }

  canUndo () {
    return this._done.length > 0
  }

  canRedo () {
    return this._undone.length > 0
  }

  getChanges () {
    return this._done.slice()
  }

  addChange (change) {
    this._done.push(change);
    // undone changes are cleared whenever a new change is recorded
    if (this._undone.length > 0) {
      this._undone.length = 0;
    }
  }

  undo () {
    const change = last(this._done);
    if (change) {
      const inverted = this._editorSession.getDocument().invert(change);
      this._editorSession.applyChange(inverted, { replay: true });
      this._done.pop();
      this._undone.push(change);
      return inverted
    }
  }

  redo () {
    const change = last(this._undone);
    if (change) {
      this._editorSession.applyChange(change, { replay: true });
      this._undone.pop();
      this._done.push(change);
      return change
    }
  }
}

/**
 * An EditorSession provides access to the state of an editor
 * for a single document, and provides means to manipulate the underlying document.
 *
 * The EditorSession may be part of a complex application bound to a scope
 * containing only state variables for a single editor.
 */
class AbstractEditorSession extends EventEmitter {
  constructor (id, document, initialEditorState = {}) {
    super();

    this._id = id;
    this._document = document;
    this._history = this._createChangeHistory();

    this._tx = document.createEditingInterface();
    this._txOps = [];

    const editorState = new EditorState(this._createEditorState(document, initialEditorState));
    this.editorState = editorState;
  }

  _createChangeHistory () {
    return new SimpleChangeHistory(this)
  }

  _createEditorState (document, initialState = {}) {
    return Object.assign({
      document,
      history: this._history,
      selection: Selection.nullSelection,
      selectionState: {},
      hasUnsavedChanges: false,
      isBlurred: false
    }, initialState)
  }

  // use this for setting up hooks
  initialize () {
    // EXPERIMENTAL: hook that records changes triggered via node state updates
    this.editorState.document.on('document:changed', this._onDocumentChange, this);
  }

  dispose () {
    const editorState = this.editorState;
    editorState.document.off(this);
    editorState.off(this);
    editorState.dispose();
  }

  canUndo () {
    return this._history.canUndo()
  }

  canRedo () {
    return this._history.canRedo()
  }

  getChanges () {
    return this._history.getChanges()
  }

  getDocument () {
    return this._document
  }

  getEditorState () {
    return this.editorState
  }

  getFocusedSurface () {
    // implement this using a SurfaceManager
    // TODO: as the SurfaceManager is a vital part of the system
    // it should be part of the core implementation
  }

  getSelection () {
    return this._getSelection()
  }

  getSelectionState () {
    return this.editorState.selectionState
  }

  getSurface (surfaceId) {
    // implement this using a SurfaceManager
  }

  hasUnsavedChanges () {
    return Boolean(this.editorState.hasUnsavedChanges)
  }

  isBlurred () {
    return Boolean(this.editorState.isBlurred)
  }

  setSelection (sel) {
    // console.log('EditorSession.setSelection()', sel)
    if (!sel) sel = Selection.nullSelection;
    if (sel && isPlainObject(sel)) {
      sel = this.getDocument().createSelection(sel);
    }
    if (sel && !sel.isNull()) {
      if (!sel.surfaceId) {
        const fs = this.getFocusedSurface();
        if (fs) {
          sel.surfaceId = fs.id;
        }
      }
    }
    // augmenting the selection with surfaceId and containerPath
    // for sake of convenience
    // TODO: rethink if this is really a good idea
    // this could also be implemented by the sub-class, with more knowledge
    // about specific data model and app structure
    if (!sel.isCustomSelection()) {
      if (!sel.surfaceId) {
        _addSurfaceId(sel, this);
      }
      if (!sel.containerPath) {
        _addContainerPath(sel, this);
      }
    }
    const editorState = this.editorState;
    if (editorState.isBlurred) {
      editorState.isBlurred = false;
    }
    this._setSelection(this._normalizeSelection(sel));
    editorState.propagateUpdates();

    return sel
  }

  transaction (transformation, info = {}) {
    const doc = this._document;
    const selBefore = this._getSelection();
    const tx = this._tx;
    const ops = doc._ops;
    ops.length = 0;
    tx.selection = selBefore;
    let transformationCaptured = false;
    try {
      transformation(tx);
      transformationCaptured = true;
    } finally {
      if (!transformationCaptured) {
        this._revert(ops);
      }
    }
    let change = null;
    if (transformationCaptured) {
      const selAfter = tx.selection;
      if (ops.length > 0) {
        change = doc._createDocumentChange(ops, {
          selection: selBefore
        }, {
          selection: selAfter
        });
        change.info = info;
      }
      this._setSelection(this._normalizeSelection(selAfter));
    }
    if (change) {
      let changeApplied = false;
      try {
        this._commit(change, info);
        changeApplied = true;
      } finally {
        if (!changeApplied) {
          change = null;
          this._revert(ops);
          this._setSelection(selBefore);
          // TODO: we should use this to reset the UI if something went horribly wrong
          this.emit('rescue');
        }
      }
    }
    ops.length = 0;

    this.editorState.propagateUpdates();

    return change
  }

  _commit (change, info = {}) {
    const after = change.after;
    const selAfter = after.selection;
    this._setSelection(this._normalizeSelection(selAfter));
    this._document._notifyChangeListeners(change, info);
    this.emit('change', change, info);
    this._history.addChange(change);
  }

  // EXPERIMENTAL: for certain cases it is useful to store volatile information on nodes
  // Then the data does not need to be disposed when a node is deleted.
  updateNodeStates (tuples, options = {}) {
    const doc = this._document;
    // HACK: using internal EditorState API
    const editorStateImpl = this.editorState._getImpl();
    const propagate = options.propagate || !editorStateImpl.isFlowing;
    let change, info;
    const update = editorStateImpl.getUpdate('document');
    const isPseudoChange = !update;
    if (update) {
      change = update.change;
      info = update.info;
    } else {
      // using a pseudo change to get into the existing updating mechanism
      // TODO: do we really need the pseudo change?
      change = doc._createDocumentChange([], {}, {});
      info = { action: 'node-state-update' };
      change._extractInformation();
      change.info = info;
    }

    for (const [id, state] of tuples) {
      const node = doc.get(id);
      if (!node) continue
      if (!node.state) node.state = {};
      Object.assign(node.state, state);
      editorStateImpl.setDirty('document');
      editorStateImpl.documentObserver.setDirty([id]);
      // TODO: do we really need this, or are we good with just updating DocumentObserver
      change.updated[id] = true;
    }
    // emit the pseudo change
    if (isPseudoChange && !options.silent) {
      doc._notifyChangeListeners(change, info);
      this.emit('change', change, info);
    }
    // and propagate if that is
    if (propagate) {
      this.editorState.propagateUpdates();
    }
  }

  undo () {
    const change = this._history.undo();
    if (change) {
      this._setSelection(this._normalizeSelection(change.after.selection));
      this.editorState.propagateUpdates();
    }
  }

  redo () {
    const change = this._history.redo();
    if (change) {
      this._setSelection(this._normalizeSelection(change.after.selection));
      this.editorState.propagateUpdates();
    }
  }

  /*
    There are cases when we want to explicitly reset the change history of
    an editor session
  */
  resetHistory () {
    this._history.reset();
  }

  applyChange (change, info = {}) {
    if (!change) throw new Error('Invalid change')
    const doc = this.getDocument();
    doc._apply(change);
    if (!info.replay) {
      this._history.addChange(change);
    }
    // TODO: why is this necessary?
    doc._notifyChangeListeners(change, info);
    this.emit('change', change, info);
    if (info.replay) {
      this._setSelection(this._normalizeSelection(change.after.selection));
    }
  }

  _normalizeSelection (sel) {
    const doc = this.getDocument();
    if (!sel) {
      sel = Selection.nullSelection;
    } else {
      sel.attach(doc);
    }
    return sel
  }

  _getSelection () {
    return this.editorState.selection
  }

  _setSelection (sel) {
    this.editorState.selection = sel;
  }

  _onDocumentChange (change, info) {
    // console.log('_AbstractEditorSession._onDocumentChange', change, info)
    const editorState = this.editorState;
    // ATTENTION: ATM we are using a DocumentChange to implement node states
    // Now it happens, that something that reacts on document changes (particularly a CitationManager)
    // updates the node state during a flow.
    // HACK: In that case we 'merge' the state update into the already propagated document change
    if (editorState.isDirty('document') && info.action === 'node-state-update') {
      const propagatedChange = editorState.getUpdate('document').change;
      Object.assign(propagatedChange.updated, change.updated);
    } else {
      this.editorState._setUpdate('document', { change, info });
      this.editorState.hasUnsavedChanges = true;
    }
  }

  _onTxOperation (op) {
    this._txOps.push(op);
  }

  _revert () {
    const doc = this._document;
    for (let idx = this._txOps.length - 1; idx--; idx > 0) {
      const op = this._txOps[idx];
      const inverted = op.invert();
      doc._applyOp(inverted);
    }
  }

  _transformSelection (change) {
    var oldSelection = this.getSelection();
    var newSelection = transformSelection(oldSelection, change);
    return newSelection
  }
}

function _addSurfaceId (sel, editorSession) {
  if (sel && !sel.isNull() && !sel.surfaceId) {
    // TODO: We could check if the selection is valid within the given surface
    const surface = editorSession.getFocusedSurface();
    if (surface) {
      sel.surfaceId = surface.id;
    }
  }
}

function _addContainerPath (sel, editorSession) {
  if (sel && !sel.isNull() && sel.surfaceId && !sel.containerPath) {
    const surface = editorSession.getSurface(sel.surfaceId);
    if (surface) {
      const containerPath = surface.getContainerPath();
      if (containerPath) {
        // console.log('Adding containerPath', containerPath)
        sel.containerPath = containerPath;
      }
    }
  }
}

class AbstractIsolatedNodeComponent extends Component {
  constructor (...args) {
    super(...args);

    this.name = this.props.node.id;
    this._state = { selectionFragment: null };

    this.handleAction('escape', this.escape);
    this.ContentClass = this._getContentClass();

    // NOTE: FF does not allow to navigate contenteditable isles
    const useBlocker = platform.isFF || !this.ContentClass.noBlocker;
    this.blockingMode = useBlocker ? 'closed' : 'open';
  }

  getInitialState () {
    const sel = this.getEditorSession().getSelection();
    const selState = this.getEditorSession().getSelectionState();
    return this._deriveStateFromSelectionState(sel, selState)
  }

  getChildContext () {
    return {
      parentSurfaceId: this.getId(),
      isolatedNodeComponent: this,
      // Note: we clear 'surface' here so that we can detect quickly if
      // a child component has a parent surface
      surface: undefined
    }
  }

  didMount () {
    const editorState = this.context.editorSession.getEditorState();
    editorState.addObserver(['selection'], this._onSelectionChanged, this, { stage: 'render' });
  }

  dispose () {
    const editorState = this.context.editorSession.getEditorState();
    editorState.removeObserver(this);
  }

  renderContent ($$, node, options = {}) {
    const ComponentClass = this.ContentClass;
    if (!ComponentClass) {
      console.error('Could not resolve a component for type: ' + node.type);
      return $$(this.__elementTag)
    } else {
      const props = Object.assign(this._getContentProps(), options);
      return $$(ComponentClass, props)
    }
  }

  getId () {
    // HACK: doing this lazily here instead of in the constructor.
    // This is because `getInitialState()` already needs this information
    if (!this._id) {
      this._id = this.context.parentSurfaceId + '/' + this.name;
    }
    return this._id
  }

  get id () { return this.getId() }

  getMode () {
    return this.state.mode
  }

  escape () {
    // console.log('Escaping from IsolatedNode', this.id)
    this.selectNode();
  }

  isOpen () {
    return this.blockingMode === 'open'
  }

  isClosed () {
    return this.blockingMode === 'closed'
  }

  isNotSelected () {
    return !this.state.mode
  }

  isSelected () {
    return this.state.mode === 'selected'
  }

  isCoSelected () {
    return this.state.mode === 'co-selected'
  }

  isFocused () {
    return this.state.mode === 'focused'
  }

  isCoFocused () {
    return this.state.mode === 'co-focused'
  }

  getParentSurface () {
    return this.context.surface
  }

  getEditorSession () {
    return this.context.editorSession
  }

  getSurfaceManager () {
    return this.context.surfaceManager
  }

  _onSelectionChanged () {
    const editorSession = this.getEditorSession();
    const sel = editorSession.getSelection();
    const selState = editorSession.getSelectionState();
    const newState = this._deriveStateFromSelectionState(sel, selState);
    if (!newState && this.state.mode) {
      this.extendState({ mode: null });
    } else if (newState && newState.mode !== this.state.mode) {
      this.extendState(newState);
    }
  }

  onKeydown (event) {
    // console.log('####', event.keyCode, event.metaKey, event.ctrlKey, event.shiftKey);
    // TODO: while this works when we have an isolated node with input or CE,
    // there is no built-in way of receiving key events in other cases
    // We need a global event listener for keyboard events which dispatches to the current isolated node
    if (event.keyCode === keys$1.ESCAPE && this.state.mode === 'focused') {
      event.stopPropagation();
      event.preventDefault();
      this.escape();
    }
  }

  _getContentClass () {
    const node = this.props.node;
    let ComponentClass;
    // first try to get the component registered for this node
    ComponentClass = this.getComponent(node.type, true);
    // otherwise just use an empty Component
    if (!ComponentClass) ComponentClass = Component;

    return ComponentClass
  }

  _getContentProps () {
    return {
      disabled: this.props.disabled,
      node: this.props.node,
      isolatedNodeState: this.state.mode,
      focused: (this.state.mode === 'focused')
    }
  }

  _getSurfaceForSelection (sel, selState) {
    // HACK: deriving additional information from the selection and
    // storing it into selState
    // TODO: this should be part of the regular selection state reducer
    let surface = selState.surface;
    if (!surface) {
      if (sel && sel.surfaceId) {
        const surfaceManager = this.getSurfaceManager();
        surface = surfaceManager.getSurface(sel.surfaceId);
      } else {
        surface = null;
      }
      selState.surface = surface;
    }
    return surface
  }

  // compute the list of surfaces and isolated nodes
  // for the given selection
  _getIsolatedNodes (sel, selState) {
    // HACK: deriving additional information from the selection and
    // storing it into selState
    // TODO: this should be part of the regular selection state reducer
    let isolatedNodes = selState.isolatedNodes;
    if (!isolatedNodes) {
      isolatedNodes = [];
      if (sel && sel.surfaceId) {
        const surfaceManager = this.getSurfaceManager();
        const surface = surfaceManager.getSurface(sel.surfaceId);
        if (surface) {
          isolatedNodes = surface.getComponentPath().filter(comp => comp._isAbstractIsolatedNodeComponent);
        }
      }
      selState.isolatedNodes = isolatedNodes;
    }
    return isolatedNodes
  }

  _shouldConsumeEvent (event) {
    const comp = Component.unwrap(event.currentTarget);
    const isolatedNodeComponent = this._getIsolatedNode(comp);
    return (isolatedNodeComponent === this)
  }

  _getIsolatedNode (comp) {
    if (comp._isAbstractIsolatedNodeComponent) {
      return this
    } else if (comp.context.isolatedNodeComponent) {
      return comp.context.isolatedNodeComponent
    } else if (comp.context.surface) {
      return comp.context.surface.context.isolatedNodeComponent
    }
  }

  get _isAbstractIsolatedNodeComponent () { return true }
}

class HandlerParams {
  constructor (context) {
    const editorSession = context.editorSession;
    if (editorSession) {
      this.editorSession = editorSession;
      this.selection = editorSession.getSelection();
      this.selectionState = editorSession.getSelectionState();
      this.surface = editorSession.getFocusedSurface();
    }
  }
}

class AbstractKeyboardManager {
  onKeydown (event, context) {
    const key = parseKeyEvent(event);
    const hooks = this._getBindings('keydown', key);
    if (hooks) {
      context = context || this._getContext();
      const params = this._getParams(context);
      let hasExecuted = false;
      for (let i = 0; i < hooks.length && !hasExecuted; i++) {
        const hook = hooks[i];
        hasExecuted = hook(params, context);
      }
      if (hasExecuted) {
        event.preventDefault();
        event.stopPropagation();
      }
      return hasExecuted
    }
  }

  onTextInput (text, context) {
    const hooks = this._getBindings('textinput', text);
    if (hooks) {
      context = context || this._getContext();
      const params = this._getParams(context);
      let hasExecuted = false;
      for (let i = 0; i < hooks.length && !hasExecuted; i++) {
        const hook = hooks[i];
        hasExecuted = hook(params, context);
      }
      return hasExecuted
    }
  }

  _getParams (context) {
    return new HandlerParams(context)
  }

  _getBindings (type, key) {
    throw new Error('This method is abstract')
  }

  _getContext () {
    throw new Error('This method is abstract')
  }
}

/**
  Renders an anotated text. Used internally by `TextPropertyComponent`.

  @prop {String[]} path The property to be rendered.
*/
class AnnotatedTextComponent extends Component {
  render ($$) {
    const el = this._renderContent($$)
      .addClass('sc-annotated-text')
      .css({ whiteSpace: 'pre-wrap' });
    return el
  }

  getPath () {
    return this.props.path
  }

  getText () {
    return this.getDocument().get(this.props.path) || ''
  }

  isEmpty () {
    return !(this.getText())
  }

  getAnnotations () {
    return this.getDocument().getIndex('annotations').get(this.props.path)
  }

  getDocument () {
    return this.props.doc || this.context.doc
  }

  _getTagName () {
    return this.props.tagName
  }

  _renderContent ($$) {
    const text = this.getText();
    const annotations = this.getAnnotations();
    const el = $$(this._getTagName() || 'span');
    if (annotations && annotations.length > 0) {
      const fragmenter = new Fragmenter();
      fragmenter.onText = this._renderTextNode.bind(this);
      fragmenter.onOpen = this._renderFragment.bind(this, $$);
      fragmenter.onClose = this._finishFragment.bind(this);
      fragmenter.start(el, text, annotations);
    } else {
      el.append(text);
    }
    return el
  }

  _renderTextNode (context, text) {
    if (text && text.length > 0) {
      context.append(text);
    }
  }

  _renderFragment ($$, fragment) {
    const node = fragment.node;

    // TODO: fix support for container annotations
    // if (node.type === 'container-annotation-fragment') {
    //   return $$(AnnotationComponent, { doc: doc, node: node })
    //     .addClass("se-annotation-fragment")
    //     .addClass(node.anno.getTypeNames().join(' ').replace(/_/g, "-"));
    // } else if (node.type === 'container-annotation-anchor') {
    //   return $$(AnnotationComponent, { doc: doc, node: node })
    //     .addClass("se-anchor")
    //     .addClass(node.anno.getTypeNames().join(' ').replace(/_/g, "-"))
    //     .addClass(node.isStart?"start-anchor":"end-anchor")
    // } else {
    //   ...
    // }

    const ComponentClass = this._getFragmentComponentClass(node);
    const props = this._getFragmentProps(node);
    const el = $$(ComponentClass, props);
    return el
  }

  _getFragmentComponentClass (node, noDefault) {
    let ComponentClass = this.getComponent(node.type, 'not-strict');
    if (node.isInlineNode() &&
        // also no extra wrapping if the node is already an inline node
        !ComponentClass.prototype._isInlineNodeComponent &&
        // opt-out for custom implementations
        !ComponentClass.isCustom) {
      ComponentClass = this.getComponent('inline-node');
    }
    if (!ComponentClass && !noDefault) {
      if (node._isAnnotation) {
        ComponentClass = this._getUnsupportedAnnotationComponentClass();
      } else {
        ComponentClass = this._getUnsupportedInlineNodeComponentClass();
      }
    }
    return ComponentClass
  }

  _getUnsupportedAnnotationComponentClass () {
    return this.getComponent('annotation')
  }

  _getUnsupportedInlineNodeComponentClass () {
    return this.getComponent('annotation')
  }

  _getFragmentProps (node) {
    return { node }
  }

  _finishFragment (fragment, context, parentContext) {
    parentContext.append(context);
  }
}

/**
  Commands are used to perform UI triggered actions on the document. For instance the
  `AnnotationCommand` takes care of creating, expanding, truncating and
  deleting annotations such as strong and emphasis. It does so by determining a
  commandState by inspecting the current selection, which is used to parametrize
  the corresponding tool component. E.g. the strong tool gets active and clickable
  in create mode when a word in the text is selected. Triggered by a click on the tool,
  or a keyboard shortcut, the command gets executed by running the code specified in the
  execute method.

  @abstract

  @example

  ```
  class MyCommand extends Command {
    getCommandState(params, context) {
      // determine commandState based on params and context
    }

    execute(params, context) {
      // perform operations on the document
    }
  }
  ```
*/
class Command {
  /**
    Construcutor is only used internally.

    @constructor
    @param {Object} config    Config provided during command registration
  */
  constructor (config) {
    this.config = config || {};
    this.name = this.config.name;
    if (!this.name) {
      throw new Error("'name' is required")
    }
  }

  // TODO: is this really used?
  get isAsync () {
    return false
  }

  /**
    Get the command name specified at command registration. See
    {@link Configurator#addCommand}
  */
  getName () {
    return this.name
  }

  /**
    Determines command state, based on passed params and context. The command
    state is usually used as props for tool components.

    @example

    This shows the implementation of {@link EditAnnotationCommand#getCommandState}

    ```
    getCommandState(params) {
      const sel = this._getSelection(params)
      const annos = params.selectionState.annosByType.get(this.config.nodeType) || []
      const newState = {
        disabled: true,
      }

      if (annos.length === 1 && sel.isPropertySelection()) {
        newState.disabled = false
        newState.node = annos[0]
      }
    }
    ```

    @param {Object} params      Provides editorSession, selction, selectionState, surface
    @param {Object} context     Provides app-specific context.
  */
  getCommandState(params, context) { // eslint-disable-line
    throw new Error('Command.getCommandState() is abstract.')
  }

  /**
    Execute command and perform operations on the document

    @param {Object} params      Provides commandState, editorSession, selectionState, surface, selection
    @param {Object} context     Provides app-specific context.

    @return {Object} info object with execution details
  */
  execute(params, context) { // eslint-disable-line
    throw new Error('Command.execute() is abstract.')
  }

  /*
    @returns true if this command is creating or editing an annotation
  */
  isAnnotationCommand () {
    return false
  }

  /*
    @returns true if this command is inserting a node into a container
  */
  isInsertCommand () {
    return false
  }

  /*
    @returns true if this command is switching the type of a block-level text node
  */
  isSwitchTypeCommand () {
    return false
  }

  getParams (context) {
    return new HandlerParams(context)
  }

  get _isCommand () { return true }
}

Command.DISABLED = Object.freeze({ disabled: true, active: false });

/**
  A class for commands intended to be executed on the annotations.

  See the example below to learn how to register an `AnnotationCommand`
  for a strong annotation.

  @example

  ```js
  import { AnnotationCommand } from 'substance'

  config.addCommand('strong', AnnotationCommand, {nodeType: 'strong'})
  // Disable, when cursor is collapsed
  config.addCommand('strong', AnnotationCommand, {
    nodeType: 'strong'
  })
  ```
*/

class AnnotationCommand extends Command {
  constructor (config) {
    super(config);

    if (!this.config.nodeType) {
      throw new Error("'nodeType' is required")
    }
  }

  /**
    Get the type of an annotation.

    @returns {String} The annotation's type.
   */
  getAnnotationType () {
    return this.config.nodeType
  }

  getType () {
    return this.getAnnotationType()
  }

  /**
    Get the annotation's data.

    @returns {Object} The annotation's data.
   */
  getAnnotationData () {
    return {}
  }

  /**
    Checks if command couldn't be executed with current selection.

    @param {Array} annos annotations
    @param {Object} sel selection

    @returns {Boolean} Whether or not command could be executed.
   */
  isDisabled (sel, params) {
    const selectionState = params.selectionState;
    const isBlurred = params.editorSession.isBlurred();
    // TODO: Container selections should be valid if the annotation type
    // is a container annotation. Currently we only allow property selections.
    if (isBlurred || !sel || sel.isNull() || !sel.isAttached() || sel.isCustomSelection() ||
        sel.isNodeSelection() || sel.isContainerSelection() || selectionState.isInlineNodeSelection) {
      return true
    }
    return false
  }

  /*
    When cursor is not collapsed tool may be displayed in context (e.g. in an
    overlay)
  */
  showInContext (sel) {
    return !sel.isCollapsed()
  }

  /**
    Checks if new annotations could be created.
    There should be no annotation overlapping, selection must be not collapsed.

    @param {array} annos annotations
    @param {Selection} sel selection
    @param {object} context

    @returns {Boolean} Whether or not annotation could be created.
   */
  // When there's no existing annotation overlapping, we create a new one.
  canCreate (annos, sel, context) {
    // to create an annotation we need an expanded selection
    if (sel.isCollapsed()) return false
    // fine if there is no other anno of this type yet
    if (annos.length === 0) return true
    // otherwise these annos are only allowed to 'touch' the current selection, not overlap.
    for (const anno of annos) {
      if (sel.overlaps(anno.getSelection(), 'strict')) return false
    }
    return true
  }

  /**
    Checks if annotations could be fused.
    There should be more than one annotation overlaped by current selection.

    @param {Array} annos annotations
    @param {Object} sel selection

    @returns {Boolean} Whether or not annotations could be fused.
   */
  canFuse (annos, sel) {
    // When more than one annotation overlaps with the current selection
    return (annos.length >= 2 && !sel.isCollapsed())
  }

  /**
    Checks if annotation could be deleted.
    Cursor or selection must be inside an existing annotation.

    @param {Array} annos annotations
    @param {Object} sel selection

    @returns {Boolean} Whether or not annotation could be deleted.
   */
  canDelete (annos, sel) {
    // When the cursor or selection is inside an existing annotation
    if (annos.length !== 1) return false
    const annoSel = annos[0].getSelection();
    return sel.isInsideOf(annoSel)
  }

  /**
    Checks if annotation could be expanded.
    There should be overlap with only a single annotation,
    selection should be also outside of this annotation.

    @param {Array} annos annotations
    @param {Object} sel selection

    @returns {Boolean} Whether or not annotation could be expanded.
   */
  canExpand (annos, sel) {
    // When there's some overlap with only a single annotation we do an expand
    if (annos.length !== 1) return false
    const annoSel = annos[0].getSelection();
    return sel.overlaps(annoSel, 'strict') && !sel.isInsideOf(annoSel)
  }

  /**
    Checks if annotation could be truncated.
    There should be overlap with only a single annotation,
    selection should also have boundary in common with this annotation.

    @param {Array} annos annotations
    @param {Object} sel selection

    @returns {Boolean} Whether or not annotation could be truncated.
   */
  canTruncate (annos, sel) {
    if (annos.length !== 1) return false
    const annoSel = annos[0].getSelection();

    return (sel.isLeftAlignedWith(annoSel) || sel.isRightAlignedWith(annoSel)) &&
           !sel.contains(annoSel) &&
           !sel.isCollapsed()
  }

  /**
    Gets command state object.

    @param {Object} state.selection the current selection
    @returns {Object} info object with command details.
  */
  getCommandState (params, context) {
    const sel = params.selection;
    // We can skip all checking if a disabled condition is met
    // E.g. we don't allow toggling of property annotations when current
    // selection is a container selection
    if (this.isDisabled(sel, params, context)) {
      return {
        disabled: true
      }
    }
    const annos = this._getAnnotationsForSelection(params);
    const newState = {
      disabled: false,
      active: false,
      mode: null
    };
    if (this.canCreate(annos, sel, context)) {
      newState.mode = 'create';
    } else if (this.canFuse(annos, sel)) {
      newState.mode = 'fuse';
    } else if (this.canTruncate(annos, sel)) {
      newState.active = true;
      newState.mode = 'truncate';
    } else if (this.canExpand(annos, sel)) {
      newState.mode = 'expand';
    } else if (this.canDelete(annos, sel)) {
      newState.active = true;
      newState.mode = 'delete';
    } else {
      newState.disabled = true;
    }
    newState.showInContext = this.showInContext(sel, params, context);

    return newState
  }

  /**
    Execute command and trigger transformation.

    @returns {Object} info object with execution details.
  */
  // Execute command and trigger transformations
  execute (params, context) {
    const commandState = params.commandState;

    if (commandState.disabled) return false
    switch (commandState.mode) {
      case 'create':
        return this.executeCreate(params, context)
      case 'fuse':
        return this.executeFuse(params, context)
      case 'truncate':
        return this.executeTruncate(params, context)
      case 'expand':
        return this.executeExpand(params, context)
      case 'delete':
        return this.executeDelete(params, context)
      default:
        console.warn('Command.execute(): unknown mode', commandState.mode);
        return false
    }
  }

  executeCreate (params, context) {
    const editorSession = params.editorSession;
    const annos = this._getAnnotationsForSelection(params, context);
    this._checkPrecondition(params, context, annos, this.canCreate);
    const annoData = this.getAnnotationData();
    annoData.type = this.getAnnotationType();
    let anno;
    editorSession.transaction(tx => {
      anno = tx.annotate(annoData);
    });
    return {
      mode: 'create',
      anno: anno
    }
  }

  executeFuse (params, context) {
    const annos = this._getAnnotationsForSelection(params);
    this._checkPrecondition(params, context, annos, this.canFuse);
    this._applyTransform(params, tx => {
      annotationHelpers.fuseAnnotation(tx, annos);
    });
    return {
      mode: 'fuse',
      anno: annos[0]
    }
  }

  executeTruncate (params, context) {
    const annos = this._getAnnotationsForSelection(params);
    const anno = annos[0];
    this._checkPrecondition(params, context, annos, this.canTruncate);
    this._applyTransform(params, tx => {
      annotationHelpers.truncateAnnotation(tx, anno, params.selection);
    });
    return {
      mode: 'truncate',
      anno: anno
    }
  }

  executeExpand (params, context) {
    const annos = this._getAnnotationsForSelection(params);
    const anno = annos[0];
    this._checkPrecondition(params, context, annos, this.canExpand);
    this._applyTransform(params, tx => {
      annotationHelpers.expandAnnotation(tx, anno, params.selection);
    });
    return {
      mode: 'expand',
      anno: anno
    }
  }

  executeDelete (params, context) {
    const annos = this._getAnnotationsForSelection(params);
    const anno = annos[0];
    this._checkPrecondition(params, context, annos, this.canDelete);
    this._applyTransform(params, tx => {
      return tx.delete(anno.id)
    });
    return {
      mode: 'delete',
      annoId: anno.id
    }
  }

  isAnnotationCommand () { return true }

  _checkPrecondition (params, context, annos, checker) {
    const sel = params.selection;
    if (!checker.call(this, annos, sel, context)) {
      throw new Error("AnnotationCommand: can't execute command for selection " + sel.toString())
    }
  }

  _getAnnotationsForSelection (params) {
    const selectionState = params.selectionState;
    return selectionState.annosByType.get(this.getAnnotationType()) || []
  }

  /**
    Apply an annotation transformation.

    @returns {Object} transformed annotations.
   */
  _applyTransform (params, transformFn) {
    const editorSession = params.editorSession;
    const sel = params.selection;
    if (sel.isNull()) return
    let result; // to store transform result
    editorSession.setSelection(sel);
    editorSession.transaction(function (tx) {
      const out = transformFn(tx, params);
      if (out) result = out.result;
    });
    return result
  }
}

class AnnotationComponent extends Component {
  render () {
    const el = $$(this.getTagName())
      .attr('data-id', this.props.node.id)
      .addClass(this.getClassNames());
    el.append(this.props.children);
    return el
  }

  getClassNames () {
    return `sc-annotation sm-${this.props.node.type}`
  }

  getTagName () {
    return 'span'
  }
}

const BRACKET = 'X';
const SLASH = '/'.charCodeAt(0);

/*
  Isolation Strategies:
    - default: IsolatedNode renders a blocker the content gets enabled by a double-click.
    - open: No blocker. Content is enabled when parent surface is.

    > Notes:

      The blocker is used to shield the inner UI and not to interfer with general editing gestures.
      In some cases however, e.g. a figure (with image and caption), it feels better if the content directly accessible.
      In this case, the content component must provide a means to drag the node, e.g. set `<img draggable=true>`.
      This works only in browsers that are able to deal with 'contenteditable' isles,
      i.e. a structure where the isolated node is contenteditable=false, and inner elements have contenteditable=true
      Does not work in Edge. Works in Chrome, Safari

      The the default unblocking gesture requires the content to implement a grabFocus() method, which should set the selection
      into one of the surfaces, or set a CustomSelection.
*/
class IsolatedNodeComponent extends AbstractIsolatedNodeComponent {
  render ($$) {
    const node = this.props.node;
    const ContentClass = this.ContentClass;
    const disabled = this.props.disabled;

    // console.log('##### IsolatedNodeComponent.render()', $$.capturing);
    const el = $$('div');
    el.addClass(this.getClassNames())
      .addClass('sc-isolated-node')
      .addClass('sm-' + this.props.node.type)
      .attr('data-id', node.id);
    if (disabled) {
      el.addClass('sm-disabled');
    }
    if (this.state.mode) {
      el.addClass('sm-' + this.state.mode);
    }
    if (!ContentClass.noStyle) {
      el.addClass('sm-default-style');
    }
    // always handle ESCAPE
    el.on('keydown', this.onKeydown);

    // console.log('##### rendering IsolatedNode', this.id)
    const shouldRenderBlocker = (
      this.blockingMode === 'closed' &&
      !this.state.unblocked
    );

    // HACK: we need something 'editable' where we can put DOM selection into,
    // otherwise native cursor navigation gets broken
    el.append(
      $$('div').addClass('se-bracket sm-left').ref('left')
        .append(BRACKET)
    );

    const content = this.renderContent($$, node, {
      disabled: this.props.disabled || shouldRenderBlocker
    }).ref('content');
    content.attr('contenteditable', false);

    el.append(content);
    el.append($$(Blocker).ref('blocker'));
    el.append(
      $$('div').addClass('se-bracket sm-right').ref('right')
        .append(BRACKET)
    );

    if (!shouldRenderBlocker) {
      el.addClass('sm-no-blocker');
      el.on('click', this.onClick)
        .on('dblclick', this.onDblClick);
    }
    el.on('mousedown', this._reserveMousedown, this);

    return el
  }

  getClassNames () {
    return ''
  }

  getContent () {
    return this.refs.content
  }

  selectNode () {
    // console.log('IsolatedNodeComponent: selecting node.');
    const editorSession = this.getEditorSession();
    const nodeId = this.props.node.id;
    const selData = {
      type: 'node',
      nodeId: nodeId
    };
    const surface = this.getParentSurface();
    if (surface) {
      Object.assign(selData, {
        containerPath: surface.getContainerPath(),
        surfaceId: surface.id
      });
    }
    editorSession.setSelection(selData);
  }

  // EXPERIMENTAL: trying to catch clicks not handled by the
  // content when this is unblocked
  onClick (event) {
    event.stopPropagation();
    event.preventDefault();
    this.selectNode();
  }

  onDblClick (event) {
    // console.log('### DblClicked on IsolatedNode', this.id, event.target)
    event.stopPropagation();
  }

  grabFocus (event) {
    const content = this.refs.content;
    if (content.grabFocus) {
      content.grabFocus(event);
      return true
    }
  }

  // EXPERIMENTAL: Surface and IsolatedNodeComponent communicate via flag on the mousedown event
  // and only reacting on click or mouseup when the mousedown has been reserved
  _reserveMousedown (event) {
    if (event.__reserved__) ; else {
      // console.log('%s: taking mousedown ', this.id)
      event.__reserved__ = this;
    }
  }

  // TODO: this is almost the same as in IsolatedInlineNodeComponent
  // We should consolidate this
  _deriveStateFromSelectionState (sel, selState) {
    const surface = this._getSurfaceForSelection(sel, selState);
    const parentSurface = this.getParentSurface();
    const newState = { mode: null, unblocked: null };
    if (!surface) return newState
    // detect cases where this node is selected or co-selected by inspecting the selection
    if (surface === parentSurface) {
      const nodeId = this.props.node.id;
      if (sel.isNodeSelection() && sel.getNodeId() === nodeId) {
        if (sel.isFull()) {
          newState.mode = 'selected';
          newState.unblocked = true;
        } else if (sel.isBefore()) {
          newState.mode = 'cursor';
          newState.position = 'before';
        } else if (sel.isAfter()) {
          newState.mode = 'cursor';
          newState.position = 'after';
        }
      }
      if (sel.isContainerSelection() && sel.containsNode(nodeId)) {
        newState.mode = 'co-selected';
      }
    } else {
      const surfaceId = sel.surfaceId;
      const id = this.getId();
      if (id.length < surfaceId.length && surfaceId.startsWith(id) && surfaceId.charCodeAt(id.length) === SLASH) {
        const tail = surfaceId.slice(id.length + 1);
        if (tail.indexOf('/') > 0) {
          newState.mode = 'co-focused';
          newState.unblocked = true;
        } else {
          newState.mode = 'focused';
          newState.unblocked = true;
        }
      }
    }
    return newState
  }

  get _isIsolatedNodeComponent () { return true }

  static getDOMCoordinate (comp, coor) {
    const { start, end } = IsolatedNodeComponent.getDOMCoordinates(comp);
    if (coor.offset === 0) return start
    else return end
  }

  static getDOMCoordinates (comp) {
    const left = comp.refs.left;
    const right = comp.refs.right;
    return {
      start: {
        container: left.getNativeElement(),
        offset: 0
      },
      end: {
        container: right.getNativeElement(),
        offset: right.getChildCount()
      }
    }
  }

  static getCoordinate (nodeEl, options) {
    const comp = Component.unwrap(nodeEl, 'strict').context.isolatedNodeComponent;
    let offset = null;
    if (options.direction === 'left' || nodeEl === comp.refs.left.el) {
      offset = 0;
    } else if (options.direction === 'right' || nodeEl === comp.refs.right.el) {
      offset = 1;
    }
    let coor;
    if (offset !== null) {
      coor = new Coordinate([comp.props.node.id], offset);
      coor._comp = comp;
    }
    return coor
  }
}

class Blocker extends Component {
  render ($$) {
    return $$('div').addClass('sc-isolated-node-blocker')
      .attr('draggable', true)
      .attr('contenteditable', false)
      .on('click', this.onClick)
      .on('dblclick', this.onDblClick)
  }

  onClick (event) {
    if (event.target !== this.getNativeElement()) return
    // console.log('Clicked on Blocker of %s', this._getIsolatedNodeComponent().id, event)
    event.stopPropagation();
    const comp = this._getIsolatedNodeComponent();
    comp.extendState({ mode: 'selected', unblocked: true });
    comp.selectNode();
  }

  onDblClick (event) {
    // console.log('DblClicked on Blocker of %s', this.getParent().id, event)
    event.stopPropagation();
  }

  _getIsolatedNodeComponent () {
    return this.context.isolatedNodeComponent
  }
}

class IsolatedInlineNodeComponent extends AbstractIsolatedNodeComponent {
  render ($$) {
    const node = this.props.node;
    const ContentClass = this.ContentClass;
    const state = this.state;

    const el = $$('span');
    el.addClass(this.getClassNames())
      .addClass('sc-inline-node')
      .addClass('sm-' + node.type)
      .attr('data-id', node.id)
      .attr('data-inline', '1');

    const disabled = this.isDisabled();

    if (state.mode) {
      el.addClass('sm-' + state.mode);
    } else {
      el.addClass('sm-not-selected');
    }

    if (!ContentClass.noStyle) {
      el.addClass('sm-default-style');
    }

    // shadowing handlers of the parent surface
    // TODO: extract this into a helper so that we can reuse it anywhere where we want
    // to prevent propagation to the parent surface
    el.on('keydown', this.onKeydown);

    el.append(
      this.renderContent($$, node)
        .ref('content')
        .addClass('se-content')
    );

    el.on('click', this.onClick);

    if (disabled) {
      el.addClass('sm-disabled')
        .attr('contenteditable', false);
    }

    // TODO: Chrome et al. does not display selections
    // for `draggable=true`
    // We should only enable draggable if the parent
    // surface is actually focused
    // However, there is some weird behavior:
    // rerendering with `draggable=false` does
    // not remove the attribute
    if (node.shouldBeDraggable) {
      el.attr('draggable', true);
    }

    return el
  }

  isDisabled () {
    return !this.state.mode || ['co-selected', 'cursor'].indexOf(this.state.mode) > -1
  }

  getClassNames () {
    return ''
  }

  onClick (event) {
    if (this._shouldConsumeEvent(event)) {
      event.stopPropagation();
      event.preventDefault();
      this.selectNode();
    }
  }

  selectNode () {
    // console.log('IsolatedNodeComponent: selecting node.');
    const editorSession = this.getEditorSession();
    const node = this.props.node;
    const selData = {
      type: 'property',
      path: node.start.path,
      startOffset: node.start.offset,
      endOffset: node.end.offset
    };
    const surface = this.getParentSurface();
    if (surface) {
      Object.assign(selData, {
        containerPath: surface.getContainerPath(),
        surfaceId: surface.id
      });
    }
    editorSession.setSelection(selData);
  }

  _getContentClass () {
    const node = this.props.node;
    let ComponentClass;
    // first try to get the component registered for this node
    ComponentClass = this.getComponent(node.type, true);
    // then try to find a generic a component registered
    // for "inline-node"
    if (!ComponentClass) {
      ComponentClass = this.getComponent('unsupported-inline-node', true);
    }
    // TODO: this should not be in substance
    // instead an application should register a custom implementation
    // overriding _getContentClass()
    if (!ComponentClass) {
      console.error(`No component registered for inline node '${node.type}'.`);
      ComponentClass = StubInlineNodeComponent;
    }
    return ComponentClass
  }

  // TODO: this is almost the same as in IsolatedNodeComponent
  // We should consolidate this
  _deriveStateFromSelectionState (sel, selState) {
    const surface = this._getSurfaceForSelection(sel, selState);
    const parentSurface = this.getParentSurface();
    if (!surface) return null
    // detect cases where this node is selected or co-selected by inspecting the selection
    if (surface === parentSurface) {
      const node = this.props.node;
      if (sel.isPropertySelection() && !sel.isCollapsed() && isEqual(sel.start.path, node.start.path)) {
        const nodeSel = node.getSelection();
        if (nodeSel.equals(sel)) {
          return { mode: 'selected' }
        }
        if (sel.contains(nodeSel)) {
          return { mode: 'co-selected' }
        }
      }
    }
    const isolatedNodeComponent = surface.context.isolatedNodeComponent;
    if (!isolatedNodeComponent) return null
    if (isolatedNodeComponent === this) {
      return { mode: 'focused' }
    }
    const isolatedNodes = this._getIsolatedNodes(sel, selState);
    if (isolatedNodes.indexOf(this) > -1) {
      return { mode: 'co-focused' }
    }
    return null
  }

  get _isInlineNodeComponent () { return true }
}

class StubInlineNodeComponent extends Component {
  render ($$) {
    const node = this.props.node;
    return $$('span').text('???').attr('data-id', node.id).attr('data-type', node.type)
  }
}

class SelectionFragmentComponent extends Component {
  render ($$) {
    // TODO: we should rename se-cursor to sc-cursor
    const el = $$('span').addClass('se-selection-fragment');
    if (this.props.collaborator) {
      const collaboratorIndex = this.props.collaborator.colorIndex;
      el.addClass('sm-collaborator-' + collaboratorIndex);
    } else {
      el.addClass('sm-local-user');
    }
    el.append(this.props.children);
    return el
  }
}

/**
 * Renders a text property. Used internally by different components to render
 * editable text.
 *
 * @example
 *
 * ```js
 * $$(TextProperty, {
 *   path: [ 'paragraph-1', 'content']
 * })
 * ```
 */
class TextPropertyComponent extends AnnotatedTextComponent {
  didMount () {
    this.context.editorSession.getEditorState().addObserver(['document'], this._onDocumentChange, this, { stage: 'render', document: { path: this.getPath() } });
  }

  dispose () {
    this.context.editorSession.getEditorState().removeObserver(this);
  }

  render ($$) {
    const path = this.getPath();

    const el = this._renderContent($$)
      .addClass('sc-text-property')
      .attr({
        'data-path': getKeyForPath(path)
      })
      .css({
        'white-space': 'pre-wrap'
      });

    if (this.isEmpty()) {
      el.addClass('sm-empty');
      if (this.props.placeholder) {
        el.setAttribute('data-placeholder', this.props.placeholder);
      }
    }

    if (!this.props.withoutBreak) {
      el.append($$('br'));
    }

    return el
  }

  getAnnotations () {
    const path = this.getPath();
    let annos = this.getDocument().getAnnotations(path) || [];
    const markersManager = this.context.markersManager;
    if (markersManager) {
      annos = annos.concat(markersManager.getMarkers(path));
    }
    return annos
  }

  _renderFragment ($$, fragment) {
    const node = fragment.node;
    const id = node.id;
    let el;
    if (node.type === 'selection-fragment') {
      el = $$(SelectionFragmentComponent, { collaborator: node.collaborator });
    } else {
      el = super._renderFragment.apply(this, arguments);
      if (id) {
        el.ref(id + '@' + fragment.counter);
      }
    }
    el.attr('data-offset', fragment.offset);
    return el
  }

  getSurface () {
    return this.props.surface || this.context.surface
  }

  getSurfaceId () {
    const surface = this.getSurface();
    return surface ? surface.id : null
  }

  getContainerPath () {
    const surface = this.getSurface();
    return surface ? surface.getContainerPath() : null
  }

  isEditable () {
    const surface = this.getSurface();
    return surface ? surface.isEditable() : false
  }

  isReadonly () {
    const surface = this.getSurface();
    return surface ? surface.isReadonly() : true
  }

  getDOMCoordinate (charPos) {
    return this._getDOMCoordinate(this.el, charPos)
  }

  _finishFragment (fragment, context, parentContext) {
    context.attr('data-length', fragment.length);
    parentContext.append(context);
  }

  _getDOMCoordinate (el, charPos) {
    let l;
    let idx = 0;
    if (charPos === 0) {
      return {
        container: el.getNativeElement(),
        offset: 0
      }
    }
    for (let child = el.getFirstChild(); child; child = child.getNextSibling(), idx++) {
      if (child.isTextNode()) {
        l = child.textContent.length;
        if (l >= charPos) {
          return {
            container: child.getNativeElement(),
            offset: charPos
          }
        } else {
          charPos -= l;
        }
      } else if (child.isElementNode()) {
        const length = child.getAttribute('data-length');
        if (length) {
          l = parseInt(length, 10);
          if (l >= charPos) {
            // special handling for InlineNodes
            if (child.attr('data-inline')) {
              const nextSibling = child.getNextSibling();
              if (nextSibling && nextSibling.isTextNode()) {
                return {
                  container: nextSibling.getNativeElement(),
                  offset: 0
                }
              } else {
                return {
                  container: el.getNativeElement(),
                  offset: el.getChildIndex(child) + 1
                }
              }
            }
            return this._getDOMCoordinate(child, charPos, idx)
          } else {
            charPos -= l;
          }
        } else {
          console.error('FIXME: Can not map to DOM coordinates.');
          return null
        }
      }
    }
  }

  _onDocumentChange () {
    this.rerender();
  }

  _getUnsupportedInlineNodeComponentClass () {
    return this.getComponent('unsupported-inline-node')
  }

  get _isTextPropertyComponent () { return true }

  // Helpers for DOM selection mapping

  /*
    Used to map from DOM to model.
    Given a root element and a DOM element - which is typically somewhere inside a surface
    it tries to find the next TextProperty by walking up the DOM.
    If found it computes the character position, counting chars and using the hints, data-length and data-offset,
    rendered by the TextPropertyComponent
  */
  static getCoordinate (root, el, offset) {
    const context = this._getPropertyContext(root, el, offset);
    if (!context) {
      return null
    }
    const textPropertyComp = context.comp;
    // in some cases we need to normalize the DOM coordinate
    // before we can use it for retrieving charPos (e.g., observed in #273)
    const charPos = textPropertyComp._getCharPos(context.node, context.offset);
    if (isNumber(charPos)) {
      const coor = new Coordinate(context.path, charPos);
      // TODO: what is this used for?
      coor._comp = textPropertyComp;
      return coor
    } else {
      return null
    }
  }

  static _getPropertyContext (root, node, offset) {
    const result = {
      comp: null,
      el: null,
      path: null,
      node: node,
      offset: offset
    };
    while (node && node !== root) {
      if (node.isElementNode()) {
        const comp = Component.unwrap(node);
        if (comp && comp._isTextPropertyComponent) {
          result.comp = comp;
          result.el = node;
          result.path = comp.getPath();
          return result
        }
        // we need to normalize situations where the DOM coordinate
        // is inside an inline node, which we have observed
        // can actually happen.
        if (node.getAttribute('data-inline')) {
          result.node = node;
          if (offset > 0) {
            result.offset = 1;
          }
        }
      }
      node = node.getParent();
    }
    return null
  }

  _getCharPos (node, offset) {
    let charPos = offset;
    let childIdx;

    /*
      In the following implementation we are exploiting two facts
      for optimization:
      - an element with data-path is assumed to be the text property element
      - an element with data-offset is assumed to be an annotation element

      Particularly, the data-offset property is helpful to get the character position
      in just one iteration.
    */

    const parent = node.getParent();
    if (node.isTextNode()) {
      // TextNode is first child
      if (node === parent.firstChild) {
        // ... we can stop if parent is text property
        const parentPath = parent.getAttribute('data-path');
        const parentOffset = parent.getAttribute('data-offset');
        if (parentPath) {
          charPos = offset;
        // ... and we can stop if parent has an offset hint
        } else if (parentOffset) {
          charPos = parseInt(parentOffset, 10) + offset;
        // ... otherwise we count the charPos by recursing up-tree
        } else {
          charPos = this._getCharPos(parent, 0) + offset;
        }
      } else {
        // the node has a predecessor so we can call recursively
        childIdx = parent.getChildIndex(node);
        charPos = this._getCharPos(parent, childIdx) + offset;
      }
    } else if (node.isElementNode()) {
      const pathStr = node.getAttribute('data-path');
      const offsetStr = node.getAttribute('data-offset');
      // if node is the element of a text property, then offset is a child index
      // up to which we need to sum up all lengths
      if (pathStr) {
        charPos = this._countCharacters(node, offset);
      // similar if node is the element of an annotation, and we can use the
      // element's offset
      } else if (offsetStr) {
        childIdx = parent.getChildIndex(node);
        charPos = parseInt(offsetStr, 10) + this._countCharacters(node, offset);
      // for other elements we need to count characters in the child tree
      // adding the offset of this element which needs to be computed by recursing up-tree
      } else {
        childIdx = parent.getChildIndex(node);
        charPos = this._getCharPos(parent, childIdx) + this._countCharacters(node, offset);
      }
    } else {
      // Unsupported case
      return null
    }
    return charPos
  }

  _countCharacters (el, maxIdx) {
    let charPos = 0;
    // inline elements have a length of 1
    if (el.getAttribute('data-inline')) {
      return maxIdx === 0 ? 0 : 1
    }
    const l = el.getChildCount();
    if (arguments.length === 1) {
      maxIdx = l;
    }
    maxIdx = Math.min(l, maxIdx);
    for (let i = 0, child = el.getFirstChild(); i < maxIdx; child = child.getNextSibling(), i++) {
      if (child.isTextNode()) {
        charPos += child.getTextContent().length;
      } else if (child.isElementNode()) {
        const length = child.getAttribute('data-length');
        if (child.getAttribute('data-inline')) {
          charPos += 1;
        } else if (length) {
          charPos += parseInt(length, 10);
        } else {
          charPos += this._countCharacters(child);
        }
      }
    }
    return charPos
  }
}

const INLINENODES = ['a', 'b', 'big', 'i', 'small', 'tt', 'abbr', 'acronym', 'cite', 'code', 'dfn', 'em', 'kbd', 'strong', 'samp', 'time', 'var', 'bdo', 'br', 'img', 'map', 'object', 'q', 'script', 'span', 'sub', 'sup', 'button', 'input', 'label', 'select', 'textarea'].reduce((m, n) => { m[n] = true; return m }, {});

/*
  A rewrite of the original Substance.Clipboard, which uses a better JSONConverter implementation.
  Note: this should eventually moved back into Substance core.
*/
class Clipboard {
  copy (clipboardData, context) {
    // content specific manipulation API
    const editorSession = context.editorSession;
    const snippet = editorSession.copy();
    this._setClipboardData(clipboardData, context, snippet);
  }

  cut (clipboardData, context) {
    const editorSession = context.editorSession;
    const snippet = editorSession.cut();
    this._setClipboardData(clipboardData, context, snippet);
  }

  paste (clipboardData, context, options = {}) {
    const types = {};
    for (let i = 0; i < clipboardData.types.length; i++) {
      types[clipboardData.types[i]] = true;
    }
    const html = types['text/html'] ? clipboardData.getData('text/html') : '';
    let success = false;
    if (html && !options.plainTextOnly) {
      success = this._pasteHtml(html, context, options);
    }
    if (!success) {
      // in all other cases we fall back to plain-text
      const plainText = types['text/plain'] ? clipboardData.getData('text/plain') : '';
      this._pasteText(plainText, context, options);
    }
  }

  _setClipboardData (clipboardData, context, snippet) {
    const elements = this._createClipboardHtmlElements(context, snippet);
    const plainText = this._createClipboardText(context, snippet, elements);
    const html = this._createClipboardHtml(context, snippet, elements);
    clipboardData.setData('text/plain', plainText);
    if (html) {
      clipboardData.setData('text/html', html);
    }
  }

  _createClipboardHtmlElements (context, snippet) {
    const htmlExporter = context.config.createExporter('html');
    if (htmlExporter) {
      return htmlExporter.convertContainer(snippet, snippet.getContainer().getPath())
    }
  }

  _createClipboardText (context, snippet, htmlElements) {
    const config = context.config;
    const textExporter = config.createExporter('text');
    if (textExporter) {
      return textExporter.exportNode(snippet.getContainer())
    } else if (htmlElements) {
      return htmlElements.map(el => el.textContent).join('\n')
    } else {
      return ''
    }
  }

  _createClipboardHtml (context, snippet, elements) {
    if (elements) {
      // special treatment for a text snippet
      let snippetHtml;
      if (elements.length === 1 && elements[0].attr('data-id') === TEXT_SNIPPET_ID) {
        snippetHtml = elements[0].innerHTML;
      } else {
        snippetHtml = elements.map(el => {
          return el.outerHTML
        }).join('');
      }
      const jsonConverter = new JSONConverter();
      const jsonStr = JSON.stringify(jsonConverter.exportDocument(snippet));
      const substanceContent = `<script id="substance-clipboard" type="application/json">${jsonStr}</script>`;
      const html = '<html><head>' + substanceContent + '</head><body>' + snippetHtml + '</body></html>';
      return html
    }
  }

  _pasteHtml (html, context, options = {}) {
    let htmlDoc;
    try {
      htmlDoc = DefaultDOMElement.parseHTML(html);
    } catch (err) {
      console.error('Could not parse HTML received from the clipboard', err);
      return false
    }

    // when copying from a substance editor we store JSON in a script tag in the head
    // If the import fails e.g. because the schema is incompatible
    // we fall back to plain HTML import
    let snippet;
    if (html.search(/script id=.substance-clipboard./) >= 0) {
      const substanceData = htmlDoc.find('#substance-clipboard');
      if (substanceData) {
        const jsonStr = substanceData.textContent;
        try {
          snippet = this._importFromJSON(context, jsonStr);
        } finally {
          if (!snippet) {
            console.error('Could not convert clipboard content.');
          }
        }
      }
    }
    if (!snippet) {
      const state = {};
      Object.assign(state, this._detectApplicationType(html, htmlDoc));
      // Under windows and in Microsoft Word we can exploit the fact
      // that the paste content is wrapped inside <!--StartFragment--> and <!--EndFragment-->
      if (platform.isWindows || state.isMicrosoftWord) {
        // very strange: this was not working at some day
        // let match = /<!--StartFragment-->(.*)<!--EndFragment-->/.exec(html)
        // ... but still this
        const START_FRAGMENT = '<!--StartFragment-->';
        const END_FRAGMENT = '<!--EndFragment-->';
        const mStart = html.indexOf(START_FRAGMENT);
        if (mStart >= 0) {
          const mEnd = html.indexOf(END_FRAGMENT);
          const fragment = html.slice(mStart + START_FRAGMENT.length, mEnd);
          htmlDoc = DefaultDOMElement.parseHTML(fragment);
        }
      }
      // Note: because we are parsing the HTML not as snippet
      // the parser will always create a full HTML document
      // and there will always be a <body>
      // In case, the clipboard HTML is just a snippet
      // the body will contain the parsed snippet
      let bodyEl = htmlDoc.find('body');
      bodyEl = this._sanitizeBody(state, bodyEl);
      if (!bodyEl) {
        console.error('Invalid HTML.');
        return false
      }
      bodyEl = this._wrapIntoParagraph(bodyEl);
      snippet = context.editorSession.getDocument().createSnippet();
      const htmlImporter = context.config.createImporter('html', snippet);
      const container = snippet.get(SNIPPET_ID);
      bodyEl.getChildren().forEach(el => {
        const node = htmlImporter.convertElement(el);
        if (node) {
          container.append(node.id);
        }
      });
    }
    return context.editorSession.paste(snippet, options)
  }

  _pasteText (text, context) {
    context.editorSession.insertText(text);
  }

  _importFromJSON (context, jsonStr) {
    const snippet = context.editorSession.getDocument().newInstance();
    const jsonData = JSON.parse(jsonStr);
    const converter = new JSONConverter();
    converter.importDocument(snippet, jsonData);
    return snippet
  }

  _detectApplicationType (html, htmlDoc) {
    const state = {};
    const generatorMeta = htmlDoc.find('meta[name="generator"]');
    const xmnlsw = htmlDoc.find('html').getAttribute('xmlns:w');
    if (generatorMeta) {
      const generator = generatorMeta.getAttribute('content');
      if (generator.indexOf('LibreOffice') > -1) {
        state.isLibreOffice = true;
      }
    } else if (xmnlsw) {
      if (xmnlsw.indexOf('office:word') > -1) {
        state.isMicrosoftWord = true;
      }
    } else if (html.indexOf('docs-internal-guid') > -1) {
      state.isGoogleDoc = true;
    }
    return state
  }

  _sanitizeBody (state, body) {
    // Remove <meta> element
    body.findAll('meta').forEach(el => el.remove());
    // Some word processors are exporting new lines instead of spaces
    // for these editors we will replace all new lines with space
    if (state.isLibreOffice || state.isMicrosoftWord) {
      const bodyHtml = body.getInnerHTML();
      body.setInnerHTML(bodyHtml.replace(/\r\n|\r|\n/g, ' '));
    }
    if (state.isGoogleDoc) {
      body = this._fixupGoogleDocsBody(state, body);
    }
    return body
  }

  _fixupGoogleDocsBody (state, body) {
    if (!body) return
    // Google Docs has a strange convention to use a bold tag as
    // container for the copied elements
    // HACK: we exploit the fact that this element has an id with a
    // specific format, e.g., id="docs-internal-guid-5bea85da-43dc-fb06-e327-00c1c6576cf7"
    const bold = body.find('b');
    if (bold && /^docs-internal/.exec(bold.id)) {
      body = bold;
    }
    // transformations to turn formatations encoded via styles
    // into semantic HTML tags
    body.findAll('span').forEach(span => {
      // Google Docs uses spans with inline styles
      // insted of inline nodes
      // We are scanning each span for certain inline styles:
      // font-weight: 700 -> <b>
      // font-style: italic -> <i>
      // vertical-align: super -> <sup>
      // vertical-align: sub -> <sub>
      // TODO: improve the result for other editors by fusing adjacent annotations of the same type
      const nodeTypes = [];
      if (span.getStyle('font-weight') === '700') nodeTypes.push('b');
      if (span.getStyle('font-style') === 'italic') nodeTypes.push('i');
      if (span.getStyle('vertical-align') === 'super') nodeTypes.push('sup');
      if (span.getStyle('vertical-align') === 'sub') nodeTypes.push('sub');
      // remove the style so the element becomes cleaner
      span.removeAttribute('style');
      createInlineNodes(span.getParent(), true);

      function createInlineNodes (parentEl, isRoot) {
        if (nodeTypes.length > 0) {
          const el = parentEl.createElement(nodeTypes[0]);
          if (nodeTypes.length === 1) el.append(span.textContent);
          if (isRoot) {
            parentEl.replaceChild(span, el);
          } else {
            parentEl.appendChild(el);
          }
          nodeTypes.shift();
          createInlineNodes(el);
        }
      }
    });

    // Union siblings with the same tags, e.g. we are turning
    // <b>str</b><b><i>ong</i></b> to <b>str<i>ong</i></b>
    const tags = ['b', 'i', 'sup', 'sub'];
    tags.forEach(tag => {
      body.findAll(tag).forEach(el => {
        const previousSiblingEl = el.getPreviousSibling();
        if (previousSiblingEl && el.tagName === previousSiblingEl.tagName) {
          const parentEl = el.getParent();
          const newEl = parentEl.createElement(tag);
          newEl.setInnerHTML(previousSiblingEl.getInnerHTML() + el.getInnerHTML());
          parentEl.replaceChild(el, newEl);
          parentEl.removeChild(previousSiblingEl);
        }

        // Union siblings and child with the same tags, e.g. we are turning
        // <i>emph</i><b><i>asis</i></b> to <i>emph<b>asis</b></i>
        // Note that at this state children always have the same text content
        // e.g. there can't be cases like <b><i>emph</i> asis</b> so we don't treat them
        if (previousSiblingEl && previousSiblingEl.tagName && el.getChildCount() > 0 && el.getChildAt(0).tagName === previousSiblingEl.tagName) {
          const parentEl = el.getParent();
          const childEl = el.getChildAt(0);
          const newEl = parentEl.createElement(previousSiblingEl.tagName);
          const newChildEl = newEl.createElement(tag);
          newChildEl.setTextContent(childEl.textContent);
          newEl.appendChild(newChildEl);
          parentEl.replaceChild(el, newEl);
        }
      });
    });

    return body
  }

  // if the content only
  _wrapIntoParagraph (bodyEl) {
    const childNodes = bodyEl.getChildNodes();
    let shouldWrap = false;
    for (let i = 0; i < childNodes.length; i++) {
      const c = childNodes[i];
      if (c.isTextNode()) {
        if (!(/^\s+$/.exec(c.textContent))) {
          shouldWrap = true;
          break
        }
      } else if (INLINENODES[c.tagName]) {
        shouldWrap = true;
        break
      }
    }
    if (shouldWrap) {
      const p = bodyEl.createElement('p');
      p.append(childNodes);
      bodyEl.append(p);
    }
    return bodyEl
  }
}

/*
  A class that maps DOM selections to model selections.

  There are some difficulties with mapping model selections:
  1. DOM selections can not model discontinuous selections.
  2. Not all positions reachable via ContentEditable can be mapped to model selections. For instance,
     there are extra positions before and after non-editable child elements.
  3. Some native cursor behaviors need to be overidden.

  @param {Editor} Editor component
 */
class DOMSelection {
  /**
   *
   */
  constructor (editor) {
    this.editor = editor;
    if (platform.inBrowser) {
      this.wRange = window.document.createRange();
    }
    // keeping the last DOM and Model coordinates
    // TODO: why are we doing this?
    this.state = { dom: null, model: null };
  }

  /**
    Create a model selection by mapping the current DOM selection
    to model coordinates.

    @param {object} options
      - `direction`: `left` or `right`; a hint for disambiguations, used by Surface during cursor navigation.
    @returns {model/Selection}
  */
  getSelection (options) {
    // HACK: ignore this if not Browser (e.g. when running the test suite in node)
    if (!platform.inBrowser) return
    const range = this.mapDOMSelection(options);
    const doc = this.editor.getDocument();
    // TODO: consolidate
    return doc._createSelectionFromRange(range)
  }

  getSelectionForDOMRange (wrange) {
    const range = this.mapDOMRange(wrange);
    const doc = this.editor.getDocument();
    return doc._createSelectionFromRange(range)
  }

  /*
    Maps the current DOM selection to a model range.

    @param {object} [options]
      - `direction`: `left` or `right`; a hint for disambiguations, used by Surface during cursor navigation.
    @returns {model/Range}
  */
  mapDOMSelection (options) {
    const wSel = window.getSelection();
    const state = this.state;
    let range;
    if (wSel.rangeCount === 0) return _null()
    const anchorNode = DefaultDOMElement.wrapNativeElement(wSel.anchorNode);
    if (wSel.isCollapsed) {
      const coor = this._getCoordinate(anchorNode, wSel.anchorOffset, options);
      if (!coor) return _null()
      range = _createRange({
        start: coor,
        end: coor
      });
    } else {
      const focusNode = DefaultDOMElement.wrapNativeElement(wSel.focusNode);
      range = this._getRange(anchorNode, wSel.anchorOffset, focusNode, wSel.focusOffset, options);
    }
    state.model = range;
    return range

    function _null () {
      state.dom = null;
      state.model = null;
      return null
    }
  }

  /**
    Transfer a given model selection into the DOM.

    @param {model/Selection} sel
  */
  setSelection (sel) {
    // HACK: ignore this if not Browser (e.g. when running the test suite in node)
    if (!platform.inBrowser) return
    const state = this.state;
    const wSel = window.getSelection();
    const wRange = this.wRange;
    if (!sel || sel.isNull()) return this.clear()
    // console.log('### DOMSelection: setting selection', sel.toString());
    let { start, end } = this.mapModelToDOMCoordinates(sel);
    if (!start) return this.clear()
    if (sel.isReverse()) {
      [start, end] = [end, start];
    }
    state.dom = {
      anchorNode: start.container,
      anchorOffset: start.offset,
      focusNode: end.container,
      focusOffset: end.offset
    };
    // HACK: sometimes it happens that this fails
    // doing a try-finally lets the debugger still stop, but continue
    try {
      _set(state.dom);
    } finally {}

    function _set ({ anchorNode, anchorOffset, focusNode, focusOffset }) {
      wSel.removeAllRanges();
      wRange.setStart(anchorNode, anchorOffset);
      wRange.setEnd(anchorNode, anchorOffset);
      wSel.addRange(wRange);
      if (focusNode !== anchorOffset || focusOffset !== anchorOffset) {
        wSel.extend(focusNode, focusOffset);
      }
    }
  }

  mapModelToDOMCoordinates (sel) {
    let rootEl;
    const surface = this.editor.getSurfaceManager().getSurface(sel.surfaceId);
    if (!surface) {
      console.warn('No surface:', sel.surfaceId);
      rootEl = this.editor.getElement();
    } else {
      rootEl = surface.el;
    }
    if (sel.isNull() || sel.isCustomSelection()) {
      return {}
    }

    let start, end;
    if (sel.isPropertySelection() || sel.isContainerSelection()) {
      start = this._getDOMCoordinate(rootEl, sel.start);
      if (!start) {
        console.warn('FIXME: selection seems to be invalid.');
        return {}
      }
      if (sel.isCollapsed()) {
        end = start;
      } else {
        end = this._getDOMCoordinate(rootEl, sel.end);
        if (!end) {
          console.warn('FIXME: selection seems to be invalid.');
          return {}
        }
      }
    } else if (sel.isNodeSelection()) {
      const comp = Component.unwrap(rootEl.find('*[data-id="' + sel.getNodeId() + '"]'));
      if (!comp) {
        console.error('Could not find component with id', sel.getNodeId());
        return {}
      }
      if (comp._isIsolatedNodeComponent) {
        const coors = IsolatedNodeComponent.getDOMCoordinates(comp, sel);
        start = coors.start;
        end = coors.end;
        // Note: ATM we do not render collapsed NodeSelections differently
        // if (sel.isAfter()) start = end
        // else if (sel.isBefore()) end = start
      } else {
        const _nodeEl = comp.el;
        start = {
          container: _nodeEl.getNativeElement(),
          offset: 0
        };
        end = {
          container: _nodeEl.getNativeElement(),
          offset: _nodeEl.getChildCount()
        };
      }
    }
    return { start, end }
  }

  _getDOMCoordinate (rootEl, coor) {
    let domCoor = null;
    let comp;
    if (coor.isNodeCoordinate()) {
      comp = Component.unwrap(rootEl.find('*[data-id="' + coor.getNodeId() + '"]'));
      if (comp) {
        if (comp._isIsolatedNodeComponent) {
          domCoor = IsolatedNodeComponent.getDOMCoordinate(comp, coor);
        } else {
          let domOffset = 0;
          if (coor.offset > 0) {
            domOffset = comp.getChildCount();
          }
          domCoor = {
            container: comp.getNativeElement(),
            offset: domOffset
          };
        }
      }
    } else {
      comp = Component.unwrap(rootEl.find('.sc-text-property[data-path="' + coor.path.join('.') + '"]'));
      if (comp) {
        domCoor = comp.getDOMCoordinate(coor.offset);
      }
    }
    return domCoor
  }

  /*
    Map a DOM range to a model range.

    @param {Range} range
    @returns {model/Range}
  */
  mapDOMRange (wRange, options) {
    return this._getRange(
      DefaultDOMElement.wrapNativeElement(wRange.startContainer),
      wRange.startOffset,
      DefaultDOMElement.wrapNativeElement(wRange.endContainer),
      wRange.endOffset, options)
  }

  /*
    Clear the DOM selection.
  */
  clear () {
    window.getSelection().removeAllRanges();
    this.state.dom = null;
    this.state.model = null;
  }

  collapse (dir) {
    const wSel = window.getSelection();
    let wRange;
    if (wSel.rangeCount > 0) {
      wRange = wSel.getRangeAt(0);
      wRange.collapse(dir === 'left');
      wSel.removeAllRanges();
      wSel.addRange(wRange);
    }
  }

  select (el) {
    const wSel = window.getSelection();
    const wRange = window.document.createRange();
    wRange.selectNode(el.getNativeElement());
    wSel.removeAllRanges();
    wSel.addRange(wRange);
  }

  extend (el, offset) {
    const wSel = window.getSelection();
    wSel.extend(el.getNativeElement(), offset);
  }

  setCursor (el, offset) {
    const wSel = window.getSelection();
    const wRange = window.document.createRange();
    wRange.setStart(el.getNativeElement(), offset);
    wSel.removeAllRanges();
    wSel.addRange(wRange);
  }

  /*
    Extract a model range from given DOM elements.

    @param {Node} anchorNode
    @param {number} anchorOffset
    @param {Node} focusNode
    @param {number} focusOffset
    @returns {model/Range}
  */
  _getRange (anchorNode, anchorOffset, focusNode, focusOffset, options = {}) {
    const isReverse = DefaultDOMElement.isReverse(anchorNode, anchorOffset, focusNode, focusOffset);
    const isCollapsed = (anchorNode === focusNode && anchorOffset === focusOffset);
    let start, end;
    if (isCollapsed) {
      start = end = this._getCoordinate(anchorNode, anchorOffset, options);
    } else {
      start = this._getCoordinate(anchorNode, anchorOffset, { direction: isReverse ? 'right' : 'left' });
      end = this._getCoordinate(focusNode, focusOffset, options);
    }
    if (start && end) {
      return _createRange({ start, end, isReverse })
    } else {
      return null
    }
  }

  /*
    Map a DOM coordinate to a model coordinate.

    @param {Node} node
    @param {number} offset
    @param {object} options
    @param {object} [options]
      - `direction`: `left` or `right`; a hint for disambiguation.
    @returns {model/Coordinate}

    @info

    `options.direction` can be used to control the result when this function is called
    after cursor navigation. The root problem is that we are using ContentEditable on
    Container level (as opposed to TextProperty level). The native ContentEditable allows
    cursor positions which do not make sense in the model sense.

    For example,

    ```
    <div contenteditable=true>
      <p data-path="p1.content">foo</p>
      <img>
      <p data-path="p1.content">bar</p>
    </div>
    ```
    would allow to set the cursor directly before or after the image, which
    we want to prevent, as it is not a valid insert position for text.
    Instead, if we find the DOM selection in such a situation, then we map it to the
    closest valid model address. And this depends on the direction of movement.
    Moving `left` would provide the previous address, `right` would provide the next address.
    The default direction is `right`.
  */
  _getCoordinate (nodeEl, offset, options = {}) {
    let coor = null;
    // this deals with a cursor in a TextProperty
    if (!coor) {
      coor = TextPropertyComponent.getCoordinate(this.editor.getElement(), nodeEl, offset);
    }
    const comp = Component.unwrap(nodeEl);
    if (!coor && comp) {
      // let IsolatedNodeComponent figure out where the selection is
      if (comp.context.isolatedNodeComponent) {
        coor = IsolatedNodeComponent.getCoordinate(nodeEl, options);
      }
    }
    // Edge-cases: These handlers are hacked so that the case is covered,
    // not solved 'elegantly'
    if (!coor) {
      // as in #354: sometimes anchor or focus is the surface itself
      if (comp && comp._isContainerEditor) {
        const childIdx = (offset === 0) ? 0 : offset - 1;
        const isBefore = (offset === 0);
        const doc = comp.getDocument();
        const containerPath = comp.getContainerPath();
        const nodeIds = doc.get(containerPath);
        const childNode = doc.get(nodeIds[childIdx]);
        const childComp = comp.getChildAt(childIdx);
        coor = new Coordinate([childNode.id], isBefore ? 0 : 1);
        coor._comp = childComp;
      // sometimes anchor or focus is a Node component with TextPropertyComponents as children (all TextNode Components)
      } else if (nodeEl.isElementNode() && nodeEl.getChildCount() > 0) {
        const child = (offset > 0) ? nodeEl.getChildAt(offset - 1) : nodeEl.firstChild;
        let prop;
        const childComp = Component.unwrap(child);
        if (childComp && childComp._isTextPropertyComponent) {
          prop = child;
        }
        if (prop) {
          coor = TextPropertyComponent.getCoordinate(nodeEl, prop, (offset > 0) ? prop.getChildCount() : 0);
        }
      }
    }
    return coor
  }
}

/*
 Helper for creating a model range correctly
 as for model/Range start should be before end.

 In contrast to that, DOM selections are described with anchor and focus coordinates,
 i.e. bearing the information of direction implicitly.
 To simplify the implementation we treat anchor and focus equally
 and only at the end exploit the fact deriving an isReverse flag
 and bringing start and end in the correct order.
*/
function _createRange ({ start, end, isReverse }) {
  if (isReverse) {
    [start, end] = [end, start];
  }
  if (!start._comp || !end._comp) {
    console.error('FIXME: getCoordinate() should provide a component instance');
    return null
  }
  const surface = start._comp.context.surface;
  if (!surface) {
    console.error('FIXME: Editable components should have their surface in the context');
    return null
  }
  if (surface !== end._comp.context.surface) {
    console.error('Coordinates are within two different surfaces. Can not create a selection.');
    return null
  }
  return new Range(start, end, isReverse, surface.getContainerPath(), surface.id)
}

const BROWSER_DELAY = platform.isFF ? 1 : 0;

/**
   Abstract interface for editing components.
   Dances with contenteditable, so you don't have to.
*/
class Surface extends Component {
  constructor (...args) {
    super(...args);

    this._initialize();
  }

  _initialize () {
    const editorSession = this.getEditorSession();
    if (!editorSession) throw new Error('editorSession is mandatory')
    this.name = this.props.name;
    if (!this.name) throw new Error('Surface must have a name.')
    if (this.name.indexOf('/') > -1) {
      // because we are using '/' to deal with nested surfaces (isolated nodes)
      throw new Error("Surface.name must not contain '/'")
    }
    // this path is an identifier unique for this surface considering nesting in IsolatedNodes
    this._surfaceId = Surface.createSurfaceId(this);

    this.clipboard = this.context.clipboard || this._initializeClipboard();
    this.domSelection = this.context.domSelection || this._initializeDOMSelection();

    this._state = {
      // true if the document session's selection is addressing this surface
      skipNextFocusEvent: false
    };
  }

  _initializeClipboard () {
    return new Clipboard()
  }

  _initializeDOMSelection () {
    return new DOMSelection(this)
  }

  getChildContext () {
    return {
      surface: this,
      parentSurfaceId: this.getId(),
      doc: this.getDocument(),
      // Note: clearing isolatedNodeComponent so that it is easier to detect
      // if this surface is within an isolated node or not
      isolatedNodeComponent: null
    }
  }

  didMount () {
    const surfaceManager = this.getSurfaceManager();
    if (surfaceManager && this.isEditable()) {
      surfaceManager.registerSurface(this);
    }
  }

  dispose () {
    const surfaceManager = this.getSurfaceManager();
    // ATTENTION: no matter if registered or not, we always try to unregister
    surfaceManager.unregisterSurface(this);
  }

  didUpdate () {
    this._updateContentEditableState();
  }

  render ($$) {
    const tagName = this.props.tagName || 'div';
    const el = $$(tagName)
      .addClass(this._getClassNames())
      .attr('tabindex', 2)
      .attr('data-surface-id', this.id);

    if (!this.isDisabled()) {
      if (this.isEditable()) {
        // Keyboard Events
        el.on('keydown', this.onKeyDown);
        // OSX specific handling of dead-keys
        if (!platform.isIE) {
          el.on('compositionstart', this.onCompositionStart);
          el.on('compositionend', this.onCompositionEnd);
        }
        // Note: TextEvent in Chrome/Webkit is the easiest for us
        // as it contains the actual inserted string.
        // Though, it is not available in FF and not working properly in IE
        // where we fall back to a ContentEditable backed implementation.
        if (platform.isChromium || platform.isOpera) {
          el.on('input', this.onTextInput);
        } else {
          el.on('keypress', this.onTextInputShim);
        }
        el.on('copy', this._onCopy);
        el.on('paste', this._onPaste);
        el.on('cut', this._onCut);
      }
      if (!this.isReadonly()) {
        // Mouse Events
        el.on('mousedown', this.onMouseDown);
        el.on('contextmenu', this.onContextMenu);
        // disable drag'n'drop
        // we will react on this to render a custom selection
        el.on('focus', this.onNativeFocus);
        el.on('blur', this.onNativeBlur);
        // prevent click from bubbling up
        el.on('click', this.onClick);
      }
    }

    return el
  }

  _getClassNames () {
    return `sc-surface sm-${this.name}`
  }

  getName () {
    return this.name
  }

  getId () {
    return this._surfaceId
  }

  getSurfaceId () {
    return this._surfaceId
  }

  isDisabled () {
    return this.props.disabled
  }

  isEditable () {
    return !this.isReadonly()
  }

  isReadonly () {
    return (this.props.editable === false || !this.parent.context.editable)
  }

  getElement () {
    return this.el
  }

  getDocument () {
    return this.getEditorSession().getDocument()
  }

  getComponentRegistry () {
    return this.context.componentRegistry
  }

  getConfig () {
    return this.context.config
  }

  getEditorSession () {
    return this.context.editorSession
  }

  getSurfaceManager () {
    return this.context.surfaceManager
  }

  getGlobalEventHandler () {
    return this.context.globalEventHandler
  }

  getKeyboardManager () {
    return this.context.keyboardManager
  }

  isEnabled () {
    return !this.state.disabled
  }

  isContainerEditor () {
    return false
  }

  isCustomEditor () {
    return false
  }

  hasNativeSpellcheck () {
    return this.props.spellcheck === 'native'
  }

  getContainerPath () {
    return null
  }

  focus () {
    const editorSession = this.getEditorSession();
    const sel = editorSession.getSelection();
    if (sel.surfaceId !== this.getId()) {
      this.selectFirst();
    }
  }

  blur () {
    const editorSession = this.getEditorSession();
    const sel = editorSession.getSelection();
    if (sel.surfaceId === this.getId()) {
      editorSession.setSelection(null);
    }
  }

  selectFirst () {
    // not implemented
  }

  type (ch) {
    const editorSession = this.getEditorSession();
    editorSession.transaction((tx) => {
      tx.insertText(ch);
    }, { action: 'type' });
  }

  // As the DOMSelection is owned by the Editor now, rerendering could now be done by someone else, e.g. the SurfaceManager?
  rerenderDOMSelection () {
    if (this.isDisabled()) return
    if (platform.inBrowser) {
      // console.log('Surface.rerenderDOMSelection', this.__id__);
      const sel = this.getEditorSession().getSelection();
      if (sel.surfaceId === this.getId()) {
        this.domSelection.setSelection(sel);
        // TODO: remove this HACK
        const scrollPane = this.context.scrollPane;
        if (scrollPane && scrollPane.onSelectionPositioned) {
          console.error('DEPRECATED: you should manage the scrollPane yourself');
          scrollPane.onSelectionPositioned();
        }
      }
    }
  }

  getDomNodeForId (nodeId) {
    return this.el.getNativeElement().querySelector('*[data-id="' + nodeId + '"]')
  }

  /* Event handlers */

  /*
   * Handle document key down events.
   */
  onKeyDown (event) {
    if (!this._shouldConsumeEvent(event)) return
    // console.log('Surface.onKeyDown()', this.getId(), event);

    // ignore fake IME events (emitted in IE and Chromium)
    if (event.key === 'Dead') return

    // keyboard shortcuts
    const keyboardManager = this.getKeyboardManager();
    if (!keyboardManager || !keyboardManager.onKeydown(event)) {
      // core handlers for cursor movements and editor interactions
      switch (event.keyCode) {
        // Cursor movements
        case keys$1.LEFT:
        case keys$1.RIGHT:
          return this._handleLeftOrRightArrowKey(event)
        case keys$1.UP:
        case keys$1.DOWN:
          return this._handleUpOrDownArrowKey(event)
        case keys$1.HOME:
        case keys$1.END:
          return this._handleHomeOrEndKey(event)
        case keys$1.PAGEUP:
        case keys$1.PAGEDOWN:
          return this._handlePageUpOrDownKey(event)
        // Input (together with text-input)
        case keys$1.ENTER:
          return this._handleEnterKey(event)
        case keys$1.TAB:
          return this._handleTabKey(event)
        case keys$1.BACKSPACE:
        case keys$1.DELETE:
          return this._handleDeleteKey(event)
        case keys$1.ESCAPE:
          return this._handleEscapeKey(event)
        case keys$1.SPACE:
          return this._handleSpaceKey(event)
      }
    }
  }

  onTextInput (event) {
    if (!this._shouldConsumeEvent(event)) return
    // console.log("Surface.onTextInput():", event);
    event.preventDefault();
    event.stopPropagation();
    if (!event.data) return
    const ch = event.data;
    const keyboardManager = this.getKeyboardManager();
    if (!keyboardManager || !keyboardManager.onTextInput(ch)) {
      this.type(ch);
    }
  }

  // Handling Dead-keys under OSX
  onCompositionStart (event) {
    if (!this._shouldConsumeEvent(event)) return
    // console.log("Surface.onCompositionStart():", event);
    // EXPERIMENTAL:
    // We need to handle composed characters better
    // Here we try to overwrite content which as been already inserted
    // e.g. on OSX when holding down `a` a regular text-input event is triggered,
    // after a second a context menu appears and a composition-start event is fired
    // In that case, the first inserted character must be removed again
    if (event.data) {
      const editorSession = this.getEditorSession();
      const l = event.data.length;
      const sel = editorSession.getSelection();
      if (sel.isPropertySelection() && sel.isCollapsed()) {
        // console.log("Overwriting composed character")
        const offset = sel.start.offset;
        editorSession.setSelection(sel.createWithNewRange(offset - l, offset));
      }
    }
  }

  onCompositionEnd (event) {
    if (!this._shouldConsumeEvent(event)) return
    // console.log("Surface.onCompositionEnd():", event);
    // Firefox does not fire textinput events at the end of compositions,
    // but has providing everything in the compositionend event
    if (platform.isFF) {
      event.preventDefault();
      event.stopPropagation();
      if (!event.data) return
      this._delayed(() => {
        const ch = event.data;
        const keyboardManager = this.getKeyboardManager();
        if (!keyboardManager || !keyboardManager.onTextInput(ch)) {
          this.type(ch);
        }
      });
    }
  }

  // ATTENTION: this is needed for most browsers other than Chrome
  // because most of them do not support InputEvent.data (or will maybe never)
  onTextInputShim (event) {
    if (!this._shouldConsumeEvent(event)) return
    // Filter out non-character keys
    if (
      // Catches most keys that don't produce output (charCode === 0, thus no character)
      event.which === 0 || event.charCode === 0 ||
      // Opera 12 doesn't always adhere to that convention
      event.keyCode === keys$1.TAB || event.keyCode === keys$1.ESCAPE ||
      // prevent combinations with meta keys, but not alt-graph which is represented as ctrl+alt
      Boolean(event.metaKey) || (Boolean(event.ctrlKey) ^ Boolean(event.altKey))
    ) {
      return
    }
    let ch = String.fromCharCode(event.which);
    if (!event.shiftKey) {
      ch = ch.toLowerCase();
    }
    event.preventDefault();
    event.stopPropagation();
    const keyboardManager = this.getKeyboardManager();
    if (!keyboardManager || !keyboardManager.onTextInput(ch)) {
      if (ch.length > 0) {
        this.type(ch);
      }
    }
  }

  onClick (event) {
    if (!this._shouldConsumeEvent(event)) {
      // console.log('skipping mousedown', this.id)
      return false
    }
    // stop bubbling up here
    event.stopPropagation();
  }

  // TODO: the whole mouse event based selection mechanism needs
  // to be redesigned. The current implementation works basically
  // though, there are some things which do not work well cross-browser
  // particularly, double- and triple clicks.
  // also it turned out to be problematic to react on mouse down instantly
  onMouseDown (event) {
    if (!this._shouldConsumeEvent(event)) {
      // console.log('skipping mousedown', this.id)
      return false
    }
    // stopping propagation because now the event is considered to be handled
    event.stopPropagation();

    // EXPERIMENTAL: trying to 'reserve' a mousedown event
    // so that parents know that they shouldn't react
    // This is similar to event.stopPropagation() but without
    // side-effects.
    // Note: some browsers do not do clicks, selections etc. on children if propagation is stopped
    if (event.__reserved__) {
      // console.log('%s: mousedown already reserved by %s', this.id, event.__reserved__.id)
      return
    } else {
      // console.log('%s: taking mousedown ', this.id)
      event.__reserved__ = this;
    }

    // NOTE: this is here to make sure that this surface is contenteditable
    // For instance, IsolatedNodeComponent sets contenteditable=false on this element
    // to achieve selection isolation
    if (this.isEditable()) {
      this.el.setAttribute('contenteditable', true);
    }

    // TODO: what is this exactly?
    if (event.button !== 0) {
      return
    }

    // special treatment for triple clicks
    if (!(platform.isIE && platform.version < 12) && event.detail >= 3) {
      const sel = this.getEditorSession().getSelection();
      if (sel.isPropertySelection()) {
        this._selectProperty(sel.path);
        event.preventDefault();
        event.stopPropagation();
        return
      } else if (sel.isContainerSelection()) {
        this._selectProperty(sel.startPath);
        event.preventDefault();
        event.stopPropagation();
        return
      }
    }
    // 'mouseDown' is triggered before 'focus' so we tell
    // our focus handler that we are already dealing with it
    // The opposite situation, when the surface gets focused e.g. using keyboard
    // then the handler needs to kick in and recover a persisted selection or such
    this._state.skipNextFocusEvent = true;

    // this is important for the regular use case, where the mousup occurs within this component
    this.el.on('mouseup', this.onMouseUp, this);
    // NOTE: additionally we need to listen to mousup on document to catch events outside the surface
    // TODO: it could still be possible not to receive this event, if mouseup is triggered on a component that consumes the event
    if (platform.inBrowser) {
      const documentEl = DefaultDOMElement.wrapNativeElement(window.document);
      documentEl.on('mouseup', this.onMouseUp, this);
    }
  }

  onMouseUp (e) {
    // console.log('Surface.onMouseUp', this.id)
    this.el.off('mouseup', this.onMouseUp, this);
    if (platform.inBrowser) {
      const documentEl = DefaultDOMElement.wrapNativeElement(window.document);
      documentEl.off('mouseup', this.onMouseUp, this);
    }
    // console.log('Surface.onMouseup', this.id);
    // ATTENTION: filtering events does not make sense here,
    // as we need to make sure that pick the selection even
    // when the mouse is released outside the surface
    // if (!this._shouldConsumeEvent(e)) return
    e.stopPropagation();
    // ATTENTION: this delay is necessary for cases the user clicks
    // into an existing selection. In this case the window selection still
    // holds the old value, and is set to the correct selection after this
    // being called.
    this._delayed(() => {
      const sel = this.domSelection.getSelection();
      this._setSelection(sel);
    });
  }

  // When a user right clicks the DOM selection is updated (in Chrome the nearest
  // word gets selected). Like we do with the left mouse clicks we need to sync up
  // our model selection.
  onContextMenu (event) {
    if (!this._shouldConsumeEvent(event)) return
    const sel = this.domSelection.getSelection();
    this._setSelection(sel);
  }

  onNativeBlur () {
    // console.log('Native blur on surface', this.getId());
    const _state = this._state;
    _state.hasNativeFocus = false;
  }

  onNativeFocus () {
    // console.log('Native focus on surface', this.getId());
    const _state = this._state;
    _state.hasNativeFocus = true;
  }

  _onCopy (e) {
    e.preventDefault();
    e.stopPropagation();
    const clipboardData = e.clipboardData;
    this.clipboard.copy(clipboardData, this.context);
  }

  _onCut (e) {
    e.preventDefault();
    e.stopPropagation();
    const clipboardData = e.clipboardData;
    this.clipboard.cut(clipboardData, this.context);
  }

  _onPaste (e) {
    e.preventDefault();
    e.stopPropagation();
    const clipboardData = e.clipboardData;
    // TODO: allow to force plain-text paste
    this.clipboard.paste(clipboardData, this.context);
  }

  // Internal implementations

  _onSelectionChanged (selection) {
    const newMode = this._deriveModeFromSelection(selection);
    if (this.state.mode !== newMode) {
      this.extendState({
        mode: newMode
      });
    }
  }

  // helper to manage surface mode which is derived from the current selection
  _deriveModeFromSelection (sel) {
    if (!sel) return null
    const surfaceId = sel.surfaceId;
    const id = this.getId();
    let mode;
    if (startsWith(surfaceId, id)) {
      if (surfaceId.length === id.length) {
        mode = 'focused';
      } else {
        mode = 'co-focused';
      }
    }
    return mode
  }

  _updateContentEditableState () {
    // NOTE: this gets called whenever props or state is updated.
    // Particularly, when this surface is co-focused, i.e.
    // it has a child surface which is focused, and the child surface
    // is inside a ('closed') IsolatedNodeComponent,
    // then it is important to turn-off contenteditable, as
    // otherwise the cursor can leave the isolated area..
    function isInsideOpenIsolatedNode (editorSession, surfaceManager) {
      if (surfaceManager) {
        const sel = editorSession.getSelection();
        const surface = surfaceManager.getSurface(sel.surfaceId);
        if (surface) {
          const isolatedNodeComponent = surface.context.isolatedNodeComponent;
          if (isolatedNodeComponent) {
            return isolatedNodeComponent.isOpen()
          }
        }
      }
    }

    // in most cases contenteditable is true if this Surface is not disabled
    let enableContenteditable = this.isEditable() && !this.props.disabled;
    if (enableContenteditable && this.state.mode === 'co-focused') {
      enableContenteditable = isInsideOpenIsolatedNode(this.getEditorSession(), this.getSurfaceManager());
    }
    if (enableContenteditable) {
      this.el.setAttribute('contenteditable', true);
    } else {
      // TODO: find out what is better
      this.el.removeAttribute('contenteditable');
    }
  }

  _blur () {
    if (this.el) {
      this.el.blur();
    }
  }

  _focus () {
    if (this.isDisabled()) return
    // console.log('Focusing surface %s explicitly with Surface.focus()', this.getId());
    // NOTE: FF is causing problems with dynamically activated contenteditables
    // and focusing
    if (platform.isFF) {
      this.domSelection.clear();
      this.el.getNativeElement().blur();
    }
    this._focusElement();
  }

  _focusElement () {
    this._state.hasNativeFocus = true;
    // HACK: we must not focus explicitly in Chrome/Safari
    // as otherwise we get a crazy auto-scroll
    // Still, this is ok, as everything is working fine
    // there, without that (as opposed to FF/Edge)
    if (this.el && !platform.isWebkit) {
      this._state.skipNextFocusEvent = true;
      // ATTENTION: unfortunately, focusing the contenteditable does lead to auto-scrolling
      // in some browsers
      this.el.focus({ preventScroll: true });
      this._state.skipNextFocusEvent = false;
    }
  }

  _handleLeftOrRightArrowKey (event) {
    event.stopPropagation();
    const direction = (event.keyCode === keys$1.LEFT) ? 'left' : 'right';
    // Note: we need this timeout so that CE updates the DOM selection first
    // before we map it to the model
    this._delayed(() => {
      this._updateModelSelection({ direction });
    });
  }

  _handleUpOrDownArrowKey (event) {
    event.stopPropagation();
    // Note: we need this timeout so that CE updates the DOM selection first
    // before we map it to the model
    this._delayed(() => {
      const options = {
        direction: (event.keyCode === keys$1.UP) ? 'left' : 'right'
      };
      this._updateModelSelection(options);
    });
  }

  _handleHomeOrEndKey (event) {
    event.stopPropagation();
    // Note: we need this timeout so that CE updates the DOM selection first
    // before we map it to the model
    this._delayed(() => {
      const options = {
        direction: (event.keyCode === keys$1.HOME) ? 'left' : 'right'
      };
      this._updateModelSelection(options);
    });
  }

  _handlePageUpOrDownKey (event) {
    event.stopPropagation();
    // Note: we need this timeout so that CE updates the DOM selection first
    // before we map it to the model
    this._delayed(() => {
      const options = {
        direction: (event.keyCode === keys$1.PAGEUP) ? 'left' : 'right'
      };
      this._updateModelSelection(options);
    });
  }

  _handleSpaceKey (event) {
    event.stopPropagation();
    event.preventDefault();
    const ch = ' ';
    const keyboardManager = this.getKeyboardManager();
    if (!keyboardManager || !keyboardManager.onTextInput(ch)) {
      this.type(ch);
    }
  }

  _handleTabKey (event) {
    event.stopPropagation();
    this.el.emit('tab', {
      altKey: event.altKey,
      ctrlKey: event.ctrlKey,
      metaKey: event.metaKey,
      shiftKey: event.shiftKey,
      code: event.code
    });
    if (this.props.handleTab === false) {
      event.preventDefault();
    } else {
      this.__handleTab(event);
    }
  }

  __handleTab () {
    // in many cases we let the browser do the TAB
    // and then record the changed selection
    this._delayed(() => {
      this._updateModelSelection();
    });
  }

  _handleEnterKey (event) {
    event.preventDefault();
    event.stopPropagation();
    this.getEditorSession().transaction((tx) => {
      tx.break();
    }, { action: 'break' });
  }

  _handleEscapeKey () {}

  _handleDeleteKey (event) {
    event.preventDefault();
    event.stopPropagation();
    const direction = (event.keyCode === keys$1.BACKSPACE) ? 'left' : 'right';
    this.getEditorSession().transaction((tx) => {
      tx.deleteCharacter(direction);
    }, { action: 'delete' });
  }

  _hasNativeFocus () {
    return Boolean(this._state.hasNativeFocus)
  }

  _setSelection (sel) {
    // Since we allow the surface be blurred natively when clicking
    // on tools we now need to make sure that the element is focused natively
    // when we set the selection
    // This is actually only a problem on FF, other browsers set the focus implicitly
    // when a new DOM selection is set.
    // ATTENTION: in FF 44 this was causing troubles, making the CE unselectable
    // until the next native blur.
    // TODO: check if this is still necessary
    if (!sel.isNull() && sel.surfaceId === this.id && platform.isFF) {
      this._focusElement();
    }
    this.getEditorSession().setSelection(sel);
  }

  _updateModelSelection (options) {
    const sel = this.domSelection.getSelection(options);
    // console.log('Surface: updating model selection', sel.toString());
    // NOTE: this will also lead to a rerendering of the selection
    // via session.on('update')
    this._setSelection(sel);
  }

  _selectProperty (path) {
    const doc = this.getDocument();
    const text = doc.get(path);
    this._setSelection(doc.createSelection({
      type: 'property',
      path: path,
      startOffset: 0,
      endOffset: text.length
    }));
  }

  _renderNode ($$, nodeId) {
    const doc = this.getDocument();
    const node = doc.get(nodeId);
    let ComponentClass = this.getComponent(node.type, true);
    if (!ComponentClass) {
      console.error('Could not resolve a component for type: ' + node.type);
      ComponentClass = this.getComponent('unsupported-node');
    }
    return $$(ComponentClass, this._getNodeProps(node))
  }

  _getNodeProps (node) {
    return {
      node,
      placeholder: this.props.placeholder,
      disabled: this.props.disabled
    }
  }

  // only take care of events which are emitted on targets which belong to this surface
  _shouldConsumeEvent (event) {
    // console.log('should consume?', event.target, this.id)
    const comp = Component.unwrap(event.target);
    return (comp && (comp === this || comp.context.surface === this))
  }

  // Used by DragManager
  getSelectionFromEvent (event) {
    const domRange = getDOMRangeFromEvent(event);
    const sel = this.domSelection.getSelectionForDOMRange(domRange);
    sel.surfaceId = this.getId();
    return sel
  }

  setSelectionFromEvent (event) {
    const sel = this.getSelectionFromEvent(event);
    if (sel) {
      this._state.skipNextFocusEvent = true;
      this._setSelection(sel);
    } else {
      console.error('Could not create a selection from event.');
    }
  }

  get id () {
    return this._surfaceId
  }

  _delayed (fn) {
    if (platform.inBrowser) {
      window.setTimeout(fn, BROWSER_DELAY);
    }
  }
}

Surface.prototype._isSurface = true;

/*
  Computes the id of a surface

  With IsolatedNodes, surfaces can be nested.
  In this case the id can be seen as a path from the top-most to the nested ones

  @examples

  - top-level surface: 'body'
  - table cell: 'body/t1/t1-A1.content'
  - figure caption: 'body/fig1/fig1-caption.content'
  - nested containers: 'body/section1'
*/
Surface.createSurfaceId = function (surface) {
  const parentSurfaceId = surface.context.parentSurfaceId;
  if (parentSurfaceId) {
    return parentSurfaceId + '/' + surface.name
  } else {
    return surface.name
  }
};

/**
 * Editor for a text property (annotated string).
 *
 * @param {string} props.name unique editor name
 * @param {string[]} props.path path to a text property
 *
 * @example
 *
 * Create a `TextPropertyEditor` for the `name` property of an author object.
 *
 * ```js
 * $$(TextPropertyEditor, {
 *   name: 'authorNameEditor',
 *   path: ['author_1', 'name']
 * })
 * ```
 */
class TextPropertyEditor extends Surface {
  constructor (parent, props) {
    // making props.name optional
    props.name = props.name || props.path.join('.');
    super(parent, props);

    if (!props.path) {
      throw new Error("Property 'path' is mandatory.")
    }
  }

  didMount () {
    super.didMount();

    const editorState = this.context.editorSession.getEditorState();
    editorState.addObserver(['selection'], this._onSelectionChanged, this, {
      stage: 'render'
    });
  }

  dispose () {
    super.dispose();

    const editorState = this.context.editorSession.getEditorState();
    editorState.removeObserver(this);
  }

  render ($$) {
    const TextPropertyComponent = this.getComponent('text-property');

    const el = super.render.apply(this, arguments);

    if (!this.props.disabled) {
      el.addClass('sm-enabled');
      el.attr('contenteditable', true);
      // native spellcheck
      el.attr('spellcheck', this.props.spellcheck === 'native');
    }

    el.append(
      $$(TextPropertyComponent, {
        doc: this.getDocument(),
        placeholder: this.props.placeholder,
        tagName: this.props.tagName || 'div',
        path: this.props.path,
        markers: this.props.markers,
        withoutBreak: this.props.withoutBreak
      }).ref('property')
    );

    if (this.isEditable()) {
      el.addClass('sm-editable');
    } else {
      el.addClass('sm-readonly');
      // HACK: removing contenteditable if not editable
      // TODO: we should fix substance.TextPropertyEditor to be consistent with props used in substance.Surface
      el.setAttribute('contenteditable', false);
    }

    return el
  }

  _getClassNames () {
    return 'sc-text-property-editor sc-surface'
  }

  selectFirst () {
    this.editorSession.setSelection({
      type: 'property',
      path: this.getPath(),
      startOffset: 0,
      surfaceId: this.id
    });
  }

  getPath () {
    return this.props.path
  }

  _handleEnterKey (event) {
    event.stopPropagation();
    event.preventDefault();
    if (this.props.multiLine) {
      this.type('\n');
    }
  }

  _handleEscapeKey (event) {
    this.el.emit('escape', {
      altKey: event.altKey,
      ctrlKey: event.ctrlKey,
      metaKey: event.metaKey,
      shiftKey: event.shiftKey,
      code: event.code
    });
  }

  get _isTextPropertyEditor () { return true }
}

class TextNodeComponent$1 extends Component {
  /*
    NOTE: text updates are observed by TextPropertyComponent
    If necessary override this method and add other observers
  */
  didMount () {}

  render ($$) {
    const parentSurface = this.context.surface;
    let TextPropertyComponent;
    // render the TextNode as Surface if the parent is not a ContainerEditor
    if (parentSurface && parentSurface.isContainerEditor()) {
      // Note: when inside a ContainerEditor, then this is not a editor itself
      TextPropertyComponent = this.getComponent('text-property');
    } else {
      TextPropertyComponent = this.getComponent('text-property-editor');
    }
    const node = this.props.node;
    const tagName = this.getTagName();
    const path = node.getPath();
    const el = $$(tagName)
      .addClass(this.getClassNames())
      .attr('data-id', node.id);
    el.append(
      $$(TextPropertyComponent, {
        doc: node.getDocument(),
        name: getKeyForPath(path),
        path,
        placeholder: this.props.placeholder
      })
    );
    // TODO: ability to edit attributes
    return el
  }

  getTagName () {
    return 'div'
  }

  getClassNames () {
    // TODO: don't violate the 'sc-' contract
    return 'sc-text-node sm-' + this.props.node.type
  }
}

class UnsupportedNodeComponent extends IsolatedNodeComponent {
  _getContentClass () {
    return UnsupportedContentComponent
  }
}

class UnsupportedContentComponent extends Component {
  render ($$) {
    const node = this.props.node;
    let data;
    if (node._isXMLNode) {
      data = node.toXML().serialize();
    } else if (node.data) {
      data = node.data;
    } else {
      data = JSON.stringify(node.toJSON());
    }
    const el = $$('div').addClass('sc-unsupported').append(
      $$('pre').text(data)
    ).attr({
      'data-id': node.id,
      contenteditable: false
    });

    return el
  }
}

var BasePackage = {
  configure (config) {
    config.addComponent('annotation', AnnotationComponent);
    config.addComponent('inline-node', IsolatedInlineNodeComponent);
    config.addComponent('isolated-node', IsolatedNodeComponent);
    config.addComponent('text-node', TextNodeComponent$1);
    config.addComponent('text-property', TextPropertyComponent);
    config.addComponent('text-property-editor', TextPropertyEditor);
    config.addComponent('unsupported-node', UnsupportedNodeComponent);
  }
};

const DISABLED = Object.freeze({
  disabled: true
});

class CommandManager {
  constructor (editorSession, deps, commands) {
    this.editorSession = editorSession;
    // commands are setup lazily so that we can take context into consideration
    // allowing to disable certain commands if they should not be considered
    // in a specifc context at all
    this._allCommands = commands;
    this._commands = null;

    editorSession.getEditorState().addObserver(deps, this.reduce, this, { stage: 'update' });
  }

  dispose () {
    this.editorSession.getEditorState().off(this);
  }

  initialize () {
    this._initializeCommands();
    this.reduce();
  }

  reduce () {
    const editorState = this.editorSession.getEditorState();
    const commandStates = this._getCommandStates();
    editorState.commandStates = commandStates;
  }

  executeCommand (commandName, params = {}) {
    const editorState = this.editorSession.getEditorState();
    const cmdState = editorState.commandStates[commandName];
    if (!cmdState || cmdState.disabled) {
      return false
    } else {
      const commands = this._getCommands();
      const cmd = commands.get(commandName);
      const context = this.editorSession.getContext();
      params = Object.assign(new HandlerParams(context), params);
      params.commandState = cmdState;
      cmd.execute(params, context);
      return true
    }
  }

  _getCommandStates () {
    if (!this._commands) this._initializeCommands();

    const editorState = this.editorSession.getEditorState();
    const context = this.editorSession.getContext();
    const params = new HandlerParams(context);
    const doc = editorState.document;
    const sel = editorState.selection;
    const selectionState = editorState.selectionState;
    const isBlurred = editorState.isBlurred;
    const noSelection = !sel || sel.isNull() || !sel.isAttached();

    const commandStates = Object.assign({}, this._allDisabled);
    // all editing commands are disabled if
    // - this editorSession is blurred,
    // - or the selection is null,
    // - or the selection is inside a custom editor
    if (!isBlurred && !noSelection && !sel.isCustomSelection()) {
      const path = sel.start.path;
      const node = doc.get(path[0]);

      // TODO: is this really necessary. It rather seems to be
      // a workaround for other errors, i.e., the selection pointing
      // to a non existing node
      // If really needed we should document why, and in which case.
      if (!node) {
        throw new Error('FIXME: explain when this happens')
      }

      const nodeProp = _getNodeProp(node, path);
      const isInsideText = nodeProp ? nodeProp.isText() : false;

      // annotations can only be applied on PropertySelections inside
      // text, and not on an inline-node
      if (isInsideText && sel.isPropertySelection() && !selectionState.isInlineNodeSelection) {
        Object.assign(commandStates, _disabledIfDisallowedTargetType(this._annotationCommands, nodeProp.targetTypes, params, context));
      }

      // for InsertCommands the selection must be inside a ContainerEditor
      const containerPath = selectionState.containerPath;
      if (containerPath) {
        const containerProp = doc.getProperty(containerPath);
        if (containerProp) {
          const targetTypes = containerProp.targetTypes;
          Object.assign(commandStates, _disabledIfDisallowedTargetType(this._insertCommands, targetTypes, params, context));
          Object.assign(commandStates, _disabledIfDisallowedTargetType(this._switchTypeCommands, targetTypes, params, context));
        }
      }
    }

    // other commands must check their own preconditions
    Object.assign(commandStates, _getCommandStates(this._otherCommands, params, context));

    return commandStates
  }

  _getCommands () {
    if (!this._commands) {
      this._initializeCommands();
    }
    return this._commands
  }

  _initializeCommands () {
    const context = this.editorSession.getContext();
    const allCommands = Array.from(this._allCommands);
    // remove disabled all commands that revoke by inspecting the context
    const commands = new Map(allCommands.filter(([name, command]) => {
      // for legacy, keep commands enabled which do not proved a `shouldBeEnabled()` method
      return !command.shouldBeEnabled || command.shouldBeEnabled(context)
    }));
    const annotationCommands = [];
    const insertCommands = [];
    const switchTypeCommands = [];
    const otherCommands = [];
    commands.forEach(command => {
      if (command.isAnnotationCommand()) {
        annotationCommands.push(command);
      } else if (command.isInsertCommand()) {
        insertCommands.push(command);
      } else if (command.isSwitchTypeCommand()) {
        switchTypeCommands.push(command);
      } else {
        otherCommands.push(command);
      }
    });
    this._commands = commands;
    this._annotationCommands = annotationCommands;
    this._insertCommands = insertCommands;
    this._switchTypeCommands = switchTypeCommands;
    this._otherCommands = otherCommands;
    this._allDisabled = _disabled(Array.from(commands.values()));
  }
}

function _getNodeProp (node, path) {
  if (path.length === 2) {
    const propName = last(path);
    const prop = node.getSchema().getProperty(propName);
    if (!prop) console.error('Could not find property for path', path, node);
    return prop
  }
}

function _disabled (commands) {
  return commands.reduce((m, c) => {
    m[c.getName()] = DISABLED;
    return m
  }, {})
}

const EMPTY_SET = new Set();

function _disabledIfDisallowedTargetType (commands, targetTypes, params, context) {
  targetTypes = targetTypes || EMPTY_SET;
  return commands.reduce((m, cmd) => {
    const type = cmd.getType();
    const name = cmd.getName();
    if (targetTypes.has(type)) {
      m[name] = cmd.getCommandState(params, context);
    } else {
      m[name] = DISABLED;
    }
    return m
  }, {})
}

function _getCommandStates (commands, params, context) {
  return commands.reduce((m, command) => {
    m[command.getName()] = command.getCommandState(params, context);
    return m
  }, {})
}

/**
 * Represents an editor for content rendered in a flow, such as a manuscript.
 *
 * @prop {String} name unique editor name
 * @prop {String} containerPath container id
 *
 * @example
 *
 * Create a full-fledged `ContainerEditor` for the `body` container of a document.
 * Allow Strong and Emphasis annotations and to switch text types between paragraph
 * and heading at level 1.
 *
 * ```js
 * $$(ContainerEditor, {
 *   name: 'bodyEditor',
 *   containerPath: ['body', 'nodes']
 * })
 * ```
 */
class ContainerEditor extends Surface {
  constructor (parent, props, el) {
    // TODO consolidate this - how is it used actually?
    props.containerPath = props.containerPath || props.node.getContentPath();
    props.name = props.name || props.containerPath.join('.') || props.node.id;

    super(parent, props, el);
  }

  _initialize () {
    super._initialize();

    this.containerPath = this.props.containerPath;
    if (!isArray(this.containerPath)) {
      throw new Error("Property 'containerPath' is mandatory.")
    }

    this._deriveInternalState(this.props);
  }

  // Note: this component is self managed
  shouldRerender (newProps) {
    if (newProps.disabled !== this.props.disabled) return true
    // TODO: we should still detect when the document has changed,
    // see https://github.com/substance/substance/issues/543
    return false
  }

  willReceiveProps (newProps) {
    super.willReceiveProps.apply(this, arguments);
    this._deriveInternalState(newProps);
  }

  didMount () {
    super.didMount();

    const editorState = this.context.editorSession.getEditorState();
    editorState.addObserver(['selection'], this._onSelectionChanged, this, {
      stage: 'render'
    });
    editorState.addObserver(['document'], this._onContainerChanged, this, {
      stage: 'render',
      document: {
        path: this.containerPath
      }
    });
  }

  dispose () {
    super.dispose();

    const editorState = this.context.editorSession.getEditorState();
    editorState.removeObserver(this);
  }

  render ($$) {
    const el = super.render($$);

    const doc = this.getDocument();
    const containerPath = this.getContainerPath();
    el.attr('data-id', containerPath.join('.'));

    // native spellcheck
    el.attr('spellcheck', this.props.spellcheck === 'native');

    const ids = doc.get(containerPath);
    el.append(
      ids.map((id, index) => {
        return this._renderNode($$, doc.get(id), index)
      })
    );

    // No editing if disabled by user or container is empty
    if (!this.props.disabled && !this.isEmpty()) {
      el.addClass('sm-enabled');
      el.setAttribute('contenteditable', true);
    }

    if (this.isEditable()) {
      el.addClass('sm-editable');
    } else {
      el.addClass('sm-readonly');
      // HACK: removing contenteditable if not editable
      // TODO: we should fix substance.TextPropertyEditor to be consistent with props used in substance.Surface
      el.setAttribute('contenteditable', false);
    }

    return el
  }

  _getClassNames () {
    return 'sc-container-editor sc-surface'
  }

  selectFirst () {
    const doc = this.getDocument();
    const containerPath = this.getContainerPath();
    const nodeIds = doc.get();
    if (nodeIds.length > 0) {
      const editorSession = this.getEditorSession();
      const first = doc.get(nodeIds[0]);
      setCursor(editorSession, first, containerPath, 'before');
    }
  }

  _renderNode ($$, node, nodeIndex) {
    if (!node) throw new Error('Illegal argument')
    const ComponentClass = this._getNodeComponentClass(node);
    const props = this._getNodeProps(node);
    return $$(ComponentClass, props).ref(node.id)
  }

  _getNodeComponentClass (node) {
    const ComponentClass = this.getComponent(node.type, 'not-strict');
    if (ComponentClass) {
      // text components are used directly
      if (node.isText() || this.props.disabled) {
        return ComponentClass
      // other components are wrapped into an IsolatedNodeComponent
      // except the component is itself a customized IsolatedNodeComponent
      } else if (ComponentClass.prototype._isCustomNodeComponent || ComponentClass.prototype._isIsolatedNodeComponent) {
        return ComponentClass
      } else {
        return this.getComponent('isolated-node')
      }
    } else {
      // for text nodes without an component registered explicitly
      // we use the default text component
      if (node.isText()) {
        return this.getComponent('text-node')
      // otherwise component for unsupported nodes
      } else {
        return this.getComponent('unsupported-node')
      }
    }
  }

  _deriveInternalState (props) {
    const _state = this._state;
    if (!_isDefined(props.enabled) || props.enabled) {
      _state.enabled = true;
    } else {
      _state.enabled = false;
    }
  }

  _selectNextIsolatedNode (direction) {
    const selState = this.getEditorSession().getSelectionState();
    const node = (direction === 'left') ? selState.previousNode : selState.nextNode;
    const isIsolatedNode = !node.isText() && !node.isList();
    if (!node || !isIsolatedNode) return false
    if (
      (direction === 'left' && selState.isFirst) ||
      (direction === 'right' && selState.isLast)
    ) {
      this.getEditorSession().setSelection({
        type: 'node',
        nodeId: node.id,
        containerPath: this.getContainerPath(),
        surfaceId: this.id
      });
      return true
    }
    return false
  }

  _softBreak () {
    const editorSession = this.getEditorSession();
    const sel = editorSession.getSelection();
    if (sel.isPropertySelection()) {
      editorSession.transaction(tx => {
        tx.insertText('\n');
      }, { action: 'soft-break' });
    } else {
      editorSession.transaction((tx) => {
        tx.break();
      }, { action: 'break' });
    }
  }

  _handleEnterKey (event) {
    // for SHIFT-ENTER a line break is inserted (<break> if allowed, or \n alternatively)
    if (event.shiftKey) {
      event.preventDefault();
      event.stopPropagation();
      this._softBreak();
    } else {
      super._handleEnterKey(event);
    }
  }

  _handleLeftOrRightArrowKey (event) {
    event.stopPropagation();
    const doc = this.getDocument();
    const sel = this.getEditorSession().getSelection();
    const left = (event.keyCode === keys$1.LEFT);
    const right = !left;
    const direction = left ? 'left' : 'right';

    if (sel && !sel.isNull()) {
      const containerPath = sel.containerPath;
      // Don't react if we are at the boundary of the document
      if (sel.isNodeSelection()) {
        const nodeIds = doc.get(containerPath);
        const nodePos = getContainerPosition(doc, containerPath, sel.getNodeId());
        if ((left && nodePos === 0) || (right && nodePos === nodeIds.length - 1)) {
          event.preventDefault();
          return
        }
      }
      if (sel.isNodeSelection() && !event.shiftKey) {
        this.domSelection.collapse(direction);
      }
    }

    this._delayed(() => {
      this._updateModelSelection({ direction });
    });
  }

  _handleUpOrDownArrowKey (event) {
    event.stopPropagation();
    const doc = this.getDocument();
    const sel = this.getEditorSession().getSelection();
    const up = (event.keyCode === keys$1.UP);
    const down = !up;
    const direction = up ? 'left' : 'right';

    if (sel && !sel.isNull()) {
      const containerPath = sel.containerPath;
      // Don't react if we are at the boundary of the document
      if (sel.isNodeSelection()) {
        const nodeIds = doc.get(containerPath);
        const nodePos = getContainerPosition(doc, containerPath, sel.getNodeId());
        if ((up && nodePos === 0) || (down && nodePos === nodeIds.length - 1)) {
          event.preventDefault();
          return
        }
        // Unfortunately we need to navigate out of an isolated node
        // manually, as even Chrome on Win is not able to do it.
        const editorSession = this.getEditorSession();
        // TODO the following fixes the mentioned problem for
        // regular UP/DOWN (non expanding)
        // For SHIFT+DOWN it happens to work, and only SHIFT-UP when started as NodeSelection needs to be fixed
        if (!event.shiftKey) {
          event.preventDefault();
          if (up) {
            const prev = doc.get(nodeIds[nodePos - 1]);
            setCursor(editorSession, prev, containerPath, 'after');
            return
          } else {
            const next = doc.get(nodeIds[nodePos + 1]);
            setCursor(editorSession, next, containerPath, 'before');
            return
          }
        }
      }
    }

    this._delayed(() => {
      this._updateModelSelection({ direction });
    });
  }

  _handleTabKey (event) {
    const editorSession = this.getEditorSession();
    const sel = editorSession.getSelection();
    // EXPERIMENTAL: using TAB to enter an isolated node
    if (sel.isNodeSelection() && sel.isFull()) {
      const comp = this.refs[sel.getNodeId()];
      if (comp && stepIntoIsolatedNode(editorSession, comp)) {
        event.preventDefault();
        event.stopPropagation();
        return
      }
    }
    super._handleTabKey(event);
  }

  __handleTab (e) {
    e.preventDefault();
    if (e.shiftKey) {
      this.getEditorSession().transaction((tx) => {
        tx.dedent();
      }, { action: 'dedent' });
    } else {
      this.getEditorSession().transaction((tx) => {
        tx.indent();
      }, { action: 'indent' });
    }
  }

  // Used by Clipboard
  isContainerEditor () {
    return true
  }

  /**
    Returns the containerPath the editor is bound to
  */
  getContainerPath () {
    return this.containerPath
  }

  isEmpty () {
    const ids = this.getDocument().get(this.containerPath);
    return (!ids || ids.length === 0)
  }

  isEditable () {
    return super.isEditable.call(this) && !this.isEmpty()
  }

  // called by flow when subscribed resources have been updated
  _onContainerChanged (change) {
    const doc = this.getDocument();
    // first update the container
    const renderContext = RenderingEngine.createContext(this);
    const $$ = renderContext.$$;
    const containerPath = this.getContainerPath();
    for (const op of change.primitiveOps) {
      if (isArrayEqual(op.path, containerPath)) {
        if (op.type === 'update') {
          const diff = op.diff;
          if (diff.type === 'insert') {
            const nodeId = diff.getValue();
            const node = doc.get(nodeId);
            let nodeEl;
            if (node) {
              nodeEl = this._renderNode($$, node);
            } else {
              // node does not exist anymore
              // so we insert a stub element, so that the number of child
              // elements is consistent
              nodeEl = $$('div');
            }
            this.insertAt(diff.getOffset(), nodeEl);
          } else if (diff.type === 'delete') {
            this.removeAt(diff.getOffset());
          }
        } else {
          this.empty();
          this.rerender();
        }
      }
    }
  }

  get _isContainerEditor () { return true }
}

class FontAwesomeIcon extends Component {
  render ($$) {
    if (this.props.stack) {
      return $$('span').addClass('fa-stack')
        .append(this.props.stack.map(faClass => {
          return $$('i').addClass('fa ' + faClass + ' fa-stack')
        }))
    } else {
      return $$('i').addClass('fa ' + this.props.icon)
    }
  }
}

class DefaultIconProvider {
  constructor (config) {
    this.config = config;
  }

  renderIcon (name) {
    const spec = this._getIconDef(name);
    if (!spec) {
      return $$('span')
    } else {
      if (spec.fontawesome) {
        return $$(FontAwesomeIcon, { icon: spec.fontawesome })
      } else {
        throw new Error('Unsupported icon spec')
      }
    }
  }

  _getIconDef (name) {
    return this.config._iconRegistry.get(name)
  }
}

/*
  Default label provider implementation
*/
class DefaultLabelProvider {
  constructor (labels, lang) {
    this.lang = lang || 'en';
    this.labels = labels;
  }

  getLabel (name, params) {
    const labels = this.labels[this.lang];
    if (!labels) return name
    const rawLabel = labels[name] || name;
    // If context is provided, resolve templates
    if (params) {
      return this._evalTemplate(rawLabel, params)
    } else {
      return rawLabel
    }
  }

  setLanguage (lang) {
    this.lang = lang || 'en';
  }

  _evalTemplate (label, params) {
    const vars = this._extractVariables(label);
    vars.forEach((varName) => {
      const searchExp = new RegExp(`\\\${${varName}}`, 'g');
      const replaceStr = params[varName];
      label = label.replace(searchExp, replaceStr);
    });
    return label
  }

  _extractVariables (rawLabel) {
    const qualityRegex = /\${(\w+)}/g;
    let matches;
    const vars = [];
    while (matches = qualityRegex.exec(rawLabel)) { // eslint-disable-line
      vars.push(matches[1]);
    }
    return vars
  }
}

class SwitchTextTypeCommand extends Command {
  constructor (config) {
    super(config);
    if (!config.spec) {
      throw new Error("'config.spec' is mandatory")
    }
    if (!config.spec.type) {
      throw new Error("'config.spec.type' is mandatory")
    }
  }

  getType () {
    return this.config.spec.type
  }

  getCommandState (params) {
    const editorSession = params.editorSession;
    const doc = editorSession.getDocument();
    const sel = params.selection;
    const isBlurred = editorSession.isBlurred();
    const commandState = {
      disabled: false
    };
    if (sel.isPropertySelection() && !isBlurred) {
      const path = sel.getPath();
      const node = doc.get(path[0]);
      if (node && node.isText()) {
        commandState.active = isMatch(node, this.config.spec);
      } else {
        commandState.disabled = true;
      }
    } else {
      // TODO: Allow Container Selections too, to switch multiple paragraphs
      commandState.disabled = true;
    }
    return commandState
  }

  /**
    Perform a switchTextType transformation based on the current selection
  */
  execute (params) {
    const editorSession = params.editorSession;
    editorSession.transaction((tx) => {
      return tx.switchTextType(this.config.spec)
    });
  }

  isSwitchTypeCommand () {
    return true
  }
}

class Configurator {
  constructor (parent, name) {
    this.parent = parent;
    this.name = name;

    this._subConfigurations = new Map();
    this._values = new Map();
    this._commands = new Map();
    this._commandGroups = new Map();
    this._components = new Map();
    this._converters = new Map();
    this._documentLoaders = new Map();
    this._documentSerializers = new Map();
    this._dropHandlers = [];
    this._exporters = new Map();
    this._icons = new Map();
    this._importers = new Map();
    this._keyboardShortcuts = [];
    this._keyboardShortcutsByCommandName = new Map();
    this._labels = new Map();
    this._nodes = new Map();
    this._toolPanels = new Map();
    this._services = new Map();

    // hierarchical registries
    this._valuesRegistry = new HierarchicalRegistry(this, c => c._values);
    this._commandRegistry = new HierarchicalRegistry(this, c => c._commands);
    this._componentRegistry = new HierarchicalRegistry(this, c => c._components);
    this._iconRegistry = new HierarchicalRegistry(this, c => c._icons);
    this._labelRegistry = new HierarchicalRegistry(this, c => c._labels);
    this._serviceRegistry = new HierarchicalRegistry(this, c => c._services);
    this._toolPanelRegistry = new HierarchicalRegistry(this, c => c._toolPanels);
    this._keyboardShortcutsByCommandNameRegistry = new HierarchicalRegistry(this, c => c._keyboardShortcutsByCommandName);
    this._commandGroupRegistry = new HierarchicalRegistry(this, c => c._commandGroups);
  }

  import (pkg, options) {
    pkg.configure(this, options || {});
    return this
  }

  createSubConfiguration (name, options = {}) {
    const ConfiguratorClass = options.ConfiguratorClass || this.constructor;
    const subConfig = new ConfiguratorClass(this, name);
    this._subConfigurations.set(name, subConfig);
    return subConfig
  }

  getConfiguration (path) {
    // TODO: implement this in a strict way
    if (isString(path)) {
      path = path.split('.');
    }
    const subConfig = this._subConfigurations.get(path[0]);
    if (path.length === 1) {
      return subConfig
    } else {
      if (subConfig) {
        return subConfig.getConfiguration(path.slice(1))
      }
    }
  }

  getValue (key) {
    return this._valuesRegistry.get(key)
  }

  setValue (key, value) {
    this._values.set(key, value);
  }

  addCommand (name, CommandClass, options = {}) {
    if (this._commands.has(name) && !options.force) throw new Error(`Command with name '${name}' already registered`)
    this._commands.set(name, new CommandClass(Object.assign({ name }, options)));
    if (options.commandGroup) {
      this._addCommandToCommandGroup(name, options.commandGroup);
    }
    if (options.accelerator) {
      this.addKeyboardShortcut(options.accelerator, { command: name });
    }
  }

  addComponent (name, ComponentClass, options = {}) {
    if (this._components.has(name) && !options.force) throw new Error(`Component with name '${name}' already registered`)
    this._components.set(name, ComponentClass);
  }

  addConverter (format, converter) {
    let converters = this._converters.get(format);
    if (!converters) {
      converters = new Map();
      this._converters.set(format, converters);
    }
    if (isFunction(converter)) {
      const ConverterClass = converter;
      converter = new ConverterClass();
    }
    if (!converter.type) {
      throw new Error('A converter needs an associated type.')
    }
    converters.set(converter.type, converter);
  }

  addDropHandler (dropHandler) {
    this._dropHandlers.push(dropHandler);
  }

  addExporter (format, ExporterClass, spec = {}) {
    if (this._exporters.has(format)) throw new Error(`Exporter already registered for '${format}'`)
    this._exporters.set(format, {
      ExporterClass,
      spec
    });
  }

  addIcon (iconName, spec, options = {}) {
    if (!this._icons.has(iconName)) {
      this._icons.set(iconName, {});
    }
    const iconConfig = this._icons.get(iconName);
    for (const type of Object.keys(spec)) {
      if (iconConfig[type]) {
        if (!options.force) {
          throw new Error(`Icon already specified: ${iconName}:${type}`)
        }
      }
      iconConfig[type] = spec[type];
    }
  }

  addImporter (format, ImporterClass, spec = {}) {
    if (this._importers.has(format)) throw new Error(`Importer already registered for '${format}'`)
    this._importers.set(format, {
      ImporterClass,
      spec
    });
  }

  addLabel (labelName, label, options = {}) {
    if (this._labels.has(labelName) && !options.force) throw new Error(`Label with name '${labelName}' already registered.`)
    let labels;
    if (isString(label)) {
      labels = { en: label };
    } else {
      labels = label;
    }
    this._labels.set(labelName, labels);
  }

  addNode (NodeClass, options = {}) {
    const type = NodeClass.type;
    if (this._nodes.has(type) && !options.force) {
      throw new Error(`Node class for type '${type}' already registered`)
    }
    this._nodes.set(type, NodeClass);
  }

  addKeyboardShortcut (combo, spec) {
    let label = combo.toUpperCase();
    if (platform.isMac) {
      label = label.replace(/CommandOrControl/i, '⌘');
      label = label.replace(/Ctrl/i, '^');
      label = label.replace(/Shift/i, '⇧');
      label = label.replace(/Enter/i, '↵');
      label = label.replace(/Alt/i, '⌥');
      label = label.replace(/\+/g, '');
    } else {
      label = label.replace(/CommandOrControl/i, 'Ctrl');
    }
    const entry = {
      key: combo,
      label,
      spec
    };
    this._keyboardShortcuts.push(entry);
    if (spec.command) {
      this._keyboardShortcutsByCommandName.set(spec.command, entry);
    }
  }

  // TODO: this should be a helper, if necessary at all
  addTextTypeTool (spec) {
    this.addCommand(spec.name, SwitchTextTypeCommand, {
      spec: spec.nodeSpec,
      commandGroup: 'text-types'
    });
    this.addIcon(spec.name, { fontawesome: spec.icon });
    this.addLabel(spec.name, spec.label);
    if (spec.accelerator) {
      this.addKeyboardShortcut(spec.accelerator, { command: spec.name });
    }
  }

  addToolPanel (name, spec, options = {}) {
    if (this._toolPanels.has(name) && !options.force) {
      throw new Error(`ToolPanel '${name}' is already defined`)
    }
    this._toolPanels.set(name, spec);
  }

  // EXPERIMENTAL: for now we just use a callback as it is the most flexible
  // but on the long run I think it would better to restrict this by introducing a DSL
  extendToolPanel (name, extensionCb) {
    extensionCb(this._toolPanels.get(name));
  }

  addService (serviceId, factory, options = {}) {
    if (this._services.has(serviceId) && !options.force) {
      throw new Error(`Service '${serviceId}' is already defined`)
    }
    this._services.set(serviceId, {
      factory,
      instance: null
    });
  }

  getService (serviceId, context) {
    const entry = this._serviceRegistry.get(serviceId);
    if (entry) {
      if (entry.instance) {
        return Promise.resolve(entry.instance)
      } else {
        const res = entry.factory(context);
        if (res instanceof Promise) {
          return res.then(service => {
            entry.instance = service;
            return service
          })
        } else {
          entry.instance = res;
          return Promise.resolve(res)
        }
      }
    } else {
      return Promise.reject(new Error(`Unknown service: ${serviceId}`))
    }
  }

  getServiceSync (serviceId, context) {
    const entry = this._serviceRegistry.get(serviceId);
    if (entry) {
      if (entry && entry.instance) {
        return entry.instance
      } else {
        const service = entry.factory(context);
        entry.instance = service;
        return service
      }
    }
  }

  registerDocumentLoader (docType, LoaderClass, spec = {}, options = {}) {
    if (this._documentLoaders.has(docType) && !options.force) {
      throw new Error(`Loader for docType '${docType}' is already defined`)
    }
    this._documentLoaders.set(docType, {
      LoaderClass,
      spec
    });
  }

  registerDocumentSerializer (docType, SerializerClass, spec = {}, options = {}) {
    if (this._documentSerializers.has(docType) && !options.force) {
      throw new Error(`Serializer for docType '${docType}' is already defined`)
    }
    this._documentSerializers.set(docType, {
      SerializerClass,
      spec
    });
  }

  getCommands (options = {}) {
    if (options.inherit) {
      return this._commandRegistry.getAll()
    } else {
      return this._commands
    }
  }

  getCommandGroup (name) {
    // Note: as commands are registered hierarchically
    // we need to collect commands from all levels
    const records = this._commandGroupRegistry.getRecords(name);
    const flattened = flatten(records);
    const set = new Set(flattened);
    return Array.from(set)
  }

  getComponent (name) {
    return this.getComponentRegistry().get(name, 'strict')
  }

  getComponentRegistry () {
    return this._componentRegistry
  }

  getConverters (type) {
    if (this._converters.has(type)) {
      return Array.from(this._converters.get(type).values())
    } else {
      return []
    }
  }

  getDocumentLoader (type) {
    if (this._documentLoaders.has(type)) {
      const { LoaderClass, spec } = this._documentLoaders.get(type);
      return new LoaderClass(spec)
    }
  }

  getDocumentSerializer (type) {
    if (this._documentSerializers.has(type)) {
      const { SerializerClass, spec } = this._documentSerializers.get(type);
      return new SerializerClass(spec)
    }
  }

  getIconProvider () {
    return new DefaultIconProvider(this)
  }

  // TODO: the label provider should not be maintained by the configuration
  // instead by the app, because language should be part of the app state
  getLabelProvider () {
    return new LabelProvider(this)
  }

  createImporter (type, doc, options = {}) {
    if (this._importers.has(type)) {
      const { ImporterClass, spec } = this._importers.get(type);
      let converters = [];
      if (spec.converterGroups) {
        for (const key of spec.converterGroups) {
          converters = converters.concat(this.getConverters(key));
        }
      } else {
        converters = this.getConverters(type);
      }
      return new ImporterClass({ converters }, doc, options, this)
    } else if (this.parent) {
      return this.parent.createImporter(type, doc, options)
    }
  }

  createExporter (type, doc, options = {}) {
    if (this._exporters.has(type)) {
      const { ExporterClass, spec } = this._exporters.get(type);
      let converters = [];
      if (spec.converterGroups) {
        for (const key of spec.converterGroups) {
          converters = converters.concat(this.getConverters(key));
        }
      } else {
        converters = this.getConverters(type);
      }
      return new ExporterClass({ converters }, doc, options, this)
    } else if (this.parent) {
      return this.parent.createExporter(type, doc, options)
    }
  }

  getKeyboardShortcuts (options = {}) {
    if (options.inherit) {
      return Array.from(this._keyboardShortcutsByCommandNameRegistry.getAll().values())
    } else {
      return this._keyboardShortcuts
    }
  }

  /*
    Allows lookup of a keyboard shortcut by command name
  */
  getKeyboardShortcutsByCommandName (commandName) {
    return this._keyboardShortcutsByCommandNameRegistry.get(commandName)
  }

  getNodes () {
    return this._nodes
  }

  getToolPanel (name, strict) {
    const toolPanelSpec = this._toolPanelRegistry.get(name);
    if (toolPanelSpec) {
      return toolPanelSpec
    } else if (strict) {
      throw new Error(`No toolpanel configured with name ${name}`)
    }
  }

  _addCommandToCommandGroup (commandName, commandGroupName) {
    if (!this._commandGroups.has(commandGroupName)) {
      this._commandGroups.set(commandGroupName, []);
    }
    const commands = this._commandGroups.get(commandGroupName);
    commands.push(commandName);
  }
}

class HierarchicalRegistry {
  constructor (config, getter) {
    this._config = config;
    this._getter = getter;
  }

  get (name, strict) {
    let config = this._config;
    const getter = this._getter;
    while (config) {
      const registry = getter(config);
      if (registry.has(name)) {
        return registry.get(name)
      } else {
        config = config.parent;
      }
    }
    if (strict) throw new Error(`No value registered for name '${name}'`)
  }

  getAll () {
    let config = this._config;
    const registries = [];
    const getter = this._getter;
    while (config) {
      const registry = getter(config);
      if (registry) {
        registries.unshift(registry);
      }
      config = config.parent;
    }
    return new Map([].concat(...registries.map(r => Array.from(r.entries()))))
  }

  getRecords (name) {
    let config = this._config;
    const records = [];
    const getter = this._getter;
    while (config) {
      const registry = getter(config);
      if (registry) {
        const record = registry.get(name);
        if (record) {
          records.unshift(record);
        }
      }
      config = config.parent;
    }
    return records
  }
}

class LabelProvider extends DefaultLabelProvider {
  constructor (config) {
    super();
    this.config = config;
  }

  getLabel (name, params) {
    const lang = this.lang;
    const spec = this.config._labelRegistry.get(name);
    if (!spec) return name
    const rawLabel = spec[lang] || name;
    // If context is provided, resolve templates
    if (params) {
      return this._evalTemplate(rawLabel, params)
    } else {
      return rawLabel
    }
  }
}

function createComponentContext (config) {
  return {
    componentRegistry: config.getComponentRegistry(),
    labelProvider: config.getLabelProvider(),
    iconProvider: config.getIconProvider()
  }
}

function createEditorContext (config, editorSession) {
  return Object.assign(createComponentContext(config), {
    config,
    editorSession: editorSession,
    editorState: editorSession.getEditorState(),
    surfaceManager: editorSession.surfaceManager,
    markersManager: editorSession.markersManager,
    keyboardManager: editorSession.keyboardManager,
    findAndReplaceManager: editorSession.findAndReplaceManager
  })
}

class SurfaceManager {
  constructor (editorState) {
    this.editorState = editorState;
    this.surfaces = new Map();

    editorState.addObserver(['selection', 'document'], this._onSelectionOrDocumentChange, this, { stage: 'pre-position' });
    // editorState.addObserver(['selection', 'document'], this._scrollSelectionIntoView, this, { stage: 'finalize' })
  }

  dispose () {
    this.editorState.off(this);
  }

  getSurface (name) {
    if (name) {
      return this.surfaces.get(name)
    }
  }

  getFocusedSurface () {
    console.error("DEPRECATED: use 'context.editorState.focusedSurface instead");
    return this.editorState.focusedSurface
  }

  registerSurface (surface) {
    const id = surface.getId();
    if (this.surfaces.has(id)) {
      throw new Error(`A surface with id ${id} has already been registered.`)
    }
    this.surfaces.set(id, surface);
  }

  unregisterSurface (surface) {
    const id = surface.getId();
    const registeredSurface = this.surfaces.get(id);
    if (registeredSurface === surface) {
      this.surfaces.delete(id);
    }
  }

  // TODO: would be good to have an index of surfaces by path
  _getSurfaceForProperty (path) {
    // first try the canonical one
    const canonicalId = getKeyForPath(path);
    if (this.surfaces.has(canonicalId)) {
      return this.surfaces.get(canonicalId)
    }
    for (const surface of this.surfaces.values()) {
      let surfacePath = null;
      if (surface._isContainerEditor) {
        surfacePath = surface.getContainerPath();
      } else if (surface.getPath) {
        surfacePath = surface.getPath();
      }
      if (surfacePath && isArrayEqual(path, surfacePath)) {
        return surface
      }
    }
  }

  _onSelectionOrDocumentChange () {
    // console.log('SurfaceManager._onSelectionChange()')

    // Reducing state.focusedSurface (only if selection has changed)
    if (this.editorState.isDirty('selection')) {
      const selection = this.editorState.selection;
      if (!selection || selection.isNull()) {
        // blur the focused surface to make sure that it does not remain focused
        // e.g. if DOM selection is not set for some reasons.
        // HACK: not all surfaces implement _blur()
        const focusedSurface = this.editorState.focusedSurface;
        if (focusedSurface && focusedSurface._blur) {
          focusedSurface._blur();
        }
      }
      // update state.focusedSurface
      this._reduceFocusedSurface(selection);
      // HACK: removing DOM selection *and* blurring when having a CustomSelection
      // otherwise we will receive events on the wrong surface
      // instead of bubbling up to GlobalEventManager
      if (selection && selection.isCustomSelection() && platform.inBrowser) {
        window.getSelection().removeAllRanges();
        const activeElement = window.document.activeElement;
        if (activeElement) {
          activeElement.blur();
        }
      }
    }

    // TODO: this still needs to be improved. The DOM selection can be affected by other updates than document changes
    this._recoverDOMSelection();
  }

  _reduceFocusedSurface (sel) {
    const editorState = this.editorState;
    let surface = null;
    if (sel && sel.surfaceId) {
      surface = this.surfaces.get(sel.surfaceId);
    }
    editorState.focusedSurface = surface;
  }

  /*
    At the end of the update flow, make sure the surface is focused
    and displays the right DOM selection
  */
  _recoverDOMSelection () {
    // console.log('SurfaceManager._recoverDOMSelection()')
    const editorState = this.editorState;
    // do not rerender the selection if the editorSession has
    // been blurred, e.g., while some component, such as Find-And-Replace
    // dialog has the focus
    if (editorState.isBlurred) return
    const focusedSurface = editorState.focusedSurface;
    // console.log('focusedSurface', focusedSurface)
    if (focusedSurface && !focusedSurface.isDisabled()) {
      // console.log('Rendering selection on surface', focusedSurface.getId(), this.editorState.selection.toString())
      focusedSurface._focus();
      focusedSurface.rerenderDOMSelection();
    }
  }

  _scrollSelectionIntoView () {
    const editorState = this.editorState;
    const focusedSurface = editorState.focusedSurface;
    if (focusedSurface && !focusedSurface.isDisabled()) {
      focusedSurface.send('scrollSelectionIntoView', editorState.selection);
    }
  }
}

class MarkersManager extends EventEmitter {
  constructor (editorState) {
    super();

    this._editorState = editorState;
    this._markers = new MarkersIndex();

    editorState.addObserver(['document'], this._onDocumentChange, this, { stage: 'update' });
  }

  dispose () {
    this._editorState.removeObserver(this);
  }

  addMarker (marker) {
    const path = marker.getPath();
    this._markers.add(path, marker);
    this._setDirty(path);
  }

  removeMarker (marker) {
    const path = marker.getPath();
    this._markers.remove(path, marker);
    this._setDirty(path);
  }

  clearMarkers (path, filter) {
    this._markers.clearMarkers(path, filter);
    this._setDirty(path);
  }

  getMarkers (path) {
    return this._markers.get(path)
  }

  _getDocumentObserver () {
    return this._editorState._getDocumentObserver()
  }

  _setDirty (path) {
    this._editorState._setDirty('document');
    this._getDocumentObserver().setDirty(path);
  }

  // updating markers to reflect changes on the text they are bound to
  _onDocumentChange (change) {
    for (const op of change.primitiveOps) {
      if (op.type === 'update' && op.diff._isTextOperation) {
        const markers = this._markers.get(op.path);
        if (!markers || markers.length === 0) continue
        const diff = op.diff;
        switch (diff.type) {
          case 'insert':
            markers.forEach(m => this._transformInsert(m, diff));
            break
          case 'delete':
            markers.forEach(m => this._transformDelete(m, diff));
            break
          //
        }
      }
    }
  }

  _transformInsert (marker, op) {
    const pos = op.pos;
    const length = op.str.length;
    if (length === 0) return
    // console.log('Transforming marker after insert')
    const start = marker.start.offset;
    const end = marker.end.offset;
    let newStart = start;
    let newEnd = end;
    if (pos >= end) return
    if (pos <= start) {
      newStart += length;
      newEnd += length;
      marker.start.offset = newStart;
      marker.end.offset = newEnd;
      return
    }
    if (pos < end) {
      newEnd += length;
      marker.end.offset = newEnd;
      // NOTE: right now, any change inside a marker
      // removes the marker, as opposed to changes before
      // which shift the marker
      this._remove(marker);
    }
  }

  _transformDelete (marker, op) {
    const pos1 = op.pos;
    const length = op.str.length;
    const pos2 = pos1 + length;
    if (pos1 === pos2) return
    var start = marker.start.offset;
    var end = marker.end.offset;
    var newStart = start;
    var newEnd = end;
    if (pos2 <= start) {
      newStart -= length;
      newEnd -= length;
      marker.start.offset = newStart;
      marker.end.offset = newEnd;
    } else if (pos1 >= end) ; else {
      if (pos1 <= start) {
        newStart = start - Math.min(pos2 - pos1, start - pos1);
      }
      if (pos1 <= end) {
        newEnd = end - Math.min(pos2 - pos1, end - pos1);
      }
      // TODO: we should do something special when the change occurred inside the marker
      if (start !== end && newStart === newEnd) {
        this._remove(marker);
        return
      }
      if (start !== newStart) {
        marker.start.offset = newStart;
      }
      if (end !== newEnd) {
        marker.end.offset = newEnd;
      }
      this._remove(marker);
    }
  }

  _remove (marker) {
    this.removeMarker(marker);
  }
}

class MarkersIndex {
  add (path, val) {
    const key = getKeyForPath(path);
    if (!this[key]) {
      this[key] = [];
    }
    this[key].push(val);
  }

  remove (path, val) {
    const key = getKeyForPath(path);
    if (this[key]) {
      deleteFromArray(this[key], val);
    }
  }

  get (path) {
    const key = getKeyForPath(path);
    return this[key] || []
  }

  clearMarkers (path, filter) {
    const key = getKeyForPath(path);
    const arr = this[key];
    if (arr) {
      for (let i = arr.length - 1; i >= 0; i--) {
        if (filter(arr[i])) {
          arr.splice(i, 1);
        }
      }
    }
  }
}

class KeyboardManager extends AbstractKeyboardManager {
  constructor (bindings, commandCallback, contextProvider) {
    super();

    this.contextProvider = contextProvider;
    this.bindings = {};

    bindings.forEach(({ key, spec }) => {
      if (!spec.command) throw new Error("'spec.command' is required")
      const hook = () => {
        return commandCallback(spec.command)
      };
      const type = spec.type || 'keydown';
      if (type !== 'textinput') {
        key = parseKeyEvent(parseKeyCombo(key));
      }
      // initializing on-the-fly
      if (!this.bindings[type]) { this.bindings[type] = {}; }
      if (!this.bindings[type][key]) { this.bindings[type][key] = []; }
      this.bindings[type][key].push(hook);
    });
  }

  _getBindings (type, key) {
    const bindingsByType = this.bindings[type];
    if (bindingsByType) {
      return bindingsByType[key]
    }
  }

  _getContext () {
    return this.contextProvider.context
  }
}

const UPDATE_DELAY = 200;

class FindAndReplaceManager {
  constructor (editorSession) {
    this._editorSession = editorSession;
    this._doc = editorSession.getDocument();
    this._dirty = new Set();

    // Note: this is debounced to avoid slow down while typing by running searches too eagerly
    // Only for testing search updates are done synchronously
    this._updateSearchDebounced = debounce(this._updateSearch.bind(this, true), UPDATE_DELAY);

    const editorState = this._editorSession.getEditorState();
    // during update stage we watch for changes on properties with matches
    // to keep the internal state up2date
    editorState.addObserver(['document'], this._onUpdate, this, { stage: 'update' });
    // HACK: without this we see strange errors. As a temporary fix leave it here
    // but should try tor find the source of the problem ASAP
    editorState.addObserver(['document'], this._onRender, this, { stage: 'render' });
  }

  dispose () {
    this._editorSession.getEditorState().removeObserver(this);
  }

  openDialog (enableReplace) {
    enableReplace = Boolean(enableReplace);
    const state = this._getState();
    if (state.enabled) {
      // update state if 'showReplace' has changed
      if (state.showReplace !== enableReplace) {
        state.showReplace = Boolean(enableReplace);
        this._updateState(state);
      }
    } else {
      state.enabled = true;
      state.showReplace = Boolean(enableReplace);
      // resetting dirty flags as we do a full search initially
      this._dirty = new Set();
      this._performSearch();
    }
    this._propgateUpdates();
  }

  closeDialog () {
    const state = this._getState();
    if (!state.enabled) return
    state.enabled = false;
    this._clearHighlights();
    // Note: recovering the selection here
    this._updateState(state, 'recoverSelection');
    this._propgateUpdates();
  }

  next () {
    this._next();
    this._propgateUpdates();
  }

  previous () {
    const state = this._getState();
    this._nav('back');
    this._updateState(state);
    this._propgateUpdates();
  }

  setSearchPattern (pattern) {
    const state = this._getState();
    if (state.pattern !== pattern) {
      state.pattern = pattern;
      this._performSearch();
      this._propgateUpdates();
    }
  }

  setReplacePattern (replacePattern) {
    const state = this._getState();
    if (state.replacePattern !== replacePattern) {
      state.replacePattern = replacePattern;
      this._updateState(state);
      this._propgateUpdates();
    }
  }

  replaceNext () {
    const state = this._getState();
    // ATTENTION: special handling after manual changes, while search dialog is open
    // in this case we do a forced 'next()' when using 'replaceNext()'
    if (state._forceNav) {
      state._forceNav = false;
      this._next();
      return
    }
    if (state.replacePattern) {
      let hasReplaced = false;
      if (state.cursor >= 0) {
        const m = this._getMatchAt(state.cursor);
        if (m) {
          this._editorSession.transaction(tx => {
            this._replace(tx, m, state);
          }, { action: 'replace' });
          // ATTENTION: we are not changing the search result on changes with action type: 'replace'
          // Instead we are doing it here manually:
          // updating the result for the current text property
          // and propagating changes so that so that text properties are updated
          this._updateSearchForProperty(getKeyForPath(m.path));
          this._editorSession.getEditorState().propagateUpdates();
          // set the cursor back and scroll to the next
          state.cursor--;
          this._nav('forward');
          this._updateState(state);
          hasReplaced = true;
        }
      }
      if (!hasReplaced) {
        // otherwise seek to the next match position first
        this._next();
      }
      this._propgateUpdates();
    }
  }

  replaceAll () {
    const state = this._getState();
    if (!state.matches) return
    let allMatches = [];
    state.matches.forEach(_matches => {
      allMatches = allMatches.concat(_matches);
    });
    this._editorSession.transaction(tx => {
      for (let idx = allMatches.length - 1; idx >= 0; idx--) {
        this._replace(tx, allMatches[idx], state);
      }
    }, { action: 'replace-all' });
    state.matches = new Map();
    state.count = 0;
    state.cursor = -1;
    this._updateState(state);
    this._propgateUpdates();
  }

  toggleCaseSensitivity () {
    this._toggleOption('caseSensitive');
    this._propgateUpdates();
  }

  toggleRegexSearch () {
    this._toggleOption('regexSearch');
    this._propgateUpdates();
  }

  toggleFullWordSearch () {
    this._toggleOption('fullWord');
    this._propgateUpdates();
  }

  _getMarkersManager () {
    return this._editorSession.markersManager
  }

  _getState () {
    const editorState = this._editorSession.getEditorState();
    return editorState.findAndReplace || FindAndReplaceManager.defaultState()
  }

  _toggleOption (optionName) {
    const state = this._getState();
    state[optionName] = !state[optionName];
    this._performSearch();
  }

  _performSearch () {
    const state = this._getState();
    if (state.pattern) {
      this._searchAndHighlight();
    } else {
      this._clear();
    }
    state.cursor = -1;
    this._updateState(state);
    // ATTENTION: scrolling to the first match (if available)
    // this needs to be done after rolling out the state update
    // so that the markers have been rendered already
    if (state.count > 0) {
      this._next();
    }
  }

  _next () {
    const state = this._getState();
    this._nav('forward');
    this._updateState(state);
  }

  _updateState (state, recoverSelection) {
    const editorState = this._editorSession.getEditorState();
    // HACK: touching editorState.selection because we want that the applications recovers the selection
    if (recoverSelection) {
      editorState._setDirty('selection');
    }
    // console.log('Updating editorState.findAndReplace', state)
    editorState.findAndReplace = state;
  }

  _propgateUpdates () {
    const editorState = this._editorSession.getEditorState();
    // TODO: we need to figure out if this is a problem
    // only in tests this is called synchronously
    // leading to extra updates e.g. when the content is changed while
    // the FNR dialog is open
    if (!editorState._isUpdating()) {
      editorState.propagateUpdates();
    }
  }

  _searchAndHighlight () {
    // re-start the search
    this._clearHighlights();
    this._search();
    this._addHighlights();
    this._propgateUpdates();
  }

  _search () {
    const state = this._getState();
    const matches = new Map();
    let count = 0;
    const pattern = state.pattern;
    const opts = state;
    if (pattern) {
      const tps = this._getTextProperties();
      for (const tp of tps) {
        // console.log('... searching for matches in ', tp.getPath())
        const _matches = this._searchInProperty(tp, pattern, opts);
        // if (_matches.length > 0) console.log('found %s matches', _matches.length)
        count += _matches.length;
        if (_matches.length > 0) {
          matches.set(getKeyForPath(tp.getPath()), _matches);
        }
      }
    }
    state.matches = matches;
    state.count = count;
  }

  _updateSearch (propagate) {
    const state = this._getState();
    if (!state.enabled || !state.pattern || this._dirty.size === 0) return

    for (const key of this._dirty) {
      // ATTENTION: this updates state.count
      this._updateSearchForProperty(key);
    }
    // HACK: need to make sure that the selection is recovered here
    this._updateState(state, 'recoverSelection');
    this._dirty = new Set();
    if (propagate) {
      this._propgateUpdates();
    }
  }

  _updateSearchForProperty (key) {
    const markersManager = this._getMarkersManager();
    const state = this._getState();
    const matches = state.matches;
    let count = state.count;
    let _matches = matches.get(key);
    if (_matches) {
      count -= _matches.length;
    }
    const path = key.split('.');
    markersManager.clearMarkers(path, m => m.type === 'find-marker');
    const tp = this._getTextProperty(key);
    if (tp) {
      _matches = this._searchInProperty(tp, state.pattern, state);
      count += _matches.length;
      matches.set(key, _matches);
      this._addHighlightsForProperty(path, _matches);
    } else {
      matches.delete(key);
    }
    state.count = count;
  }

  _searchInProperty (tp, pattern, opts) {
    const path = tp.getPath();
    return _findInText(tp.getText(), pattern, opts).map(m => {
      // add an id so that we can find it later, e.g. for scroll-to
      m.id = uuid();
      m.path = path;
      m.textProperty = tp;
      return m
    })
  }

  /*
    In case of a regexp search the replacement string allows for the following patterns
    - "$$": Inserts a "$".
    - "$&": Inserts the matched substring.
    - "$`": Inserts the portion of the string that precedes the matched substring.
    - "$'": Inserts the portion of the string that follows the matched substring.
    - "$n": Where n is a positive integer less than 100, inserts the nth parenthesized submatch string, provided the first argument was a RegExp object. Note that this is 1-indexed.
  */
  _replace (tx, m, options) {
    tx.setSelection({
      type: 'property',
      path: m.path,
      startOffset: m.start,
      endOffset: m.end
    });
    let newText;
    // TODO: we should allow to use regex in replace string too
    // for that we would take the string from the match
    // and apply native String replace to g
    if (options.regexSearch) {
      const text = getTextForSelection(tx, tx.selection);
      const findRe = new RegExp(options.pattern);
      newText = text.replace(findRe, options.replacePattern);
    } else {
      newText = options.replacePattern;
    }
    tx.insertText(newText);
  }

  _clear () {
    const state = this._getState();
    this._clearHighlights();
    state.matches = new Map();
    state.count = 0;
  }

  _clearHighlights () {
    const markersManager = this._getMarkersManager();
    const state = this._getState();
    if (state.matches) {
      state.matches.forEach((_, key) => {
        const path = key.split('.');
        markersManager.clearMarkers(path, m => m.type === 'find-marker');
      });
    }
  }

  _addHighlights () {
    const state = this._getState();
    if (state.matches) {
      state.matches.forEach((matches, key) => {
        const path = key.split('.');
        this._addHighlightsForProperty(path, matches);
      });
    }
  }

  // TODO: don't know yet how we want to update Markers incrementally
  _addHighlightsForProperty (path, matches) {
    const markersManager = this._getMarkersManager();
    matches.forEach(m => {
      markersManager.addMarker(new Marker(this._doc, {
        type: 'find-marker',
        id: m.id,
        start: {
          path,
          offset: m.start
        },
        end: {
          path,
          offset: m.end
        }
      }));
    });
  }

  _getTextProperties () {
    const rootComponent = this._editorSession.getRootComponent();
    if (rootComponent) {
      // EXPERIMENTAL: we need to retrieve all *editable* text properties in the correct order
      // which is not possible just from the model (without further knowledge)
      // However, doing it via DOM search is probably rather slow
      return rootComponent.findAll('.sc-text-property')
    } else {
      console.error('FindAndReplaceManager: no root component has been assigned yet.');
    }
  }

  _getTextProperty (id) {
    const rootComponent = this._editorSession.getRootComponent();
    if (rootComponent) {
      // EXPERIMENTAL: same as _getTextProperties()
      return rootComponent.find(`.sc-text-property[data-path="${id}"]`)
    } else {
      console.error('FindAndReplaceManager: no root component has been assigned yet.');
    }
  }

  _nav (direction) {
    const state = this._getState();
    const [cursor, match] = this._getNext(direction);
    if (match) {
      state.cursor = cursor;
      this._scrollToMatch(match);
    }
  }

  _getNext (direction) {
    // TODO: support a selection relative navigation
    // as a first iteration we will do this independently from the selection
    const state = this._getState();
    let idx;
    if (direction === 'forward') {
      idx = Math.min(state.count - 1, state.cursor + 1);
    } else {
      idx = Math.max(0, state.cursor - 1);
    }
    return [idx, this._getMatchAt(idx)]
  }

  _getMatchAt (idx) {
    // Note: because we are storing matching grouped by properties
    // this is a but nasty
    const state = this._getState();
    if (state.matches) {
      for (const [, matches] of state.matches) {
        if (idx >= matches.length) {
          idx -= matches.length;
        } else {
          return matches[idx]
        }
      }
    }
  }

  _scrollToMatch (match) {
    const state = this._getState();
    // HACKIDHACK: instead of relying on rerendering, we toggle the hightlight here
    // which is also much faster, and still pretty safe, because we throw markers on every change
    if (state.marker) state.marker.el.removeClass('sm-active');
    const tp = match.textProperty;
    const marker = tp.find(`.sm-find-marker[data-id="${match.id}"]`);
    // FIXME: when doing replace it seems that we are not good yet with navigating through the matches
    // this guard should not be necessary if everything is working
    if (marker) {
      marker.el.addClass('sm-active');
      state.marker = marker;
      tp.send('scrollElementIntoView', marker.el);
    }
  }

  _onUpdate (change) {
    // skip changes caused by replaceNext() and replaceAll()
    if (
      change.info.action === 'replace' ||
      change.info.action === 'replace-all' ||
      change.info.action === 'nop'
    ) return
    for (const op of change.primitiveOps) {
      if (op.isUpdate() && op.diff._isTextOperation) {
        this._dirty.add(getKeyForPath(op.path));
      }
    }
    const state = this._getState();
    if (!state.enabled) return

    // HACK: this is a bit hacky but should work. When the user has changed the text we leave a mark in the state
    // so that we can force a 'next()' when 'replaceNext()' is called
    state._forceNav = true;
    // Note: when running tests updating the search result synchronously
    if (platform.test) {
      this._updateSearch();
    } else {
      // otherwise this is done debounced
      this._updateSearchDebounced();
    }
  }

  _onRender (change) {
    // HACK: There seems to be a problem with registering observers in the editorState
    // without registering this hook we see strange errors at other places
    // Probably related to a bug in the observer registration/deregistration
    // during propagation of AppState changes
  }

  static defaultState () {
    return {
      enabled: false,
      pattern: '',
      showReplace: false,
      replacePattern: '',
      caseSensitive: false,
      fullWord: false,
      regexSearch: false,
      matches: null,
      count: 0,
      cursor: 0
    }
  }
}

function _createRegExForPattern (pattern) {
  return pattern.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&') // eslint-disable-line no-useless-escape
}

function _findInText (text, pattern, opts = {}) {
  if (!opts.regexSearch) {
    pattern = _createRegExForPattern(pattern);
  }
  if (opts.fullWord) {
    pattern = '\\b' + pattern + '\\b';
  }
  const matches = [];
  try {
    const matcher = new RegExp(pattern, opts.caseSensitive ? 'g' : 'gi');
    let match;
    while ((match = matcher.exec(text))) {
      matches.push({
        start: match.index,
        end: matcher.lastIndex
      });
    }
  } catch (err) {}
  return matches
}

// import { getKeyForPath } from '../util'

function EditorSessionMixin (AbstractEditorSession) {
  class BaseEditorSession extends AbstractEditorSession {
    /**
     * @param {Configurator} config
     * @param {object} options
     * @param {boolean} options.inherit true if commands and keyboard shortcuts should be inherited from parent configurations.
     */
    _setup (config, options = {}) {
      this.config = config;
      const editorState = this.editorState;

      const surfaceManager = new SurfaceManager(editorState);
      const markersManager = new MarkersManager(editorState);
      const keyboardManager = new KeyboardManager(config.getKeyboardShortcuts(options), (commandName, params) => {
        return this.executeCommand(commandName, params)
      }, this);
      const commandManager = new CommandManager(this,
        // update commands when document or selection have changed
        // TODO: is this really sufficient?
        ['document', 'selection'],
        config.getCommands(options)
      );
      const findAndReplaceManager = new FindAndReplaceManager(this);
      this.surfaceManager = surfaceManager;
      this.markersManager = markersManager;
      this.keyboardManager = keyboardManager;
      this.commandManager = commandManager;
      this.findAndReplaceManager = findAndReplaceManager;

      // has to be set before initialisation
      this.context = null;

      // ATTENTION: we need a root DOM element e.g. for finding surfaces
      // An editor component should call something like
      // ```
      // editorSession.setRootComponent(editor.getContent())
      // ```
      // during didMount()
      this._rootComponent = null;
    }

    initialize () {
      super.initialize();

      // NOTE: in newer implementation, overlayId has been replaced by OverlayCanvas, which is implemented without appState.overlayId
      // EXPERIMENTAL: registering a 'reducer' that resets overlayId whenever the selection changes
      // this.editorState.addObserver(['selection'], this._resetOverlayId, this, { stage: 'update' })
      this.commandManager.initialize();
    }

    dispose () {
      super.dispose();
      this.editorState.removeObserver(this);
      this.surfaceManager.dispose();
      this.markersManager.dispose();
      this.commandManager.dispose();
      this.findAndReplaceManager.dispose();
    }

    _createEditorState (document, initialState = {}) {
      return Object.assign(super._createEditorState(document, initialState), {
        focusedSurface: null,
        commandStates: {},
        overlayId: null,
        findAndReplace: FindAndReplaceManager.defaultState()
      })
    }

    copy () {
      const sel = this.getSelection();
      const doc = this.getDocument();
      if (sel && !sel.isNull() && !sel.isCollapsed()) {
        return copySelection(doc, sel)
      }
    }

    cut () {
      const sel = this.getSelection();
      if (sel && !sel.isNull() && !sel.isCollapsed()) {
        const snippet = this.copy();
        this.deleteSelection();
        return snippet
      }
    }

    deleteSelection (options) {
      const sel = this.getSelection();
      if (sel && !sel.isNull() && !sel.isCollapsed()) {
        this.transaction(tx => {
          tx.deleteSelection(options);
        }, { action: 'deleteSelection' });
      }
    }

    paste (content, options) {
      this.transaction(tx => {
        tx.paste(content, options);
      }, { action: 'paste' });
      return true
    }

    insertText (text) {
      const sel = this.getSelection();
      if (sel && !sel.isNull()) {
        this.transaction(tx => {
          tx.insertText(text);
        }, { action: 'insertText' });
      }
    }

    executeCommand (commandName, params) {
      return this.commandManager.executeCommand(commandName, params)
    }

    getCommandStates () {
      return this.editorState.commandStates
    }

    getConfig () {
      return this.config
    }

    getContext () {
      return this.context
    }

    setContext (context) {
      this.context = context;
    }

    getFocusedSurface () {
      return this.editorState.focusedSurface
    }

    getSurface (surfaceId) {
      return this.surfaceManager.getSurface(surfaceId)
    }

    getSurfaceForProperty (path) {
      return this.surfaceManager._getSurfaceForProperty(path)
    }

    setRootComponent (rootComponent) {
      this._rootComponent = rootComponent;
    }

    getRootComponent () {
      return this._rootComponent
    }

    _resetOverlayId () {
      // TODO: in newer implementation, overlayId has been replaced by OverlayCanvas, which is implemented without appState.overlayId
      // const overlayId = this.editorState.overlayId
      // // overlayId === getKeyForPath(path) => if selection is value &&
      // // Overlays of value components (ManyRelationshipComponent, SingleRelationship)
      // // need to remain open if the selection is a value selection
      // const sel = this.getSelection()
      // if (sel && sel.customType === 'value') {
      //   const valueId = getKeyForPath(sel.data.path)
      //   if (overlayId !== valueId) {
      //     this.editorState.overlayId = valueId
      //   }
      // } else {
      //   this.editorState.overlayId = null
      // }
    }
  }
  return BaseEditorSession
}

class EditorSession extends EditorSessionMixin(AbstractEditorSession) {
  /**
   * @param {string} id a unique name for this editor session
   * @param {Document} document
   * @param {Configurator} config
   * @param {object} initialEditorState
   */
  constructor (id, document, config, initialEditorState = {}) {
    super(id, document, initialEditorState);

    this._setup(config);
  }
}

/*
  TODO: to be 100% safe we would need to introduce a hidden contenteditable
  where we put the selection in case of non-surface situations
  so that we are still able to receive events such as 'copy' -- actually only Edge is not dispatching
  to window.document.
*/

const EVENTS = new Set(['keydown', 'keyup', 'keypress', 'mousedown', 'mouseup', 'copy']);

class GlobalEventHandler {
  constructor () {
    // a stack of listeners
    this._listeners = new Map();

    this.initialize();
  }

  initialize () {
    EVENTS.forEach(name => this._listeners.set(name, []));
    if (platform.inBrowser) {
      const documentEl = DefaultDOMElement.wrapNativeElement(window.document);
      EVENTS.forEach(name => {
        documentEl.on(name, this._dispatch.bind(this, name), this);
      });
    }
  }

  dispose () {
    if (platform.inBrowser) {
      const documentEl = DefaultDOMElement.wrapNativeElement(window.document);
      documentEl.off(this);
    }
    this._listeners.length = 0;
  }

  addEventListener (eventName, handleFunction, owner) {
    if (!EVENTS.has(eventName)) throw new Error(`Unsupported event global event ${eventName}`)
    if (!isFunction(handleFunction)) throw new Error('Illegal argument')
    if (!owner) throw new Error('"owner" is mandatory')
    const listeners = this._listeners.get(eventName);
    listeners.push({
      handleFunction,
      owner
    });
  }

  removeEventListener (owner) {
    for (const listeners of this._listeners.values()) {
      for (let idx = listeners.length - 1; idx >= 0; idx--) {
        if (listeners[idx].owner === owner) listeners.splice(idx, 1);
      }
    }
  }

  _dispatch (eventName, event) {
    const listeners = this._listeners.get(eventName);
    // ATTENTION: iterating reverse is a preliminary solution
    // to the 'modal' problem. I.e. a modal also needs to register
    // a global event handler. In that time, the other event handlers
    // should not react.
    // Reverse iteration let's the modal handle events first, and stop bubbling
    for (let idx = listeners.length - 1; idx >= 0; idx--) {
      const { handleFunction, owner } = listeners[idx];
      // TODO: not sure if event.cancelBubble works cross browser
      // Alternatively, we can use return true logic to stop bubbling
      const res = handleFunction.call(owner, event);
      if (event.cancelBubble || res === true) break
    }
  }
}

class InsertNodeCommand extends Command {
  constructor (config) {
    super(config);

    // Note: we want to know about the node which this command is producing
    // For example we will inhibit commands, that produce a node type
    // not allowed in the current position
    if (!this.config.nodeType) {
      console.error("'config.nodeType' should be provided for InsertNodeCommand");
    }
  }

  getType () {
    return this.config.nodeType
  }

  getCommandState (params, context) {
    const sel = params.selection;
    const newState = {
      disabled: true,
      active: false
    };
    if (sel && !sel.isNull() && !sel.isCustomSelection() && sel.containerPath) {
      newState.disabled = false;
    }
    newState.showInContext = this.showInContext(sel, params, context);
    return newState
  }

  showInContext (sel, params, context) {
    const editorSession = params.editorSession;
    const selectionState = editorSession.getSelectionState();
    return sel.isCollapsed() && selectionState.isFirst && selectionState.isLast
  }

  isInsertCommand () {
    return true
  }

  execute (params, context) {
    var state = params.commandState;
    if (state.disabled) return
    const editorSession = params.editorSession;
    editorSession.transaction((tx) => {
      const nodeData = this.createNodeData(tx, params, context);
      const node = tx.insertBlockNode(nodeData);
      this.setSelection(tx, node);
    });
  }

  createNodeData (tx, params, context) {
    const type = params.type;
    if (!type) throw new Error("'type' is mandatory")
    const editorSession = params.editorSession;
    const doc = editorSession.getDocument();
    const nodeSchema = doc.getSchema().getNodeSchema(type);
    const nodeData = { type };
    for (const property of nodeSchema) {
      nodeData[property.name] = params[property.name];
    }
    return nodeData
  }

  setSelection (tx, node) {
    if (node.isText()) {
      tx.selection = {
        type: 'property',
        path: node.getPath(),
        startOffset: 0
      };
    }
  }
}

const _ManagedComponentCache = new Map();

/**
 * Example:
 * ```
 * $$(Managed(Toolbar), { bindings: ['commandState'] })
 * ```
 * `commandStates` will be taken from the app-state, and merged with the other props.
 * When `commandStates` is changed, Toolbar automatically will be rerendered automatically via extendProps.
 *
 */
function Managed (ComponentClass, ...bindings) {
  if (_ManagedComponentCache.has(ComponentClass)) return _ManagedComponentCache.get(ComponentClass)

  // an anonymous class that takes care of mapping props that start with $
  class ManagedComponent extends Component {
    constructor (...args) {
      super(...args);

      if (!this.context.editorState) {
        throw new Error("'context.editorState' is required for Managed Components.")
      }
      this._config = this._compileManagedProps(bindings);
      this._props = this._deriveManagedProps(this.props);
    }

    didMount () {
      if (this._config) {
        this._register();
      }
    }

    dispose () {
      this.context.editorState.off(this);
    }

    render () {
      return $$(ComponentClass, this._props).ref('managed')
    }

    _register () {
      const { stage, bindings } = this._config;
      this.context.editorState.addObserver(bindings, this._onUpdate, this, { stage });
    }

    _deregister () {
      this.context.editorState.off(this);
    }

    _onUpdate () {
      this._props = this._deriveManagedProps(this.props);
      this.refs.managed.extendProps(this._props);
    }

    _compileManagedProps (bindings) {
      const stage = 'render';
      if (bindings.length > 0) {
        return { stage, bindings }
      } else {
        return null
      }
    }

    _deriveManagedProps (props) {
      const editorState = this.context.editorState;
      const config = this._config;
      if (config) {
        const derivedProps = Object.assign({}, props);
        delete derivedProps.bindings;
        config.bindings.forEach(binding => {
          // warning: this will be a problem for mangling
          derivedProps[binding] = editorState._get(binding);
        });
        return derivedProps
      } else {
        return props
      }
    }
  }

  _ManagedComponentCache.set(ComponentClass, ManagedComponent);

  return ManagedComponent
}

class Redo extends Command {
  getCommandState (params) {
    const editorSession = params.editorSession;
    return {
      disabled: !editorSession.canRedo(),
      active: false
    }
  }

  execute (params) {
    const editorSession = params.editorSession;
    if (editorSession.canRedo()) {
      editorSession.redo();
      return true
    } else {
      return false
    }
  }
}

function getComponentForNode (comp, node) {
  const componentRegistry = comp.context.componentRegistry;
  let ComponentClass = componentRegistry.get(node.type);
  if (!ComponentClass) {
    const superTypes = node.getSchema().getSuperTypes();
    for (const superType of superTypes) {
      ComponentClass = componentRegistry.get(superType);
      if (ComponentClass) break
    }
  }
  if (!ComponentClass) {
    throw new Error(`No Component class registered for model type ${node.type}.`)
  }
  return ComponentClass
}

function _renderNode (comp, node, props = {}) {
  const NodeComponent = getComponentForNode(comp, node);
  props = Object.assign({
    disabled: comp.props.disabled,
    node
  }, props);
  return $$(NodeComponent, props)
}

function renderProperty (comp, document, path, props = {}) {
  const propSpec = document.getProperty(path);
  if (!propSpec) {
    throw new Error(`Could not find property for path ${path}`)
  }

  // TODO: rethink the meaning of 'disabled' vs 'readOnly'
  const disabled = comp.props.disabled || props.readOnly;

  props = Object.assign({
    document,
    path,
    disabled,
    placeholder: comp.props.placeholder
  }, props);

  switch (propSpec.reflectionType) {
    case 'integer':
    case 'number':
    case 'boolean':
    case 'string-array':
    case 'one':
    case 'many':
      throw new Error('NOT IMPLEMENTED YET')
    case 'string':
    case 'text':
      return $$(StringComponent, props)
    case 'child':
      return _renderNode(comp, document.resolve(path), props)
    case 'children':
      return $$(CollectionComponent, props)
    case 'container':
      // Note: do not override user props or value settings
      if (isNil(props.container)) {
        props.container = true;
      }
      return $$(CollectionComponent, props)
    default:
      throw new Error('Unsupported type')
  }
}

class TextInput extends Surface {
  render () {
    const { placeholder, path, spellcheck, disabled } = this.props;
    const TextPropertyComponent = this.getComponent('text-property');
    const isEditable = this.isEditable();
    // TODO: we should refactor Substance.TextPropertyEditor so that it can be used more easily
    const el = Surface.prototype.render.call(this, $$);
    el.addClass('sc-text-input');
    // Attention: being disabled does not necessarily mean not-editable, whereas non-editable is always disabled
    // A Surface can also be disabled because it is blurred, for instance.
    if (isEditable) {
      el.addClass('sm-editable');
      if (!disabled) {
        el.addClass('sm-enabled');
        el.attr('contenteditable', true);
        // native spellcheck
        el.attr('spellcheck', spellcheck === 'native');
      }
    } else {
      el.addClass('sm-readonly');
    }
    const content = $$(TextPropertyComponent, {
      doc: this.getDocument(),
      tagName: 'div',
      placeholder,
      path
    }).addClass('se-input');
    el.append(content);
    return el
  }

  // this is needed e.g. by SelectAllCommand
  get _isTextPropertyEditor () {
    return true
  }

  // this is needed e.g. by SelectAllCommand
  getPath () {
    return this.props.path
  }
}

class StringComponent extends Component {
  render () {
    const { placeholder, path, readOnly, document, inline } = this.props;
    let tagName = 'div';
    let withoutBreak = false;
    if (inline) {
      tagName = 'span';
      withoutBreak = true;
    }
    const parentSurface = this.context.surface;
    const name = getKeyForPath(path);
    // Note: readOnly and within a ContainerEditor a text property is
    // plain, not as a surface
    if (readOnly || (parentSurface && parentSurface._isContainerEditor)) {
      const TextPropertyComponent = this.getComponent('text-property');
      return $$(TextPropertyComponent, {
        doc: document,
        tagName,
        placeholder,
        path,
        withoutBreak
      })
    } else {
      return $$(TextInput, {
        name,
        path,
        placeholder
      })
    }
  }
}

class CollectionComponent extends Component {
  render () {
    const props = this.props;
    const { container, path } = props;
    let renderAsContainer;
    if (!isNil(container)) {
      renderAsContainer = Boolean(container);
    }
    if (renderAsContainer) {
      return $$(EditableCollection, Object.assign({}, props, {
        containerPath: path
      }))
    } else {
      return $$(ReadOnlyCollection, props)
    }
  }
}

class ReadOnlyCollection extends Component {
  // NOTE: this is less efficient than ContainerEditor as it will always render the whole collection
  render () {
    const { document, path, disabled, readOnly } = this.props;
    const el = $$('div').addClass('sc-collection').attr('data-id', getKeyForPath(path));
    const items = document.resolve(path);
    el.append(
      items.map(item => _renderNode(this, item, { disabled, readOnly }).ref(item.id))
    );
    return el
  }
}

class EditableCollection extends ContainerEditor {
  _getClassNames () {
    return 'sc-collection sc-container-editor sc-surface'
  }
}

/*
  Attention: in contrast to Substance.SelectAllCommand, this implementation does not take
  the surface type into consideration.
  The problem is, that for that, editorState.focusedSurface would need to be reduced
  in an earlier stage, which is impossible, as Surfaces are rendered during 'render'
  stage. So this is kind of an chicken-egg problem.
  In general, we should avoid making commandStates depend on rendered components.
*/
class SelectAllCommand extends Command {
  getCommandState (params) {
    const editorSession = params.editorSession;
    const isBlurred = editorSession.isBlurred();
    const sel = editorSession.getSelection();
    const disabled = (
      isBlurred ||
      !sel || sel.isNull()
    );
    return { disabled }
  }

  execute (params, context) {
    const editorSession = context.editorSession;
    const doc = editorSession.getDocument();
    const editorState = editorSession.getEditorState();
    const focusedSurface = editorState.focusedSurface;
    if (focusedSurface) {
      let sel = null;
      const surfaceId = focusedSurface.id;
      if (focusedSurface._isContainerEditor) {
        const containerPath = focusedSurface.getContainerPath();
        const nodeIds = doc.get(containerPath);
        if (nodeIds.length === 0) return false
        const firstNodeId = nodeIds[0];
        const lastNodeId = last(nodeIds);
        sel = {
          type: 'container',
          startPath: [firstNodeId],
          startOffset: 0,
          endPath: [lastNodeId],
          endOffset: 1,
          containerPath,
          surfaceId
        };
      } else if (focusedSurface._isTextPropertyEditor) {
        const path = focusedSurface.getPath();
        const text = doc.get(path);
        sel = {
          type: 'property',
          path: path,
          startOffset: 0,
          endOffset: text.length,
          surfaceId
        };
      }
      if (sel) {
        editorSession.setSelection(sel);
      }
      return true
    }
    return false
  }
}

class Undo extends Command {
  getCommandState (params) {
    const editorSession = params.editorSession;
    return {
      disabled: !editorSession.canUndo(),
      active: false
    }
  }

  execute (params) {
    const editorSession = params.editorSession;
    if (editorSession.canUndo()) {
      editorSession.undo();
    }
    return true
  }
}

class CustomSelectionManager {
  constructor (editorState) {
    this.editorState = editorState;

    this._selectables = new Map();
    this._currentSelectable = null;

    editorState.addObserver(['selection'], this._onSelectionChange, this, { stage: 'post-render' });
  }

  dispose () {
    this.editorState.removeObserver(this);
  }

  registerSelectable (id, selectable) {
    const _selectable = this._selectables.get(id);
    if (_selectable && _selectable !== selectable) {
      throw new Error(`A selectable has already been registered with '${id}'`)
    }
    this._selectables.set(id, selectable);
  }

  unregisterSelectable (id, selectable) {
    const _selectable = this._selectables.get(id);
    if (_selectable && _selectable !== selectable) {
      throw new Error(`selectable has not been registered with '${id}'`)
    }
    this._selectables.delete(id);
  }

  _onSelectionChange () {
    const sel = this.editorState.selection;
    const oldSelectable = this._currentSelectable;
    let newSelectable = null;
    if (sel) {
      if (sel.isCustomSelection()) {
        if (sel.customType === 'value') {
          newSelectable = this._selectables.get(`${sel.nodeId}.${sel.data.property}#${sel.data.valueId}`);
        } else {
          newSelectable = this._selectables.get(sel.nodeId);
        }
      } else if (sel.isNodeSelection()) {
        newSelectable = this._selectables.get(sel.nodeId);
      }
    }
    if (oldSelectable) {
      oldSelectable.setSelected(false);
    }
    if (newSelectable) {
      newSelectable.setSelected(true);
    }
    this._currentSelectable = newSelectable;
  }
}

class AbstractEditor extends Component {
  constructor (...args) {
    super(...args);

    this._initialize(this.props);

    this.handleActions({
      executeCommand: this._executeCommand,
      scrollSelectionIntoView: this._scrollSelectionIntoView
    });
  }

  _createAPI (archive, editorSession) {
    throw new Error('This method is abstract')
  }

  _getDocument (archive) {
    throw new Error('This method is abstract')
  }

  _getScrollableElement () {
    throw new Error('This method is abstract')
  }

  _initialize (props) {
    const { archive } = props;
    const config = archive.getConfig();
    const document = this._getDocumentFromArchive(archive);
    this.document = document;

    const editorSession = new EditorSession('document', document, config, {
      overlayId: null
    });
    this.editorSession = editorSession;

    const editorState = editorSession.editorState;
    this.editorState = editorState;

    const api = this._createAPI(archive, editorSession);
    this.api = api;

    const selectableManager = new CustomSelectionManager(editorState);
    this.selectableManager = selectableManager;

    const context = Object.assign(this.context, createEditorContext(config, editorSession), {
      config,
      api,
      editorSession,
      editorState,
      archive,
      urlResolver: archive,
      editable: true,
      selectableManager
    });
    this.context = context;

    editorSession.setContext(context);
    editorSession.initialize();

    // HACK: resetting the app state here, because things might get 'dirty' during initialization
    // TODO: find out if there is a better way to do this
    editorState._reset();
  }

  willReceiveProps (props) {
    if (props.archive !== this.props.archive) {
      this._dispose();
      this._initialize(props);
      this.empty();
    }
  }

  didMount () {
    this.editorSession.setRootComponent(this);
    this.editorState.addObserver(['selection', 'document'], this._onChangeScrollSelectionIntoView, this, { stage: 'finalize' });
  }

  dispose () {
    this._dispose();
  }

  handleKeydown (e) {
    let handled = false;
    if (!handled) {
      handled = this.editorSession.keyboardManager.onKeydown(e, this.context);
    }
    if (handled) {
      stopAndPrevent(e);
    }
    return handled
  }

  _dispose () {
    this.editorSession.dispose();
  }

  _getDocumentType () {}

  _getDocumentFromArchive (archive) {
    const documentType = this._getDocumentType();
    let documentEntry;
    if (!documentType) {
      documentEntry = archive.getDocumentEntries()[0];
    } else {
      documentEntry = archive.getDocumentEntries().find(entry => entry.type === documentType);
    }
    if (documentEntry) {
      return archive.getDocument(documentEntry.id)
    } else {
      throw new Error('Could not find main document.')
    }
  }

  _executeCommand (...args) {
    return this.editorSession.commandManager.executeCommand(...args)
  }

  _onChangeScrollSelectionIntoView () {
    const sel = this.editorState.selection;
    this._scrollSelectionIntoView(sel);
  }

  _scrollSelectionIntoView (sel, options = {}) {
    this._scrollRectIntoView(this._getSelectionRect(sel), options);
  }

  _scrollElementIntoView (el, options = {}) {
    const contentEl = this._getScrollableElement();
    const contentRect = contentEl.getNativeElement().getBoundingClientRect();
    const elRect = el.getNativeElement().getBoundingClientRect();
    const rect = getRelativeRect(contentRect, elRect);
    this._scrollRectIntoView(rect, options);
    return rect.top
  }

  _scrollRectIntoView (rect, { force }) {
    if (!rect) return
    const scrollable = this._getScrollableElement();
    const height = scrollable.getHeight();
    const scrollTop = scrollable.getProperty('scrollTop');
    const upperBound = scrollTop;
    const lowerBound = upperBound + height;
    const selTop = rect.top + scrollTop;
    const selBottom = selTop + rect.height;
    // console.log('upperBound', upperBound, 'lowerBound', lowerBound, 'height', height, 'selTop', selTop, 'selBottom', selBottom)
    // TODO: the naming is very confusing cause of the Y-flip of values
    if (force || selBottom < upperBound || selTop > lowerBound) {
      scrollable.setProperty('scrollTop', selTop);
    }
  }

  _getSelectionRect (sel) {
    let selectionRect;
    if (platform.inBrowser && sel && !sel.isNull()) {
      // TODO: here we should use the editor content, i.e. without TOC, or Toolbar
      const contentEl = this._getScrollableElement();
      const contentRect = contentEl.getNativeElement().getBoundingClientRect();
      if (sel.isNodeSelection()) {
        const nodeId = sel.nodeId;
        const nodeEl = contentEl.find(`*[data-id="${nodeId}"]`);
        if (nodeEl) {
          const nodeRect = nodeEl.getNativeElement().getBoundingClientRect();
          selectionRect = getRelativeRect(contentRect, nodeRect);
        } else {
          console.error(`FIXME: could not find a node with data-id=${nodeId}`);
        }
      } else if (sel.isCustomSelection()) {
        let el;
        if (sel.customType === 'value') {
          el = contentEl.find(`*[data-id="${sel.nodeId}.${sel.data.property}#${sel.data.valueId}"]`);
        } else {
          el = contentEl.find(`*[data-id="${sel.nodeId}"]`);
        }
        if (el) {
          selectionRect = getRelativeRect(contentRect, el.getNativeElement().getBoundingClientRect());
        } else {
          console.error(`FIXME: could not find node for custom selection: ${JSON.stringify(sel.toJSON())}`);
        }
      } else {
        selectionRect = getSelectionRect(contentRect);
      }
    }
    return selectionRect
  }

  // TODO: make sure to add all of the native ones here
  _preventNativeKeydownHandlers (event) {
    let contentEditableShortcuts;
    if (platform.isMac) {
      contentEditableShortcuts = new Set([
        'META+66', // Cmd+Bold
        'META+73', // Cmd+Italic
        'META+85' // Cmd+Underline
      ]);
    } else {
      contentEditableShortcuts = new Set([
        'CTRL+66', // Ctrl+Bold
        'CTRL+73', // Ctrl+Italic
        'CTRL+85' // Ctrl+Underline
      ]);
    }
    const key = parseKeyEvent(event);
    if (contentEditableShortcuts.has(key)) {
      event.preventDefault();
    }
  }
}

/**
 * Acts like a link if `url` is provided. Sends an action if `action` is
 * provided. Uses default behaviour if none of both provided.
 *
 * Examples:
 *
 * ```
 * $$(Button, { style: 'primary', action: 'createVersion' }, 'Create Version')
 * $$(Button, { style: 'primary', size: 'large', url: '/login' }, 'Login')
 * $$(Button, { style: 'primary', size: 'large' }, 'Request login link')
 * $$(Button, { style: 'default', size: 'large', action: 'closeModal' }, 'Cancel')
 * $$(Button, { style: 'default', size: 'small', action: 'replaceImage' }, 'Replace Image')
 * ```
 */
class Button extends Component {
  _getClass () {
    return 'sc-button'
  }

  render () {
    const { children, active, disabled } = this.props;
    const size = this.props.size || 'default';
    const style = this.props.style || 'default';
    const inverted = Boolean(this.props.inverted);

    const el = $$('button', { class: this._getClass() })
      .addClass('sm-style-' + style)
      .addClass('sm-size-' + size);
    if (disabled) {
      el.attr('disabled', true);
    }
    if (active) {
      el.addClass('sm-active');
    }
    if (inverted) {
      el.addClass('sm-inverted');
    }
    if (disabled) {
      el.append($$('span', { class: 'se-blocker' }));
    } else {
      el.on('click', this._onClick);
    }
    el.append(children);
    return el
  }

  _onClick (event) {
    const { url, action, newTab, args } = this.props;
    if (url && platform.inBrowser) {
      event.preventDefault();
      event.stopPropagation();
      if (newTab) return window.open(url)
      window.location.href = url;
    } else if (action) {
      event.preventDefault();
      event.stopPropagation();
      // send position arguments if 'args' is specified
      const _args = args || [this.props];
      this.send(action, ..._args);
    }
  }
}

function Divider (props) {
  return (
    $$('div', { className: 'sc-divider' })
  )
}

const STYLES = {
  regular: 'far',
  solid: 'fas'
};

function Icon (props) {
  const icon = props.icon;
  const fstyle = STYLES[props.style] || 'fa';
  return $$('i').addClass(fstyle).addClass('fa-' + icon)
}

function HorizontalSpace () {
  // TODO:
  return $$('span', { class: 'sc-horizontal-space' }, '\u00A0')
}

class DropdownMenu extends Component {
  render () {
    const { disabled, children, hideWhenDisabled, noCaret, noIcons } = this.props;

    const buttonProps = this._getToggleButtonProps();
    const el = $$(Button, buttonProps).addClass('sc-dropdown-menu');
    // Note: want to inherit style from Menu
    el.addClass('sc-menu');
    if (noIcons) {
      el.addClass('sm-no-icons');
    }
    if (!disabled) {
      el.on('click', this._onClick);
    }

    function _addHorizontalSpaceIfNecessary () {
      if (el.children.length > 0) el.append($$(HorizontalSpace));
    }
    // Either children are given via props
    // or we render content derived from icon, label, etc.
    if (children && children.length > 0) {
      el.append(children);
    } else {
      const { icon, label, size, tooltip } = buttonProps;
      if (icon) {
        el.append(
          $$(Icon, { icon, size })
        );
      }
      if (label) {
        _addHorizontalSpaceIfNecessary();
        el.append(
          label
        );
      }
      if (tooltip) {
        el.attr('title', tooltip);
      }

      if (!noCaret) {
        _addHorizontalSpaceIfNecessary();
        el.append(
          $$(Icon, { icon: 'caret-down' })
        );
      }
    }

    if (disabled && hideWhenDisabled) {
      el.addClass('sm-hidden');
    }

    return el
  }

  _getToggleButtonProps () {
    const { disabled, style, size, icon, label, tooltip } = this.props;
    return {
      disabled,
      style: style || 'plain',
      size,
      icon,
      label,
      tooltip,
      dropdown: true
    }
  }

  _onClick () {
    if (platform.inBrowser) {
      let { x, y, height, width } = this.getNativeElement().getBoundingClientRect();
      y = y + height + 5;
      x = x + width / 2;
      const menuSpec = Object.assign({}, this.props, { type: 'menu' });
      this.send('requestPopover', {
        requester: this,
        desiredPos: { x, y },
        content: menuSpec
      });
    }
  }
}

class FileSelect extends Component {
  render () {
    const { multiple, fileType } = this.props;
    const el = $$('input', { class: 'sc-file-select', type: 'file' })
      .on('click', stop)
      .on('dblclick', stop)
      .on('change', this._onChange);
    if (fileType) {
      el.setAttribute('accept', fileType);
    }
    if (multiple) {
      el.setAttribute('multiple', true);
    }
    return el
  }

  selectFiles () {
    this.el.val(null);
    return new Promise(resolve => {
      this._resolve = resolve;
      this.el.click();
    })
  }

  _onChange (e) {
    stop(e);
    const files = Array.prototype.slice.call(e.currentTarget.files);
    this._resolve(files);
    delete this._resolve;
  }
}

/* Just a little layout component for forms */
function Form (props) {
  return (
    $$('div', { className: 'sc-form' },
      props.children
    )
  )
}

class FormRow extends Component {
  render ($$) {
    const label = this.props.label;
    const error = this.props.error;
    const children = this.props.children;
    const el = $$('div').addClass('sc-form-row');

    if (label) {
      el.append(
        $$('div').addClass('se-description').append(
          $$('div').addClass('se-label').append(label),
          error ? $$('div').addClass('se-error').append(error) : null
        )
      );
    }
    if (error) {
      el.addClass('sm-error');
    }
    el.append(
      $$('div').addClass('se-content').append(children)
    );
    return el
  }
}

function HorizontalStack (props) {
  return $$('div', { className: 'sc-horizontal-stack' },
    ...props.children
  )
}

class Input extends Component {
  didMount () {
    // HACK: for whatever reason, the native autofocus does not work
    // after the first time. This forces focus if autofocus is set
    if (this.el.getAttribute('autofocus') === 'true') {
      this.el.focus();
      // put the cursor at the end
      if (platform.inBrowser) {
        const val = this.el.val();
        if (val) {
          this.el.getNativeElement().setSelectionRange(0, val.length);
        }
      }
    }
  }

  render () {
    return $$(this._getTagname(), this._getProps())
  }

  focus () {
    this.getElement().focus();
  }

  _getTagname () {
    return 'input'
  }

  _getClass () {
    return 'sc-input'
  }

  _getProps () {
    const attributes = Object.assign({ class: this._getClass() }, this.props);
    delete attributes.label;
    return attributes
  }
}

function Limiter (props) {
  const className = 'sc-limiter ' + (props.fullscreen ? 'sm-fullscreen' : 'sm-default');
  return $$('div', { className },
    ...props.children
  )
}

function Link (props) {
  const el = $$('a').addClass('sc-link');
  const { style, inlineBlock, inverted } = props;
  if (style) {
    el.addClass('sm-style-' + style);
  }
  if (inlineBlock) {
    el.addClass('sm-inline-block');
  }
  if (inverted) {
    el.addClass('sm-inverted');
  }
  const children = props.children;
  const attributes = Object.assign({}, props);
  // TODO: can we do this more elegantly?
  delete attributes.style;
  delete attributes.inverted;
  delete attributes.inlineBlock;
  delete attributes.children;
  el.attr(attributes);
  el.append(children);
  return el
}

// import StackFill from './StackFill'

class MenuItem extends Button {
  render () {
    const { icon, label, shortcut } = this.props;
    const active = this.props.active;
    const disabled = this.props.disabled;
    const el = $$('button', { class: 'sc-menu-item' });
    if (disabled) {
      el.attr('disabled', true);
    }
    if (active) {
      el.addClass('sm-active');
    }

    el.append(
      $$('div', { class: 'se-icon' },
        icon
          ? $$(Icon, { icon })
          : null
      )
    );

    el.append(
      $$('div', { class: 'se-label' }, label)
    );

    if (shortcut) {
      el.append(
        // $$(StackFill),
        $$('div', { class: 'se-shortcut' }, shortcut)
      );
    }

    el.on('click', this._onClick);

    return el
  }
}

function Title (props) {
  const el = $$('div', { class: 'sc-title' },
    props.children
  );
  if (props.ellipsis) {
    el.addClass('sm-ellipsis');
  }
  return el
}

class Modal extends Component {
  didMount () {
    const globalEventHandler = this.context.globalEventHandler;
    if (globalEventHandler) {
      globalEventHandler.addEventListener('keydown', this._onKeydown, this);
    }
  }

  dispose () {
    const globalEventHandler = this.context.globalEventHandler;
    if (globalEventHandler) {
      globalEventHandler.removeEventListener(this);
    }
  }

  render () {
    const { title, children, disableConfirm } = this.props;
    const confirmLabel = this.props.confirmLabel || 'OK';
    const cancelLabel = this.props.cancelLabel || 'Cancel';
    const size = this.props.size || 'default';

    const headerEl = $$('div', { class: 'se-modal-header' },
      $$(HorizontalStack, {},
        $$(Title, {}, title),
        $$(Button, { size: 'large', style: 'plain', action: 'cancel' },
          $$(Icon, { icon: 'times' })
        )
      )
    );

    return $$('div', { class: `sc-modal sm-size-${size}` },
      title ? headerEl : null,
      $$('div', { class: 'se-modal-body' }, children),
      $$(Divider),
      $$('div', { class: 'se-modal-footer' },
        $$(HorizontalStack, {},
          $$(Button, { size: 'default', style: 'secondary', action: 'cancel' }, cancelLabel),
          $$(Button, { size: 'default', style: 'primary', action: 'confirm', disabled: disableConfirm }, confirmLabel)
        )
      )
    )
  }

  _onKeydown (event) {
    event.stopPropagation();
    switch (event.keyCode) {
      case keys$1.ESCAPE: {
        this.send('cancel');
        break
      }
      case keys$1.ENTER: {
        const combo = parseKeyEvent(event, true);
        if (combo === 'META' || combo === 'ALT') {
          if (!this.props.disableConfirm) {
            this.send('confirm');
          }
        }
        break
      }
        //
    }
  }
}

class ModalCanvas extends Component {
  getActionHandlers () {
    return {
      cancel: this._cancel,
      confirm: this._confirm
    }
  }

  render () {
    const { renderModal } = this.state;
    const { isMobile } = this.props;
    const className = 'sc-modal-canvas';
    const el = $$('div', { class: className });
    if (isMobile) el.addClass('sm-modal-mobile');
    if (renderModal) {
      el.append(
        renderModal().ref('renderedModal')
      );
      el.on('mousedown', this._onMousedown, this, { capture: true });
      el.on('mouseup', this._onMouseup);
    } else {
      el.addClass('sm-hidden');
    }
    // do not let the global context menu handler handle this
    el.on('contextmenu', stopAndPrevent);
    return el
  }

  openModal (renderModal) {
    // if (this._resolve) throw new Error('Previous modal has not been closed.')
    this.setState({ renderModal });
    return new Promise((resolve, reject) => {
      this._resolve = resolve;
    })
  }

  close () {
    this._cancel();
  }

  _cancel () {
    this._resolve(null);
    this._resolve = null;
    this.setState({});
    this.send('closePopover');
  }

  _confirm () {
    this._resolve(this.refs.renderedModal);
    this._resolve = null;
    this.setState({});
    this.send('closePopover');
  }

  _onMousedown (event) {
    this._handleMouseup = false;
    if (event.target === this.getNativeElement()) {
      this._handleMouseup = true;
    }
  }

  _onMouseup (event) {
    if (this._handleMouseup) {
      if (event.target === this.getNativeElement()) {
        this.close();
      }
    }
  }
}

class Menu extends Component {
  render () {
    const { children, noIcons } = this.props;

    const el = $$('div', { class: 'sc-menu' });
    if (noIcons) {
      el.addClass('sm-no-icons');
    }
    el.append(children);

    return el
  }
}

function StackFill () {
  return (
    $$('div', { className: 'sc-stack-fill' })
  )
}

function Separator () {
  return $$('div', { class: 'sc-separator' })
}

// WIP: implementing this step-by-step as we need
function renderMenu (requester, menuNameOrSpec, commandStates) {
  const { config, editorState } = requester.context;
  if (!commandStates && editorState) {
    commandStates = editorState.commandStates;
  }
  let spec;
  if (isString(menuNameOrSpec)) {
    spec = config.getToolPanel(menuNameOrSpec, true);
  } else {
    spec = menuNameOrSpec;
  }
  // create a shallow clone of the spec
  spec = Object.assign({ type: 'menu' }, spec);
  // NOTE: sometimes we want to pass props of a component to this method
  // but we need to make sure to omit the children
  // TODO: we should actually pick only what is a valid menu spec parameter
  if (spec.children) delete spec.children;
  // context is used to inherit default behavior or style to children items
  let items;
  if (spec.items) {
    items = spec.items.map(itemSpec => _renderItem(requester, config, itemSpec, commandStates, spec));
  }
  switch (spec.type) {
    case 'toolbar': {
      return $$(HorizontalStack, {}, items)
    }
    case 'menu': {
      return $$(Menu, spec, items)
    }
    default:
      return _renderItem(requester, config, spec, commandStates)
  }
}

function _renderItem (requester, config, itemSpec, commandStates = {}, context = {}) {
  // Note: commands we define using a syntax like
  // { command: 'toggle-strong', icon: 'bold' }
  // i.e. no type, but with command given
  const type = _getItemType(itemSpec);
  switch (type) {
    case 'action':
    case 'url':
    case 'command': {
      const style = itemSpec.style || context.style;
      const size = itemSpec.size || context.size;
      const props = { style, size };
      let shortcut;
      if (type === 'command') {
        const commandName = itemSpec.command;
        const commandState = commandStates[commandName] || { disabled: true };
        Object.assign(props, commandState);
        const shortcutSpec = config.getKeyboardShortcutsByCommandName(commandName);
        shortcut = shortcutSpec ? shortcutSpec.label : null;
        props.action = 'executeCommand';
        props.args = [commandName, { commandState }, requester.context, requester];
      } else if (type === 'action') {
        props.action = itemSpec.action;
        props.args = itemSpec.args;
      } else if (type === 'url') {
        props.url = itemSpec.url;
        props.newTab = itemSpec.newTab;
      }
      const { icon, label, tooltip } = itemSpec;
      if (itemSpec.ComponentClass) {
        return $$(itemSpec.ComponentClass, Object.assign(props, { icon, label, shortcut }))
      } else if (context.type === 'menu') {
        return $$(MenuItem, Object.assign(props, { icon, label, shortcut }))
      } else {
        const buttonEl = $$(Button, props);
        if (icon) {
          buttonEl.append(
            $$(Icon, { icon: itemSpec.icon, size })
          );
        }
        if (label) {
          buttonEl.append(
            icon ? $$(HorizontalSpace) : null,
            label
          );
        }
        const title = [tooltip, shortcut].filter(Boolean).join(' ');
        if (title) {
          buttonEl.attr('title', title);
        }
        return buttonEl
      }
    }
    case 'fill': {
      return $$(StackFill)
    }
    case 'separator': {
      return $$(Separator)
    }
    case 'submenu':
    case 'menu': {
      const hasEnabledItems = _hasEnabledItems(itemSpec, commandStates);
      const menuProps = Object.assign({}, itemSpec, {
        disabled: !hasEnabledItems
      });
      if (context.type === 'menu') {
        return _renderNestedMenu()
      } else {
        return _renderDropdown(config, menuProps, commandStates, context)
      }
    }
    default:
      console.error('Unsupported menu item', itemSpec);
      throw new Error(`Unsupported menu item ${itemSpec.type}`)
  }
}

function _renderNestedMenu (config, itemSpec, commandStates) {
  throw new Error('TODO: implement nested menus')
}

function _renderDropdown (config, itemSpec, commandStates, context) {
  context = Object.assign({}, context, { type: 'menu' });
  const DropdownClass = itemSpec.ComponentClass || DropdownMenu;
  return $$(DropdownClass, itemSpec)
}

function _hasEnabledItems (spec, commandStates) {
  const items = spec.items || [];
  for (const item of items) {
    const type = _getItemType(item);
    switch (type) {
      case 'action':
      case 'url':
        return true
      case 'command': {
        const commandName = item.command;
        const commandState = commandStates[commandName];
        if (commandState && !commandState.disabled) {
          return true
        }
        break
      }
      case 'menu':
      case 'dropdown':
      case 'submenu':
        if (_hasEnabledItems(item, commandStates)) {
          return true
        }
        break
        // nothing
    }
  }
  return false
}

function _getItemType (item) {
  if (item.type) {
    return item.type
  }
  if (item.command) {
    return 'command'
  }
  if (item.action) {
    return 'action'
  }
  if (item.url) {
    return 'url'
  }
  console.error('Unsupported item type', item);
  throw new Error('Unsupported item type')
}

class Popover extends Component {
  getInitialState () {
    return { content: null, requester: null, desiredPos: null }
  }

  render () {
    const { content, requester } = this.state;
    const el = $$('div', { class: 'sc-popover sm-hidden' });
    if (requester) {
      // Note: content can either be given as menu spec or as a render function
      if (isFunction(content)) {
        const renderContent = content;
        el.append(
          renderContent()
        );
      // default: content is given as menu spec
      } else {
        el.append(
          renderMenu(requester, content)
        );
      }
    }
    return el
  }

  /**
   * Request to render a popover, given either a menu specification or a render function,
   * at the given position.
   *
   * To receive actions, the requesting component has to be provided.
   *
   * @param {object} params
   * @param {Function|object} params.content - a render function or a menu specification (see renderMenu)
   * @param {object} params.desiredPos
   * @param {number} params.desiredPos.x - the desired x screen coordinate
   * @param {number} params.desiredPos.y - the desired y screen coordinate
   * @param {Component} [params.requester] - the component that is requesting the content; this is used to dispatch actions
   */
  acquire (params, scrollable) {
    const { content, desiredPos, requester, position } = params;
    if (!content) throw new Error("'content' is required")
    if (!desiredPos) throw new Error("'desiredPos' is required")

    // NOTE: this implements a toggle behavior. I.e. if the same requester
    // requests the popover for the same position, then we hide the popover
    const state = this.state;
    if (state.requester === requester && isEqual(desiredPos, state.desiredPos)) {
      this._hide();
      return false
    }

    // Note: this prevents a potentially triggered hide, if a new popover request has come in
    this._hideIfNoNewRequest = false;

    // We started with this implementation
    // HACK adding a delay so that other things, e.g. selection related can be done first
    setTimeout(() => {
      this._showContent(content, requester, desiredPos, position, scrollable);
    }, 0);

    return true
  }

  release (requester) {
    if (this.state.requester === requester) {
      this._hide();
    }
  }

  close () {
    this._hide();
  }

  isOpen () {
    return Boolean(this.state.requester)
  }

  _showContent (content, requester, desiredPos, position, scrollable) {
    this.setState({ content, requester, desiredPos, position });
    const el = this.getElement();
    const bounds = this._getBounds();
    // console.log('bounds', bounds, 'desiredPos', desiredPos)

    // TODO: we should do some positioning here to stay within the screen/container bounds
    const menuWidth = el.htmlProp('offsetWidth');
    // By default, context menu are aligned left bottom to the desired coordinate
    let leftPos = bounds.x + desiredPos.x - menuWidth / 2;
    // Must not exceed left bound
    leftPos = Math.max(leftPos, 0);
    // Must not exceed right bound
    const maxLeftPos = bounds.right - menuWidth;
    leftPos = Math.min(leftPos, maxLeftPos);
    const topPos = desiredPos.y - bounds.y;
    const maxHeight = bounds.bottom - topPos;

    // store topPos and leftPos so that we can do repositioning on scroll
    if (scrollable) {
      this._topPos = topPos;
      this._leftPos = leftPos;
      this._initialScrollTop = scrollable.getProperty('scrollTop');
      this._initialScrollLeft = scrollable.getProperty('scrollLeft');
    }

    el.css({
      top: topPos,
      left: leftPos,
      'max-height': maxHeight
    });
    el.removeClass('sm-hidden');
    // NOTE: this is a tricky mechanism trying to detect any mousedowns outside of the context menu
    // used to close the context menu.
    // If clicked inside the popover it will not close automatically, only if clicked somewhere else
    // or if one of the rendered popover content sends an action.
    this._closeOnClick = true;
    el.on('mousedown', this._onMousedownInside, this, { once: true, capture: true });
    // making sure that there is only one active listener
    if (!this._hasGlobalMousedownListener) {
      DefaultDOMElement.getBrowserWindow().on('click', this._onMousedownOutside, this, { once: true, capture: true });
      this._hasGlobalMousedownListener = true;
    }
  }

  _getBounds () {
    if (platform.inBrowser) {
      let containerEl;
      if (this.props.getContainer) {
        containerEl = this.props.getContainer().getNativeElement();
      } else {
        containerEl = window.document;
      }
      return containerEl.getBoundingClientRect()
    } else {
      return { left: 0, top: 0, bottom: 0, right: 0 }
    }
  }

  // overriding the default send() mechanism to be able to dispatch actions to the current requester
  _doesHandleAction () {
    return Boolean(this.state.requester)
  }

  _handleAction (action, args) {
    // console.log('FORWARDING action to requester', action, args)
    this.state.requester.send(action, ...args);
    // TODO: think if this is really what we want, i.e. hiding the menu whenever an action is emitted
    this._hide();
  }

  _onMousedownInside () {
    this._closeOnClick = false;
  }

  _onMousedownOutside () {
    this._hasGlobalMousedownListener = false;
    // NOTE: this timeout is necessary so that an actual click can be handled
    // e.g. requesting to show the popover at a different location, or
    // with different content
    // In that case we do not want to hide
    if (this._closeOnClick) {
      this._hideIfNoNewRequest = true;
      // HACK waiting two ticks because the request itself
      setTimeout(() => {
        if (this._hideIfNoNewRequest) {
          this._hide();
        }
      }, 0);
    }
  }

  _hide () {
    // console.log('Hiding')
    const requester = this.state.requester;
    if (requester && requester.onClosePopover) {
      requester.onClosePopover();
    }
    this.setState(this.getInitialState());
  }

  /**
   * ATTENTION: this method has to be called by the owner whenever the scrollable
   * has been scrolled.
   */
  reposition (scrollable) {
    // Note: we use this for different kinds of popovers
    // typically, only context menus or alike require a 'relative' positioning
    if (this.state.position === 'relative') {
      const dtop = scrollable.getProperty('scrollTop') - this._initialScrollTop;
      const dleft = scrollable.getProperty('scrollLeft') - this._initialScrollLeft;
      this.el.css({
        top: this._topPos - dtop,
        left: this._leftPos + dleft
      });
    }
  }
}

class SwitchTextTypeDropdown extends DropdownMenu {
  _getToggleButtonProps () {
    const props = super._getToggleButtonProps();
    const activeItem = this._getActiveItem();
    if (activeItem) {
      props.label = activeItem.label;
    }
    props.tooltip = 'Switch Type';
    props.size = 'small';
    return props
  }

  _getActiveItem () {
    const editorState = this.context.editorState;
    const commandStates = editorState.commandStates;
    if (commandStates) {
      for (const item of this.props.items) {
        const commandState = commandStates[item.command];
        if (commandState && commandState.active) {
          return item
        }
      }
    }
  }
}

class BasicEditorApi {
  constructor (archive, editorSession) {
    this.archive = archive;
    this.editorSession = editorSession;
  }

  extendWith (apiExtension) {
    apiExtension._register(this);
  }

  getEditorSession () {
    return this.editorSession
  }

  getDocument () {
    return this.editorSession.getDocument()
  }

  getRoot () {
    return this.getDocument().root
  }

  deleteNode (nodeId) {
    this.editorSession.transaction(tx => {
      const node = tx.get(nodeId);
      if (node) {
        if (node.isInlineNode()) {
          // Note: inline nodes are bound to a character within the text
          // in contrast to regular annotations, the text underneath an inline node
          // is owned by the inline node.
          // Deleting the node's character implicitly deletes the inline node
          tx.setSelection(node.getSelection());
          tx.deleteSelection();
        } else {
          deepDeleteNode(tx, nodeId);
        }
      }
    });
  }

  removeAndDeleteNode (nodeId) {
    const node = this.editorSession.getDocument().get(nodeId, true);
    const parent = node.getParent();
    if (parent) {
      const { property: propertyName, pos } = node.getXpath();
      const property = parent.schema.getProperty(propertyName);
      this.editorSession.transaction(tx => {
        // remove the item from its parent
        if (property.isArray()) {
          removeAt(tx, [parent.id, propertyName], pos);
        } else {
          tx.set([parent.id, propertyName], null);
        }
        deepDeleteNode(tx, nodeId);
        tx.setSelection(null);
      });
    }
  }

  removeItem (collectionPath, itemId) {
    this.editorSession.transaction(tx => {
      removeFromCollection(tx, collectionPath, itemId);
      tx.setSelection(null);
    });
  }

  updateNode (id, nodeData) {
    this.editorSession.transaction(tx => {
      const node = tx.get(id);
      node.assign(nodeData);
    });
  }

  insertAnnotation (type, nodeData) {
    this.editorSession.transaction(tx => {
      tx.annotate(Object.assign({ type }, nodeData));
    });
  }

  moveNode (nodeId, direction) {
    const doc = this.getDocument();
    const node = doc.get(nodeId);
    const parent = node.getParent();
    if (!parent) throw new Error('Node does not have parent')
    const propertyName = node.getXpath().property;
    this.moveItem([parent.id, propertyName], nodeId, direction);
  }

  moveItem (collectionPath, itemId, direction) {
    const doc = this.getDocument();
    const collection = doc.get(collectionPath);
    if (!collection) throw new Error('Collection does not exist')
    const pos = collection.indexOf(itemId);
    const diff = direction === 'up' ? -1 : +1;
    const insertPos = Math.min(collection.length - 1, Math.max(0, pos + diff));
    if (insertPos !== pos) {
      this.editorSession.transaction(tx => {
        removeAt(tx, collectionPath, pos);
        insertAt(tx, collectionPath, insertPos, itemId);
      });
    }
  }

  addNode (collectionPath, nodeData) {
    this.editorSession.transaction(tx => {
      const node = tx.create(nodeData);
      append(tx, collectionPath, node.id);
      this._selectItem(tx, node);
    });
  }

  insertNode (collectionPath, pos, nodeData) {
    this.editorSession.transaction(tx => {
      const node = tx.create(nodeData);
      insertAt(tx, collectionPath, pos, node.id);
      this._selectItem(tx, node);
    });
  }

  insertInlineNode (type, nodeData) {
    this.editorSession.transaction(tx => {
      tx.insertInlineNode(Object.assign({ type }, nodeData));
    });
  }

  selectItem (item) {
    if (isString(item)) {
      item = this.getDocument().get(item);
    }
    this._selectItem(this.editorSession, item);
  }

  renameAsset (assetId, newFilename) {
    const archive = this.archive;
    const asset = archive.getAssetById(assetId);
    if (asset.filename !== newFilename) {
      this.archive.renameAsset(assetId, newFilename);
    }
  }

  _selectItem (tx, node) {
    tx.setSelection({
      type: 'custom',
      customType: 'node',
      nodeId: node.id,
      data: {
        nodeType: node.type
      }
    });
  }
}

function PopoverMixin (AnnotationComponent) {
  return class AbstractPopover extends AnnotationComponent {
    didMount () {
      super.didMount();

      const editorState = this.context.editorState;
      if (editorState) {
        editorState.addObserver(['selectionState'], this._onSelectionStateChange, this, { stage: 'position' });
      }
    }

    dispose () {
      super.dispose();

      const editorState = this.context.editorState;
      if (editorState) {
        editorState.removeObserver(this);
      }

      if (this._showPopup) {
        this.send('releasePopover', this);
      }
    }

    // Get Popover component
    getPopoverComponent () {
      throw new Error('This method is abstract')
    }

    // Check if Popover should be exposed based on selection state
    shouldShowPopover (selectionState) {
      throw new Error('This method is abstract')
    }

    _onSelectionStateChange (selectionState) {
      const oldShowPopup = this._showPopup;
      const showPopup = this.shouldShowPopover(selectionState);
      this._showPopup = showPopup;
      if (!showPopup && oldShowPopup) {
        this.send('releasePopover', this);
      }
      // always update the request because of positioning
      if (showPopup) {
        const node = this.props.node;
        const PopoverComponent = this.getPopoverComponent();
        this.send('requestPopover', {
          requester: this,
          desiredPos: this._getDesiredPopoverPos(),
          content: () => {
            return $$(PopoverComponent, { node })
          },
          position: 'relative'
        });
      }
    }

    _getDesiredPopoverPos () {
      if (platform.inBrowser) {
        const selectionRect = getSelectionRect({ top: 0, left: 0 });
        if (selectionRect) {
          let { left: x, top: y, height, width } = selectionRect;
          y = y + height + 5;
          x = x + width / 2;
          return { x, y }
        }
      }
      return { x: 0, y: 0 }
    }
  }
}

function LinkModal (props) {
  const { node, mode } = props;
  const confirmLabel = mode === 'edit' ? 'Update Link' : 'Create Link';
  const value = mode === 'edit' ? node.href : '';
  const modalProps = { cancelLabel: 'Cancel', confirmLabel, size: 'small' };
  return $$(Modal, modalProps,
    $$(Form, {},
      $$(FormRow, { label: 'Link URL' },
        $$(Input, { autofocus: true, value }).ref('href')
      )
    )
  )
}

class CreateLinkCommand extends AnnotationCommand {
  // TODO: GDocs enables the tool even if over a link
  // but not creating a new link, but opening the editor for the existing link
  getCommandState (params, context) {
    const sel = params.selection;
    const selectionState = params.selectionState;
    if (sel && !sel.isNull() && sel.isPropertySelection()) {
      const links = selectionState.annosByType.get('link') || [];
      if (super.canCreate(links, sel, context)) {
        return { disabled: false }
      }
    }
    return { disabled: true }
  }

  execute (params, context) {
    context.editorSession.getRootComponent().send('requestModal', () => {
      return $$(LinkModal, { mode: 'create' })
    }).then(modal => {
      if (!modal) return
      const href = modal.refs.href.val();
      context.api.insertAnnotation('link', { href });
    });
  }
}

class DefaultHtmlImporter extends HTMLImporter {
  _getUnsupportedElementConverter () {
    return _UnsupportedElementImporter
  }
}

const _UnsupportedElementImporter = {
  type: 'paragraph',
  import (el, node, converter) {
    node.content = converter.annotatedText(el, [node.id, 'content'], { preserveWhitespace: true });
  }
};

class FigureComponent extends Component {
  render () {
    const { node } = this.props;
    const { urlResolver } = this.context;
    const el = $$('div', { class: 'sc-figure' });
    let url = node.image;
    if (urlResolver) {
      url = urlResolver.resolveUrl(url);
    }
    el.append(
      $$('img', { src: url })
    );
    el.append(
      renderProperty(this, node.getDocument(), [node.id, 'legend'], { placeholder: 'Enter caption' })
        .addClass('se-legend')
    );
    return el
  }
}

class HeadingComponent extends Component {
  render () {
    const node = this.props.node;
    const headingOffset = this.context.headingOffset || 0;
    const level = headingOffset + this._getLevel();

    return $$('div', { class: `sc-heading sm-level-${level}` },
      renderProperty(this, node.getDocument(), [node.id, 'content'])
    )
  }

  _getLevel () {
    return Math.max(1, this.props.node.level)
  }
}

class LinkComponent extends PopoverMixin(AnnotationComponent) {
  getActionHandlers () {
    return {
      edit: this._onEdit,
      delete: this._onDelete
    }
  }

  getTagName () {
    return 'a'
  }

  getPopoverComponent () {
    return _LinkPopover
  }

  render () {
    const node = this.props.node;
    const el = super.render();
    el.addClass('sc-external-link');
    el.attr('href', node.href);
    return el
  }

  shouldShowPopover (selectionState) {
    const { selection, annosByType } = selectionState;
    if (selection && selection.isPropertySelection()) {
      // show only if there is exactly the one link under the selection
      // and the selection is completely inside of the link
      const links = annosByType.get('link');
      if (links && links.length === 1 && links[0] === this.props.node) {
        return selection.isInsideOf(this.props.node.getSelection())
      }
    }
    return false
  }

  _onDelete () {
    this.context.api.deleteNode(this.props.node.id);
  }

  _onEdit () {
    const node = this.props.node;
    this.send('requestModal', () => {
      return $$(LinkModal, { node, mode: 'edit' })
    }).then(modal => {
      // Note: ModalCanvas returns false if modal has been cancelled,
      // otherwise the modal instance, so that we can take the data from the inputs
      if (!modal) return
      this._updateLink({
        href: modal.refs.href.val()
      });
    });
  }

  _updateLink (data) {
    const node = this.props.node;
    const { href } = data;
    if (href !== node.href) {
      this.context.api.updateNode(node.id, { href });
    }
  }
}

function _LinkPopover (props) {
  const href = props.node.href;
  return $$('div', { class: 'sc-link-popover' },
    $$('div', { class: 'se-link' },
      href ? $$('a', { href, target: '_blank' }, href) : 'No link set'
    ),
    $$(Divider),
    $$(HorizontalStack, {},
      $$('div', { class: 'se-label' }, 'Link'),
      $$(StackFill),
      $$(Button, { action: 'delete', size: 'small', style: 'danger' }, 'Delete'),
      $$(Button, { action: 'edit', size: 'small', style: 'primary' }, 'Edit')
    )
  )
}

class ListComponent extends Component {
  didMount () {
    const editorState = this.context.editorState;
    if (editorState) {
      editorState.addObserver(['document'], this.rerender, this, {
        stage: 'render',
        document: {
          path: [this.props.node.id]
        }
      });
    }
  }

  dispose () {
    const editorState = this.context.editorState;
    if (editorState) {
      editorState.removeObserver(this);
    }
  }

  render ($$) {
    const ListItemComponent = this.getComponent('list-item');
    const node = this.props.node;
    // TODO: this is a little obscure; maybe we can pull in the rendering logic here
    // for sake of transparency
    const el = renderListNode(node, item => {
      // item is either a list item node, or a tagName
      if (isString(item)) {
        return $$(item)
      } else if (item.type === 'list-item') {
        return $$(ListItemComponent, {
          node: item
        }).ref(item.id)
      }
    });
    el.addClass('sc-list').attr('data-id', node.id);
    return el
  }

  // we need this ATM to prevent this being wrapped into an isolated node (see ContainerEditor._renderNode())
  get _isCustomNodeComponent () { return true }
}

class ListItemComponent extends Component {
  render () {
    const node = this.props.node;
    const el = $$('li').addClass('sc-list-item');
    el.append(
      renderProperty(this, node.getDocument(), [node.id, 'content'])
    );
    // for nested lists
    if (this.props.children) {
      el.append(this.props.children);
    }
    return el
  }
}

const MIN_LEVEL = 1;
const MAX_LEVEL = 3;

function ListItemMixin (TextNode) {
  class ListItem extends TextNode {
    getLevel () {
      return this.level
    }

    setLevel (newLevel) {
      const doc = this.getDocument();
      doc.set([this.id, 'level'], newLevel);
    }

    getPath () {
      return [this.id, 'content']
    }

    get canIndent () { return true }

    indent () {
      const level = this.level;
      if (level < MAX_LEVEL) {
        this._changeLevel(1);
      }
    }

    get canDedent () { return true }

    dedent () {
      const level = this.level;
      if (level > MIN_LEVEL) {
        this._changeLevel(-1);
      }
    }

    _changeLevel (delta) {
      this.setLevel(this.level + delta);
      // HACK: triggering parent explicitly
      // TODO: find a better solution
      this.getParent()._itemsChanged();
    }

    static isText () { return false }

    static isListItem () {
      return true
    }
  }
  return ListItem
}

function ListMixin (DocumentNode) {
  class List extends DocumentNode {
    createListItem (text) {
      return this.getDocument().create({ type: 'list-item', content: text, level: 1 })
    }

    getItems () {
      return getNodesForIds(this.getDocument(), this.items)
    }

    getItemsPath () {
      return [this.id, 'items']
    }

    getItemAt (idx) {
      const doc = this.getDocument();
      return doc.get(this.items[idx])
    }

    getItemPosition (item) {
      return this.items.indexOf(item.id)
    }

    insertItemAt (pos, item) {
      insertAt(this.getDocument(), this.getItemsPath(), pos, item.id);
    }

    removeItemAt (pos) {
      removeAt(this.getDocument(), this.getItemsPath(), pos);
    }

    getLength () {
      return this.items.length
    }

    getListTypeString () {
      return this.listType
    }

    setListTypeString (listTypeStr) {
      this.listType = listTypeStr;
    }

    _itemsChanged () {
      // HACK: using a pseudo-change triggered by items when e.g. level changes
      // TODO: find a better way for this.
      this.getDocument().set([this.id, '_itemsChanged'], true);
    }

    getFirstItem () {
      return this.getItemAt(0)
    }

    getLastItem () {
      return this.getItemAt(this.getLength() - 1)
    }

    appendItem (item) {
      this.insertItemAt(this.getLength(), item);
    }

    removeItem (item) {
      const pos = this.getItemPosition(item);
      if (pos >= 0) {
        this.removeItemAt(pos);
      }
    }

    isEmpty () {
      return this.getLength() === 0
    }

    get length () {
      return this.getLength()
    }

    getListType (level) {
      // ATTENTION: level start with 1
      const idx = level - 1;
      const listTypes = this._getListTypes();
      return listTypes[idx] || 'bullet'
    }

    setListType (level, listType) {
      const idx = level - 1;
      const listTypes = this._getListTypes();
      if (listTypes.length < level) {
        for (let i = 0; i < idx; i++) {
          if (!listTypes[i]) listTypes[i] = 'bullet';
        }
      }
      listTypes[idx] = listType;
      this._setListTypes(listTypes);
    }

    _getListTypes () {
      const listTypeString = this.getListTypeString();
      return listTypeString ? listTypeString.split(',').map(s => s.trim()) : []
    }

    _setListTypes (listTypeString) {
      if (isArray(listTypeString)) {
        listTypeString = listTypeString.join(',');
      }
      const oldListTypeString = this.getListTypeString();
      if (oldListTypeString !== listTypeString) {
        this.setListTypeString(listTypeString);
      }
    }

    static isList () {
      return true
    }
  }
  return List
}

class ParagraphComponent extends Component {
  render () {
    const node = this.props.node;
    return renderProperty(this, node.getDocument(), [node.id, 'content'], this.props).addClass('sc-paragraph')
  }
}

class Page extends Component {
  render () {
    return $$('html').append(
      this.renderPageHead($$),
      this.renderPageBody($$)
    )
  }

  renderPageHead () {
    const config = this.props.config || {};
    const headEl = $$('head').ref('head');
    // title
    headEl.append(
      this.renderTitle().ref('title')
    );
    // metadata
    headEl.append(
      this.renderMetadata()
    );
    // style sheets etc.
    headEl.append(
      this.renderExternalResources()
    );
    // scripts
    headEl.append(
      this.renderScripts()
    );
    if (!config.static) {
      // store the props
      headEl.append(
        $$('script').attr({
          id: 'substance-page-props',
          type: 'application/json'
        }).text(JSON.stringify(this.props))
      );
      // boot script
      headEl.append(
        $$('script').text(this._getBootscript())
      );
    }

    return headEl
  }

  renderTitle () {
    return $$('title').text(this.props.title)
  }

  renderMetadata () {
    return [
      $$('meta').attr('charset', 'UTF-8')
    ]
  }

  renderExternalResources () {}

  renderScripts () {}

  renderPageBody () {
    return $$('body').ref('body')
  }

  static boot () {
    setTimeout(() => {
      const PageClass = this;
      const propsEl = window.document.getElementById('substance-page-props');
      if (!propsEl) throw new Error('Could not find serialized props')
      const props = JSON.parse(propsEl.textContent);
      const htmlEl = window.document.querySelector('html');
      PageClass.mount(props, htmlEl, { adopt: true });
    }, 100);
  }

  _getBootscript () {
    const pageModule = this.props.pageModule;
    if (!pageModule) throw new Error('props.pageModule is mandatory')
    return `window.addEventListener('load', () => {
      import('${pageModule}').then(pageModule => {
        const PageClass = pageModule.default
        PageClass.boot()
      })
    })`
  }
}

// We will render the mobile version for screens with the width less than this value
const MOBILE_SIZE = 800;

class BasePage extends Page {
  getInitialState () {
    return {
      isMobile: this.props.mobile
    }
  }

  didMount () {
    if (platform.inBrowser) {
      DefaultDOMElement.wrap(window).addEventListener('resize', this.handleWindowSizeChange, { context: this });
    }
    this.handleWindowSizeChange();

    const globalEventHandler = new GlobalEventHandler();
    this._globalEventHandler = globalEventHandler;
    this.context.globalEventHandler = globalEventHandler;
  }

  dispose () {
    if (platform.inBrowser) {
      DefaultDOMElement.wrap(window).off(this);
    }
    this._globalEventHandler.dispose();
  }

  handleWindowSizeChange () {
    if (platform.inBrowser) {
      this.extendState({ isMobile: this._isMobile() });
    }
  }

  getActionHandlers () {
    return {
      requestPopover: this._openPopover,
      releasePopover: this._releasePopover,
      repositionPopover: this._repositionPopover,
      closePopover: this._closePopover,
      requestFileSelect: this._openFileSelect,
      requestModal: this._openModal
    }
  }

  get title () {
    return this.props.title
  }

  shouldRerender (newProps, newState) {
    return (!isEqual(newProps, this.props) || !isEqual(newState, this.state))
  }

  renderTitle () {
    const title = this.title;
    return $$('title').text(title ? title + ' • Substance' : 'Substance')
  }

  renderMetadata () {
    const title = this.title ? this.title + ' • Substance' : 'Substance';
    return [
      $$('meta', { charset: 'UTF-8' }),
      $$('meta', { name: 'viewport', content: 'initial-scale=1.0, width=device-width' }),
      $$('meta', { name: 'description', content: 'Self-publish your research.' }),
      $$('meta', { name: 'og:title', property: 'og:title', content: title }),
      $$('meta', { name: 'og:description', property: 'og:description', content: 'Self-publish your research.' }),
      $$('meta', { name: 'og:image', property: 'og:image', content: 'https://substance.io/static/images/substance-hero.jpg' }),
      $$('meta', { name: 'robots', content: 'index, follow' })
    ]
  }

  renderExternalResources () {
    return [
      $$('link', { rel: 'shortcut icon', href: '/static/images/favicon.ico', type: 'image/x-icon' }),
      $$('link', { rel: 'stylesheet', href: '/static/styles/fonts.css', type: 'text/css' }),
      $$('link', { rel: 'stylesheet', href: '/static/styles/styles.css', type: 'text/css' })
    ]
  }

  renderPageBody () {
    // TODO: I would prefer to have an explicit place for the page class names
    // i.e. use this.getClassNames() for instance
    return $$('body', { className: `sc-${this.props.pageName}-page` },
      this.renderBodyContent(),
      $$(Popover, {
        getContainer: () => {
          return this.getElement()
        }
      }).ref('popover'),
      $$(FileSelect, {}).ref('fileSelect'),
      $$(ModalCanvas).ref('modalCanvas')
    ).ref('body')
  }

  renderBodyContent () {
    // nothing
  }

  _isMobile () {
    if (platform.inBrowser) {
      return window.innerWidth < MOBILE_SIZE
    } else {
      return false
    }
  }

  _openPopover (params, scrollable) {
    this.refs.popover.acquire(params, scrollable);
  }

  _releasePopover (requester) {
    this.refs.popover.release(requester);
  }

  _repositionPopover (scrollable) {
    this.refs.popover.reposition(scrollable);
  }

  _closePopover () {
    return this.refs.popover.close()
  }

  _openFileSelect (props) {
    const fileSelect = this.refs.fileSelect;
    fileSelect.setProps(props);
    return fileSelect.selectFiles()
  }

  _openModal (renderModal) {
    const modalCanvas = this.refs.modalCanvas;
    return modalCanvas.openModal(renderModal)
  }
}

function SubstanceLogo (props) {
  const el = $$('img', { src: '/static/images/substance-logo.svg' })
    .addClass('sc-substance-logo');
  if (props.size) el.addClass('sm-size-' + props.size);
  if (props.inverted) el.addClass('sm-inverted');
  return el
}

var siteMap = [
  {
    label: 'Product',
    items: [
      { label: 'Features', url: '/features' },
      { label: 'Pricing', url: '/pricing' },
      { label: 'Use Cases', url: '/use-cases' }
    ]
  },
  {
    label: 'Platform',
    items: [
      { label: 'Developer API', url: '/substance/api' },
      { label: 'Open Source', url: '/substance/open-source' }
    ]
  },
  {
    label: 'Company',
    items: [
      { label: 'Our Story', url: '/our-story' },
      { label: 'Contact', url: '/contact' }
    ]
  }
];

function Footer (props) {
  const { isMobile, compact } = props;
  const navMenu = $$('div', { class: 'se-footer-menu' });
  if (!isMobile) {
    navMenu.append(
      $$('div', { class: 'se-menu' },
        $$(SubstanceLogo)
      )
    );
  }

  siteMap.forEach(category => {
    const cat = $$('div', { class: 'se-menu' });
    cat.append(
      $$('div', { class: 'se-nav-header' }, category.label)
    );
    category.items.forEach(item => {
      cat.append(
        $$('div', { class: 'se-nav-item' }).append($$(Link, { href: item.url }).text(item.label))
      );
    });
    navMenu.append(cat);
  });

  const footerBar = (
    $$('div', { class: 'se-footer-second-menu' },
      $$(HorizontalStack, {},
        $$('div', { class: 'se-copyright' }).text(`© ${new Date().getFullYear()} Substance`),
        $$('div', { class: 'se-item' }).append($$(Link, { href: '/contact' }).text('Contact')),
        // $$('div', { class: 'se-item' }).append($$(Link, { href: '/static/substance-presskit.zip' }).text('Presskit')),
        $$(StackFill),
        $$('div', { class: 'se-item' },
          $$('a', { href: 'https://www.facebook.com/groups/SubstanceForResearch', target: '_blank' },
            $$('i', { class: 'fab fa-facebook' })
          )
        ),
        $$('div', { class: 'se-item' },
          $$('a', { href: 'https://twitter.com/_substance', target: '_blank' },
            $$('i', { class: 'fab fa-twitter' })
          )
        )
      )
    )
  );
  const footerContent = [footerBar];
  if (!compact) footerContent.unshift(navMenu);
  return (
    $$('div', { class: 'sc-footer' + (isMobile ? ' sm-mobile' : '') },
      $$(Limiter, {},
        $$('div', { class: 'se-footer-container' },
          footerContent
        )
      )
    )
  )
}

export { $$ as $, AbstractEditorSession as A, Button as B, Component as C, DropdownMenu as D, EventEmitter as E, Footer as F, renderProperty as G, HorizontalStack as H, Icon as I, EditorSession as J, createEditorContext as K, Limiter as L, ModalCanvas as M, stop as N, isNil as O, Modal as P, BasicEditorApi as Q, selectNode as R, SubstanceLogo as S, Title as T, renderMenu as U, AbstractEditor as V, Managed as W, ListMixin as X, ListItemMixin as Y, SchemaBuilder as Z, InsertNodeCommand as _, StackFill as a, Configurator as a0, BasePackage as a1, ParagraphComponent as a2, HeadingComponent as a3, FigureComponent as a4, ListComponent as a5, ListItemComponent as a6, LinkComponent as a7, DefaultHtmlImporter as a8, HTMLExporter as a9, Undo as aa, Redo as ab, SelectAllCommand as ac, SwitchTextTypeCommand as ad, AnnotationCommand as ae, CreateLinkCommand as af, HtmlConverters as ag, SwitchTextTypeDropdown as ah, debounce as ai, getQueryStringParam as aj, parseKeyEvent as ak, keys$1 as al, Link as b, BasePage as c, Divider as d, Form as e, forEach as f, FormRow as g, Input as h, Document as i, createNodeFromJson as j, DefaultDOMElement as k, append as l, CHILDREN as m, DocumentSchema as n, DocumentNode as o, prettyPrintXML as p, STRING as q, platform as r, siteMap as s, removeFromCollection as t, uuid as u, deepDeleteNode as v, isString as w, last as x, DocumentIndex as y, stopAndPrevent as z };
//# sourceMappingURL=Footer-8f9b3fea.js.map
